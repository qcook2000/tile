%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Insect icons set.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Siarhei Nehin
%%CreationDate: 30.07.15
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 999.9996 1000
%%CropBox: 0 0 999.9996 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.0 x29 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Insect icons set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>icon</rdf:li>
               <rdf:li>bug</rdf:li>
               <rdf:li>insect</rdf:li>
               <rdf:li>mosquito</rdf:li>
               <rdf:li>tick</rdf:li>
               <rdf:li>butterfly</rdf:li>
               <rdf:li>spider</rdf:li>
               <rdf:li>ant</rdf:li>
               <rdf:li>wasp</rdf:li>
               <rdf:li>bee</rdf:li>
               <rdf:li>beetle</rdf:li>
               <rdf:li>cockroach</rdf:li>
               <rdf:li>ladybug</rdf:li>
               <rdf:li>сolorado beetle</rdf:li>
               <rdf:li>fly</rdf:li>
               <rdf:li>grasshopper</rdf:li>
               <rdf:li>prohibition</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>line</rdf:li>
               <rdf:li>illustration</rdf:li>
               <rdf:li>pest</rdf:li>
               <rdf:li>symbol</rdf:li>
               <rdf:li>set</rdf:li>
               <rdf:li>thin</rdf:li>
               <rdf:li>pismire</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>outline</rdf:li>
               <rdf:li>katydid</rdf:li>
               <rdf:li>creature</rdf:li>
               <rdf:li>element</rdf:li>
               <rdf:li>black</rdf:li>
               <rdf:li>simple</rdf:li>
               <rdf:li>invertebrate</rdf:li>
               <rdf:li>shape</rdf:li>
               <rdf:li>collection</rdf:li>
               <rdf:li>vermin</rdf:li>
               <rdf:li>arthropod</rdf:li>
               <rdf:li>dragonfly</rdf:li>
               <rdf:li>pictogram</rdf:li>
               <rdf:li>wild</rdf:li>
               <rdf:li>emmet</rdf:li>
               <rdf:li>damselfly</rdf:li>
               <rdf:li>wildlife</rdf:li>
               <rdf:li>logo</rdf:li>
            </rdf:Bag>
         </dc:subject>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Insect icons set - vector collection of bugs symbols in thin line style</rdf:li>
            </rdf:Alt>
         </dc:description>
         <xmp:MetadataDate>2015-07-30T20:30:46+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-07-30T20:30:46+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-07-30T20:30:46+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9MYodirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVUrq4jtrWa5kD&#xA;GOBGkcIpduKAseKqCzHbYDFUHca3aR29hdRH6xa6hLFFFPGarScExvXuCaD6cUqt5qSW17YWhQvJ&#xA;fSOikH7IjiaQsfb4Qv04oXRajaTX9xYRPzubVY3uFANE9WvAFvs8iFrx60oe4xVFYq7FWmZVUsxC&#xA;qoqSdgAMVS/UdZW0tIb2GCS+s3YerLaD1mSMgn1QiVaRa0qEqe9DilK5PzI8ix3MNs+t2yyzqXU8&#xA;vgUL9oSvThERXo5BxVMdL16DVLiQWUMkljGoI1Bl4QyOT9mHlRpBTcuBx8Cd6KphBcQXEQlgkWWI&#xA;kgSIwZSVJU7jbYimKFTFXYqp/WLf1/q/qp6/Hn6PIc+NacuPWle+KqmKuxVT+sW/r/V/VT1+PP0e&#xA;Q58a05cetK98VVMVdirsVS3zDq7aPo9zqYg+sLar6kkXqJESgPxUaQhagdATv0xSkmo/mZ5bttKF&#xA;7A7XNwwj42NPSlVpCAPWMnFYVWvxM5AGKsqiaRokaVQkhUF0B5BWpuA1BWnjTFC/FXYq7FUj8weZ&#xA;49JkWBIVmm9M3E7SSrBBBArBPUmleoXk54qKb79gTilbZ+c9FkHDUJV0q6AU+heSRoHVzxR4ZQxj&#xA;lRj0ZGPgaHbFULced0aRP0ZZG9t5GKW87TRW4unUEstmsh5TkU+1QIezYqn+m6hbajYW9/aktb3M&#xA;ayxlgVajCtGU7gjoR2xQicVdirsVef8AmkyeW9PukMMsmhrc2+pWcsUbSi1kgukuJ4HCAssT8CyH&#xA;oKsuw4jFK1/Pemaz5jt38uB9XnsrO7WOOFWMX1maaKOEyyj4I04wyMWb9kim5AKrMdC0gaXYCF5D&#xA;Pdys099dEUM1xJu707Dsq/sqAvQYqmOKHYq11xVhnmGfRvKN/bapZehafWC63+mJJDbLcRGlZ19V&#xA;ooVkifj8TMvIErWpXFLyc29nqTXN5LYXdw2ozNI8UlvG891ykkEBjkN4ku/pNy9OMrHRq1XfCr0D&#xA;ynrem+bYtH0u/mWS0s7KP1LS4like/uli4s0iRyTHgiAv6cvxMW5FaLXAr0iCCC3hSGCNYoYxxji&#xA;QBVUDsFGwxQqYq7FWG+Z9DtbjzRazJbJcXl5ZTIgaRrd1ktGV4ZY7iNWkiI9d1YqKmo7DFKTXfnf&#xA;W9KgfT9Rmaz1K3Uz2Ut4kY+s+mCfq07KPTYSfZSeEj4qBlVqK6rVn541vVok03TZmvNSnAmv5bNI&#xA;z9V9UA/VoWb92oj6NNMTvUKrtVUVTvy1oVpbearqY26QXdnYwI1JGuJHlu2Z55ZJ5AskpPoIqswr&#xA;sexxVmOKHYqslijmieKVQ8UilHRhUFWFCCPcYq8zntfNF/pF/wCWNNtWjmt5Wu5Ev5pk4wfWnNnB&#xA;bzD1GIK29S3PbdQR1VSx1PLuu393caPFo9xHeRpxuZJHs4FEc5ILSzW8KzAOFbhxnmP86tvhVm2n&#xA;zazqPmHT9O1i2aebRw0epSQmT6i8rQwz2918XAMwbkvBgeJPLwOBWd4odirsVSFSR5s1UIqiZtLs&#xA;jE0n2DxmvKg07AsOXzxS8g1a7gvmsPLxmf6rotjJbzzaO8V1HJc3DJC55s1n9v1PiUbDlQjeuFWZ&#xA;/lnrE+u3dhqEklqtzZ6Z9Rv4hKPrTkOjwyegqAIlOfxBuLcttsCsv8nkHQ+Sf3T3d88O1P3T3kzR&#xA;9z+wRiqd4odiqS+ZPMa6R9UgRY2vL92itjcSrBApReTNJI1dgP2VBY9h1IUsM8yaqsul3bNq8uu3&#xA;6Ia22mgxadbk7cpvSYl6E7RSzNzNBxAqQqw38sITZG9W5ivLKBZHY3mmuxeB+Y3eOJeEqKGVX5Ru&#xA;F+Ej4S3Eq9PsPNv1a5srafU7LW7O+lW3tr60kjW4WR68BLArMrjbd46U7pSrAKzDFDsVaYMVIU0a&#xA;mx60OKvMvOCw6ZrGl280v17UtQuvrGo3U1vLLH6UEcjWkBgtwzlBKvOONftOhJNeqlD3Xl+7vWlu&#xA;ZDe+sVvFinh0poVj/SaBbho45ZzKN1Lb9Cx8cVXw3Fve+bItIvx6K6hahRcW1pcabJBd2zcrKQJc&#xA;F+DhFlVHViGpxO22KvTLOK5itkjuphcTrXnMEEfLfb4QTTbFCvil1MUML/MTT5dQutIs7cSLdymc&#xA;QyxXElo7AemWgEiMtA/94+xPCNgo5UxSkHmr8sFHl+6l1HW53sreJ7iSAG5kpJGhMXoC4uLng3MA&#xA;fZZmrSu+Ku8r/lmzeXbWTT9alFpPEk8MB+sxKXkQGT6wLa4tub86jlxVhSlcVT78u9PmsLjVrS6E&#xA;jXkf1f15ZbiS7dKhytuZXZqiOvNNgeEi8hyrirNaYodTFKD1c6kNOmGmKpvn4pAz04oXYKZWBI5C&#xA;MEuV70pihjXlyS3g886xZfXLm/u/qdqlxc3QC/vLd5JGjQJHFHRUvYmIQbcvE4pTPTf+Uy1z/mFs&#xA;P13GKpGZL678yeZP0PfSw6tZtE1vZkD6rcrHbx/DIZEZd5C0ZZGVl77dVWcRszRqzKUYgFkJBIJ7&#xA;VFRtihdirsVYz5w0KW+MF1E7JCEez1VUbg72E5VpuJofiQxg+PHkF3IxSwfRru0vPNvma5s4mhtJ&#xA;LzQDbRsnpH0/UswhCfsqy0Kjw7DFVvk5nubS7stPjeHzDFfzT6ZdsoEXBoYIJyX+LksazBmjNCTx&#xA;p4gq9X0zT7fTtOtdPtgRBaRJDFXc8Y1Cip7nbfAhE4q7FVK4tre4jMVxEk0R6pIoZfuNcVY/fWN7&#xA;rV8dMMLWPl2ydDcGnB7yRCHWKID7ECmnNurH4RtUlSkXlrylrem6dPfWQ+r6xb6hfNFbzFhDdWrS&#xA;hAkla8fUSFWSQD4TvQgkFVmemi1u4otSNibS7lX41mjVZ0PRkYivQ+Boe22Ko/FDsVWtyKkIQGp8&#xA;JIqAe1RUfrxVjlx5LivNMv4L+9km1PUfTeTU0AheKSDeAwKn2FiarKORO5qxqcUsQ/Q2pwiSO80K&#xA;2k1WJmW39KwuLpJ9/gcXj3aKnLv6vEr+tVk+i+RI4tHuI9RkI1O+kineaB3f6q0D+pbx2zT+oeED&#xA;1ZaihYsaUNMVZNYQ3kNpHHeTrdXK1D3Cx+kH3PElAzAHjStDQncAdMVRGKHYqhNT0ux1Oza0vY/U&#xA;hYhhQsjKymqujqQyMp3DKajFUju/Jk+pQGw1jVp7/SFB4WxVYpWb9hppo6ep6f2l+EfEAzciMUus&#xA;/Jk+mwfUNH1aew0hgOdqFSWVW/3Y0M0lTH6v2n+E/ESy8ScVTzTNLsdMs1tLKP04VJY1LOzMxqzu&#xA;7Es7MdyzGpxQi8VdirsVYfPoGqXHmTU9W08CzuLZ7f6lJOp9O4f0eN0rU39KRPRTkNw8dd6UKlDW&#xA;UH5iL5g1K+NhYwrqEccKmS4aSOAW9fTdeCK8tfUcspCdhUbnFUx8t6HNpGuXsbiSeOW1tymoMB+8&#xA;kEs8lxzoABI0s5fbahAH2cVZPih2KuxVbI4SNnILBQSVUFiaDoAOuKsD0byZrsek2v1e6g076wLO&#xA;4u7S5tmuJEksmjNunNJoOkUEccgNd12xSmmkaBcaX5n9aRTcpd207veInBEuHmRpE4VbirxrEE3O&#xA;0Zqa4qyrFDsVdirsVdirsVdirsVdirsVdireKuxV2KuxV2KXUxV1MVdTFXUxV2KuxQ7FXYq7FWqY&#xA;pdih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVwGKW8UOxV2KupilumKuxQ7FXYq7FXYq7FXUxS&#xA;1TFXYodirsVaIxS7FDsVdirsVdirsVdirsVdirQZTWhBoaGnjireKtKysKqQR4jfptireKuAxS3i&#xA;h2KqTXdqokLTRqISFlJYDgWpQNvtWo64pVqYq7FDsUt0xV1MVadkQcnYKKgVJoKk0H3nFXIyOOSM&#xA;GFSKg1FQaH7jirdMVdTFWsVdih2KVgliLBQ6ljWgBFfhNG+49cVXYodirRGKXYodiq3mnMpyHMAE&#xA;rXeh2Bp9GKuR0deSMGXfcGo22OKrsVdirsVdirBfN2pP5V1OXWbOJoo7iF5LxJP947uWGJ5ONULS&#xA;Q3Ijh2f0+Lj4TUgUUpPY/mJq+vU014ltnuEtHVdOZ3uplvrdrpbeJpPTjhdI42EkrPt+zxNKKvS7&#xA;G0t7SzhtraFbeCFAscCUCoAOgpihXxVvFXYqhotSsZLq6tVmH1iyCNcxtVSiyLyRtwKqQD8Q2qCO&#xA;oOKXi02tafq13Lq9/qy22t+pK2kQLpnqRGJ6rau9Qxn+ABkZ915HjhV6xovma2ufK+m6zfSLC11H&#xA;Cs6qrfDdSERPCqfE/ITVTj1rgVPKYq3ih2KXUxV5d+ZHmPWJJhpWmX1mthfhJrfUZWQwxPaMTMjS&#xA;DmqFJTC3JxTemKr/AMvPM+ohk0m+ubQWemB5r7VYnT0J2unPoqsjcFLPKZW5R7HjTqcVenUxV2Ku&#xA;xQ1TFKGl1GzivoLGWThdXSu9vGQfjEVOdGpxqOQNK1pv2OKvIvKf6caDyLbyRXKT219cm4vpUQJO&#xA;ZY55LlKrIzjhQrVkHM77Hqq9bsdRsr+OSS0k9aKKV4GkAIX1IzxcKxADcW+ElaioI6g4qicUOxVo&#xA;4pQ91f2Np6Qu7iK39dxFB6rqnORuiJyI5MfAYoedavNeeavN8yaRZPJa6XbXNnLfC5uNPDzGRVdB&#xA;PAjGQAqQilqVDMRTicUpx5C80WKeWo7HVVXR7zRY4La+huR9WQFxxideYjFJCpGwFWBptTFWadcU&#xA;N4q7FXYqwjzebrW9IuIL1JtD0OJXkuL2ZIZJ5XQfulhgHrOPi+OvwyVUcetcUsf8u6JqdrrUd/BA&#xA;mn61a2lmkeiPHHHHc2whRbmRJiH4SFywopBqi86g4q9M02+lvIDJNZz2MqsUeC44cqgA1BjaRGXf&#xA;qGxQjMVdirsUsF/MlIHms7a2FxFqmoJ9Re7tXVPTtbm5gtmMwYHmokuF4Abg1I25YqjX8u6FYeYt&#xA;A06zsIIrJLO/QQCNeJANuPiqPiJ7k4qlWhaXpuj+eZNFMEy6fHLJd6JHzT6pDNcQ82jWIfGH+G4Z&#xA;D9kLUDfFXouKupireKqdza291by21zGs1vMpSWJxVWVhQqQeoIxV5RJNCmsa/wCcdKtbfTl8rqbC&#xA;O2Hwx3aW7zxXELqnFUeRki9I0NOK12NAq1bH6xregecNVtrW/XzKDZNZ1Lx2kUpiS3jQOOLyxs0v&#xA;qkgV5PTpQqvWLW1t7W3itraNYbeFQkUSCiqqigUAdAMVVMVdTFWsVYf+Z2oR2mhW6iAzXk90iWMq&#xA;twa3mVHdbjZo2ITjRgrCoNO+KsJv/K+rafY3tskvpTeVrUag19Fd3jtOJI5WlEVuWVYJLgxN6jCR&#xA;qE1UbnCr0/ytcWtx5esZLWzOnwCP00sTxrD6ZMZj+Go+ErTAqaYq7FDsVYZ+YV/p9tYXYXS01LVR&#xA;ZzBWliJihhZWJaSUo6qpZBROrGnbcKUmPki50iSVaRRaUs+m29kbd5IpGDXUETmQRlKsys/qlmbn&#xA;UEcd6qoZfL155evNN1PUdKttSvp7m6tDbwASSSQtbPcF1LJ8boLaQRKfi4NwLEknFXpGkPpz6Zb/&#xA;AKNT07FU4W8QRouCp8PH03CsvGlKEYoRmKuxV2KsS/MXSbXVdP02yckXcuowLZFQpYFgyzOvIEVj&#xA;tzJIK91GKUksvItvoXmjQpry7e9jaWUW8svNgk6W5SGOsrzMOUQb9oCqKAN8VekDFDeKuxVsYpef&#xA;+b47uxvxLDL9YmLLq2qTyIWZLDTryCVLaEKaIKMxrQluLE7kUVT7Ubu0PnPy6BMhNxaX5gowPMH6&#xA;uw4+PwqTiqQ3kZ1Xzbco7CPTbucWFlfQgrcRahY25uFlil5FSF5TxleNKqwNRUYq9AgSRIY0lf1Z&#xA;VUB5KceTAbtxHSp7YqvpireKt0xV5B+YfkrWdJ8v3UmmTR3ektqEF7c2M4IeV5ESF3nlFAVWdVm+&#xA;zSrMTsBiq38vfJOuavoNtLqNyllpAvri6t7C3FXidYpLdZLeU1ChppGm+yVqqkdTir2GmKtYq6mK&#xA;tYqxD8wNLe6tVMcpa8u1/RmlwNtHHNdtSW5+H4maKFWYeAVvHFWOX9z5l1e51jT7fSpYtUvrSyiu&#xA;zcRSLZobYzNcKJiAsiy1CR8Ca8q9moqzfyrFajSxd2UrtYak31+1gen7kXIEroD1p6jM1D0Jp0xV&#xA;OMUNYq7FUq81pZv5Y1cXrNHZ/Urj6xIgqyx+k3JlG3xKNxil5Za2OpFZ9Y1bU1sb25vba2vbd2lF&#xA;wlzPfW8iLIjOYlS3SNjAyD4kNdt8Kpj5N0270zzdbabdXH1mzgd2jlgM0lt+kUtTGw5zu7eq8Jlk&#xA;lA2BIFa1qFerYodirsVdiqHlsbWW8gvJI+VxbLIkDkn4RLx50FaVPAb0r95xV15Y2l7GkdzH6iRy&#xA;xzpuQRJC4kRgVIOzKPn0O2KonFXYq4YpbxQhodMsYr64v0iH1u6VEnmJLMUjBCIKk8VFSeK7VJPU&#xA;4pSST8tvJ0k5mFlJExKNwhurqGMemzMgWKOVIwFLsQAtNziqbyaBo72EGn/VUjtLV0ltooqxem8b&#xA;clZDGVZTXwO+9epxVMQMVbxV1MVbpiqnc20Nzby206CSCdGjlQ9GRxxYbeIOKutraG2toraBBHBA&#xA;ixxIOiog4qN/ADFVSmKupirWKtYqhJtMsZr+3v5Yg93aK6W0jEn0xLQOVWvEMQKcqVpt0JxVE4qh&#xA;bHTrOwjkitI/RikkaVo1J4h3NW4qSQoJ3otBWp6k4qiMUOOKWsUIXUtLstStxbXsZlt+QdoubqrF&#xA;egcKV5r/AJLVB8MVQGt+UfLmtyxy6pYpPNGrIkwLRycHBVkLxlGKkOw4k03OKVaXy7osljbWItVh&#xA;tbJxLZpAWgMTqCOUbRFGU0dgaHcE164qmWKHYq7FXYq7FXYpbxQ7FWxil2KrsUOGKWxiq7FW8Vbp&#xA;irdMVdTFXUxV1MVapirWKtYq0cVaOKtYoaxS1irWKHYq0cUuxQ7FXYq7FXYq7FXDFW8VdilvFDYx&#xA;S3ireKt4q2MVXDFWwMVbpirdMVdTFWqYq1TFWjirWKrcVaxVrFWjirWKGsUuxQ0cVdirsVdirsVd&#xA;irHvNPmy30ex1ERh21G1gilt4ViaYyvcu0UKoispesiUYAimKUss/O+q2mpz2/mmwTSYk076/btC&#xA;z3EbiIFrlTMVio8Yp+7Ce/I7YqzON+cavxK8gG4sKMKitCPHFC4YpbxQ2MUoe9u4IBHE9xHb3F0x&#xA;hszLQhpuJYALVeRopPEHemKpMnmuW1sr1NStidY09oontLf7Ny9yeFs1vzP2Jm2+I/AQwJovLFU0&#xA;0q6u/TitdUmt/wBMPGZ5ba3JokZagpyJZlWvHmQOR7DpiqZDFVwxVsYquAxVLPMmpzaXpRvo+IWK&#xA;e2Fw7iqpbvcxpcSNutBHCztXtTFXeW9Tm1TSVvpOPGWe5Fu6CivbpcSJbyDdv7yFUaveuKpmRiq0&#xA;4q0cVWnFUm17VbuCez0zTQjapfsxRpAWSGCLj607qCpIXkqqK7sw7VxVF3c8ksd3a6fPEupxRBkE&#xA;gLqjSBvSaRFKtxJU98VUtD1UappyXLRG3uFZobu1YgtFPExWRCR1ow2PcUPfFUccVaxQ0cUpdr11&#xA;qFnpz3tkqSG0rNcQSVBkhRSXRGrRXpupO1RQ0rUKGK+b/wAxrnRLyw+qWtvdWl9Zm5IurgWZUlh6&#xA;dHKy8qry5DjRaVLYpRlh5r1XUtE0H6nHF+ltaiMskrj/AEeBIeP1h+Idi/EuFRQ3xdSQMVZdih2K&#xA;uxV2KsE87WUGuatbWtnZfpCXS3STWB6qxRi35LMtq/OqO8jIr8TTioNSvIclKRLF5c1x7XV9E8vr&#xA;DpulSuusx2bWySSxKK8FitGcyqGVJFBI5pULy5UKr1O0u7a8tYbu1lWa2nRZIZUNVZGFQQfcYoVh&#xA;ilvFDeKUh89GEeVr5mJFwoRtPKjk/wBdEi/VAgG5Y3HADFXjlzp+hatcS61qOo63N5h/0KSyu47F&#xA;lLNLtAYEDBuAeteLpz34biuFXqP5Z3i3tvqd3PdSXeozXA9SaeH6vIbZF4Wv7vsCqs3+sW74FZqM&#xA;VXDFVwxVcMVePebb2XQdM1Hy0kDaautaiRYoeUlpDp0cSmQxx2/ruI5DCeacAB6h2oMVa8oXlxru&#xA;m2HlqWE6nHoupAXaIHjtZdNkiJT1kuPQdkjab92nAgiNdqYq9iOKrTiq04q0cVeefmLf+YvL2pN5&#xA;j05YpLRtMmsnaavCC4DepBKzANxBY0PKimlGZfhxVhR/NHU7fULm/ieVL27+qxXf1myihtkijkCI&#xA;ysLuWSPl6jlmdWG/thV6X5Aj1p7HUtT1eJbe51e+e8it1DL6cIhit4gQ4Vt1g5fEoJrUqDtgVk+K&#xA;GsVccUpbruqxadZKzQNdzXUi21rZrx5TSy9E+KigBQzMT0UE4oYD5b0iS10L/EOl3Q0+fVb5bea1&#xA;gjtpraOKTUPqqpAzRBwiRtVRXiT8XHc4pRGmwab5Q84XtuLcXcUtvbXVzqb+glxb/XLiWJ+McaRK&#xA;LbnEjPwpxJ5EGpIVejYodirsVSrzJqdzY2CJZANqV9Ktpp6sKqJpATzYd1ijVpGHcKcUpT5i0jTd&#xA;L8ganYmRxGbeQyTH45bi4k3q4FDI88poV/arxxVDeWtS0K/84zTafLACmlW0SJbABHIkcyoxGxa3&#xA;Hprx/Y5+9AqmVvH+gvMKWke2ka28jwRjpBfBTLIq+CTorPTs6t/NirIxireKG8UsM/May1D9FS6w&#xA;93xtNEkg1G2s4U4lnt5FZ2mcluY4cuKKo8dzSiqReXpLaXynLICOI/w99V4gVAWO0MIAHhNWnviq&#xA;p+XVvdape6trukXX1UW9/Np3CZDNDcW0czXG4rGwZPrBVHB23qCMVeojFVwxVcMVXDFXmGkwMl/5&#xA;gM0Ef1uPT76C8v8AkTPczo6tI7qR+7j+MeigdqJ4Yq7VoWfUPL5hgj+tyafYwWd/yIntp3dmjdFA&#xA;/eR/AfWQutU8cVennFVpxVacVaOKsD/MeHUr2a00yeRrby7dGFbi6hQlxO1ykSB5a0jCmRHj+Hdg&#xA;amgoVUJfeV/K0l95jsWtoLa006wsZYzGqKYOH1hyQSDxDKtH/mWtcVTz8vZvMUnlyEa2P3sQjjtp&#xA;HQxSvGsKVaVSzb+pzUHbkADTfFWS4oaxVxxSxn8x7i6tfJep3VrG0ksKKzhKh1hLhbhkYbqwgZ6M&#xA;NxirB9J802Oi6H/hfWjFZXWnX9rPbSIpWCe1OoRz+pEPi+HiSVA/ZoN2DAKrF1u+1zz7Ya/Y2Z/R&#xA;15JFpNqzIS80ETTS3LtU8fRMUpLDf4gnQqRhV6/gQ7FXYqleuaXdXn1O5spUhvtPmM9uZVLRtyie&#xA;J0cKVNGWQ7jofuxSlUnlvXrrXNK1LUb+OZLGWSZ7SNDHbrWF4lCRkuzyVk5eo7/Dx+FRyOKozzVo&#xA;V5q0OniynNrNaXkc7Txt6cqxlXRzE/GQBhz5cWUq4HA7NXFWl0bX7m7sv0pe289pYTfWUaGF4pZn&#xA;EbogkrI6qF58jx6kdhtiqfjFW8UNjFKWeZtOutT0C+021ZUkvojau7kgJFMRHM4oD8SxsxUdzTFU&#xA;puPy08tyzTmM3Nra3Txy3VhbztHA7wuZYyAPij4uxakTKK4qmnl3Qzo0moW8KxJp006z2SRjiUUx&#xA;IjRsoAFFMfw0/ZIHbFU6GKrhirYxVcDirCdR8p+YPrmq6tp727XmpG5hlsZXdIWt5IYYI3Eiq5WY&#xA;fVVb7JB5FfBsVW6X5Q8xC+0zWNSlg+u6ebaGLT4nd4EtooJoHbmyIWmP1pnrxp8IX3xVnBOKrTir&#xA;RxVacVSXzfok+t6FNpsLRgyvE0kc3L05UilWRoXKfEqyBeBI6A4qxW//ACutZbCd4BM9/fx8Lm2u&#xA;L6YwIZFXkXlVPWuRCVHpiU9h9nFWd2sc8drDHPJ606IqyzAcQ7gAM3GppU70riqpirWKGjilAa7p&#xA;Savo93prytCl3GY2kUA0B7EH7Snow7jbFCpaR3EtjCupQwi5UfvUjq8XJajknIAgEbivTpilAanp&#xA;V7f65pk/NIbHTWa59RameSZkaL0unFYuDkv1LbdKVxVOcUOxV2KuxV2KuGKt4q7FLeKGxilvFW8V&#xA;bxVcMVbGKtjFW64q3XFXVxVquKtYq0cVaxVbirWKtHFWjirWKGjil2KGjirsVdirsVdirsVdirhi&#xA;lvFDsVbGKXYquxQ2MUtjFW8VbxVuuKt1xV1cVdXFXVxVquKtYq0cVaOKtYq1iho4paxQ1irsVaOK&#xA;XYodirsVdiqD1HV9O01Y3v5hbxStwEzhhEp/y5KcEr25EVxVFc0KepyHCnLnXanWtcVWQ3NtN/cy&#xA;pL8Kv8DBvhcVVtuzdjiqGudd0m31CHTpLgG/uKenaxhpJaH9tkQMUTxdqL74pR+KHDFLeKGxilvF&#xA;W8VbxVvFW8VdXFVI3luLsWZf/SGjMwSh+wrBSa0p1YYq4XlubtrMP/pCxiYpQ/YZioNaU6qcVVa4&#xA;q7FWq4q1iqHu721tFje5kEayyJDGTXeSVgqLt/MxpiqpLKkcbySHiiAs7HoABUnFVO1uoLq1huoG&#xA;5wXCLLE9CKo4DKaEAjY98VVMUOOKWsUOxVBXesabaXK211OsEjxSTqZAVQxwish9Qjh8INSK1pv0&#xA;xSrWl1Dd2sV1AWMM6iSMsrISrCoJVwrD6RihWxV2KuxVA6rfTWsSrDYTajJMSghh9MClNzI0rRoq&#xA;/T8gcUvO/NMkum6VdQQaZeaVHexva3Omx/vrOYXI9MNbSRl4oJFdgeLCMOOQoSQcVQ6XPmu115LX&#xA;Wo7mzmvbWNBJZBLiZ7eByZIYTawxcWLutGYUiQt8VSCFWaaAx01ltofLVxp1tdOCbkPBM5Y7c7or&#xA;K8pY/wA1X9zirJ8UOxVzuiIzuQqKCWY7AAbk4pYjqH5seStOELXlzNBHcrztpJbeeJZUH7UfqonJ&#xA;fcbYq8183eftfXzm8Vney27ylBpSSieH0AyOrc7f0/3nJihYMjHb4CD0KvTE/NTyg2qDShLcfpKv&#xA;E2QtpjOCF5H9yqmTZd9l6YFZNpupWWpWUd7ZSerby8grFWQ1RijqyOFZWVlKkMKg4qi64q7FW64q&#xA;83846zqlo/GW5TTfNNoiiwuLd1W3vLOZv9JJS5DRx+gsRkbmW9OinkQxBVa8nazqd2/GK5TUvNN0&#xA;jC/uLh1a3s7OB/8ARiEtgscnrrKJF4FfUqx5AKAFXpNcVaxV1cVaxVh3nbXrNbg+X5oY7n63ah1t&#xA;i/pzPcTXMcFoIm5KV4ycnZxunEHFUj1HQL2Py5bQSaNqssliIpL0S6o0kEsUNPrCBPrT8xNHzUKY&#xA;1G+9BirL/K3mK31qG9MDRPHZ3BgjeA1QxNGk0R6mjCOUKw7MD0xVO8UNYq7FWjiryfzt5rfV7Y6Z&#xA;Fpq6hc6ZqdzLLKkvow/V9MpLMlSHflLbu0DClC3KlQMUs28r+bE1+81BIkEMVktr+4f/AHoV7iH1&#xA;mMgBKgfEEA68lauKsixQ7FXYqo3l1FaWk93Ny9K3jaWTgpZuKKWPFRUk0HQYq8z8zaSZoIrnX4qX&#xA;GqQ3N3dKiQNcQtGYFtbOGeZXWAKrnm6ivOrAjril2p6LeQa5atrlwmp6g0WmwQrPFDNbNDJPBa3Y&#xA;4SJzjk9SQy80ccgaEfBirNfLRu7M3Gh3XOT9HcfqV09T6tpJX0at3kj4mN+5oG/axVPsUOxV2KXj&#xA;t/5Q813uplk8uQ2ZcsUFtLHb2iFuryxwNE8x/wAsyGvX0RuMKqF1+VGqL5u0OOXUY0WS2aSRbdEi&#xA;jR7RqMFhWMRSDjcD7SjmS9QFIUKr5/IHmmzuli/REV4Fbis8Dx/U3jLA8ZLKWsTeyqkVOnqndiFe&#xA;taClzHo1ml1aRWNwsSiWzt6elE1PsoFqoA8ATTxPXFUwrirsVdXFXnGo2X6Q1zSF86TOi6hBO9jp&#xA;8btFHa3BngWOPnB8TycZQhZ3Kk1oKHFXadZfo/XNXXyXM7rp8ED32nyO0sd1cCedZI+c/wASScYi&#xA;gZHCg0qKDFXpFcVaxV2KtYq898zm58zeZdG0+CSez0WK4kWe79L03muY0aZRbtLGSPSNv/eLT7Ro&#xA;ajFUa2katqmo6t5evdevG06C2hPKNLaOeQXQlVlklWLovp7cFU+JOKqf5b6pfQ6cmkaoJHlWWYad&#xA;eCHjBPDGxBo0SiKNg6vRDT4aUrirNjirsUOxVD3pvRayGxWNrun7oTsyx1r1YqGbb2H3dcUvKPN2&#xA;qeY9F81wS3v6Lur2bT7iGJhbyoskcnxH1B61RV4Y4VHJvtV7kYVZH+WbeY38s6NMjWDaQ0IQRxxy&#xA;QzGNKqs5YF05tQck4+/PtgVneKHYq7FXYqx3zVZ2tzf6HDdRrLbXVzcWdzG1KNFPYzllJ6/E0ajb&#xA;FKC1DQLKwvdHCSTXNze38ETXF1KZZPStIZrlIwW/ZBiLeJO5JOKsvxQ4YpbxQ7FXYpSq9sLqXzLp&#xA;V6iVtra3u45nqBRpjDwFK1NfTbFU2xVuuKt4odil1cVefeYNAsfM3mXVLW3uVN/aQWktvdKS/wBW&#xA;mjeZZIHKn93yVkcAGoaj/sjFXeX9AsfLPmXTLW4uVF/dwXktxdMTGLmaR4VjgQsfj4qruQTUtV/2&#xA;jir0GuKurirsUNVxSwjzpYahP5p0KfSLktqkHqOtlIzmCNFVh9ZdFPFQ3JoGY/EQ/wANStCqvgPn&#xA;Nta1K5h0dbKW+gtYUuri4ikgiaEy83CxlpZKeqCqlE5dyuKqn5Y20dt5deL1pWuhcOLu0nd2e1kA&#xA;A9AhzseIDsR8LMxdfhYYqy7FDsVaOKXYoeH/AJz6J5jm8yLcWtnNeQTCySyuNhFDLLN6RhDN3eVI&#xA;W4+5r1wpeh/lZpl/p3kuzgvkmhmLzOlpcCjwRGVhFFTtSMKfmcCstxQ7FXYq7FVrIjFSyglTVSRW&#xA;hpSo+g4q5kRipZQShqhIrQ0IqPoJGKrsVdirgcUt4odirsUt4odireKXVxV1cVaSONAQihQSWIUA&#xA;VLGpO3cnFXPHG4AdQwBDAMAaFTUHfuDireKurirq4q1ihrioYvQciAC1NyBWgr9JxV1cUrVRFZmV&#xA;QGfdyBuSBTf6MULsVaOKXYodirRAIoRUbHfxG4xVvFXYq7FXYq7FXYq7FXYq7FXYq4HFLeKHYq7F&#xA;W64pdirsUOxV2KuxV2KuxV2KurilrFDsVdirVcUuxQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q6uKW8UOxV2KuxV2KXVxVuuKurirVcVdXFXYodirsVdirVcUuxQ7FXYq7FXYq7FXYq7FXYqhdS1G&#xA;002xmvrt+FvAvJyBUnsFUDdmYkBQOp2xVj0x1S5W3uNev5NFtb2VYLXTbQ8XDyAlFuboByHalB6Z&#xA;ReVF5MSKqVul6XNdW1xPa6ne6deWlzc2z8riS7iIgmZY2eO7Mw+OLizcSvXYjriqK8q+ajqhNneB&#xA;VvlVpYJ4ldbe8t1fh9ZtufxcOVKippUEFlZWKrI8UOxV2KsI81ef7axvDYxXaWNvHIIbzUmX1nV6&#xA;cnjt4Bu5jT4pJCCqdKMdgpVvLUOj+YLCe6ttU1G4eK4eB7kXsq7rR0YJCYoRzjdG4+ntWhFRirrr&#xA;zDc+WtWjsry7k1bTzGZruQxg3VhCDxE87RKqNDXapUOKE/EA1FWYgggEGoPQjFDeKuxVLdc1kaZb&#xA;x+nA13fXT+jY2SEK0spBanI7IiqpZ3P2QPoxSxi6k1KObVJtf1GaRNNht7mW20+V7OGOOVn5msf7&#xA;9lRY6lmk3ofhXFUx1eym0Swm1Sy1uW2hgHNoNQdry2kBOyEvyuAW+yvB+p+y3TFUz8t6+us2HrPb&#xA;SWN7CQl9p84pLBKVD8W6VBVgyt3H3YqmuKHYq0zBQWY0A3JPQDFWNwXOr+Yx9YsrptM0Fv8Aee4i&#xA;VTdXS9PUQyKyxRN+yeJZh8Q47VUofRdNs9UsPrFvqGo2t0kkyFhfSzOPSnkiDNHKXh+L0iQDHTFX&#xA;aX5rlh12XQ9QlF7GkiwQazEnpxm5Klvqk9PgE4Va1Q8T0opoCqyzFDsVdiqTavq92t2mk6Skcury&#xA;x+szTVMNvCSV9abiQTUghEBBYg7gAkKUns4bea5WHVNQ1S41GS6ksWjEzWqLIkJuOSpZtEgjMIDK&#xA;WLH4gD8WKrtXn1PyuLea1vptUiuJVhi0W6pLcyk9fqswAk5KvxH1eS0G7L1xVkumajaalYQ31o3O&#xA;3nXkhIKsOxVlO6spBDA7g7YoRWKuxVjvmWUHVdGhlSSS2iea/liiRpGc2qARrxWpYiSYOB4rilj2&#xA;s+bdPgF1aakZtT0XUCytZS281vqFuZDsqRPHE80Qb7LIOadfi6hVgPlTzvc+YVuNMmv0t47i4a5v&#xA;Ypre4urq7CxRwRIILZQJFMcKvKOY5uTVeFQxV6THFrggsdV1AyBrXUrddPFwsUU/1a742kqukKqq&#xA;BjNyCEkjiKnlsArOMUOxVQvrkWljcXRHIQRPKV8eClqfhirzTzH5Y1X/AAdpeqWtzGYtItG1K8i4&#xA;uk8zvBI96FmQk/6SszqRxBBPIN2KlJ764Ojanqti2m2lvdPJFI6afPdww6faiGIfWnito4vVjR5K&#xA;M3JWcg7BV2Ksl0GPS7K6t4PLup3WtzXcyJrqXCtcpKvALLNcTulYpEShVC+/2ePgFZV5M5J5fhti&#xA;3JbGa6sYmrUmKzuZLaOp8eEQriqd1xV1cUMQ1i1XUfMl+XgurttLs7VbS3s7lrOXldyymciVJYKV&#xA;WGPbn+zil5L5tlsf8Sarcat+khFbwRQ6ZpF8XlanEMHun9UubdZ5SOVX3PwttTCqvpWoeYNP1bSI&#xA;vNGpXNjp9vKIYopUWR7GWVf9HllW4EqLVVIjc81XelGVsVeyThLbztZSRbfpKwuI7kDoxtJImhY/&#xA;6onkH04FT6uKHVxSknnPm/l+a2DcVvprWxlatCIry5jtpKHx4SmmKpT5x1PzjZaVNBpGmxiRwyWk&#xA;lo008ionT92LcRxkrsPjNOwamKvJvKXm7XYINR0621Szsba5j9a61O5MvrWwjkaL0+aRAGdkFa0I&#xA;J+IfGThV6/LpVkfy5a2s5IniSy+s2d1boUjMqL68M6KzSNX1AHqzEk7k1wKySxuRd2NvdAcRPEko&#xA;Xw5qGp+OKFfFXYqw6GzuZrfUNUhW6k1G41SYRtYyQpIqWrNZorfWCITGEiLFWDbtUDlil5tHH5p0&#xA;zzTNb2813Ddw3bXlvb3jW1zLNLc2zwwgQwv8TN8YZg6oEXk3YAqzj8sdQt9Tc3+q38t/5nlhKutz&#xA;bm39CFGHOK3+COMr8aM5UcjVeQGwAVkuhp9W13XbJNoDLDexrvRWuUIkA/1pIWc+7HxxVPcUOxVI&#xA;/NMNxEllrFtE002kzGaSBBV5Ld0aOdVHdgrc1A6lQO+KWLecNWHmDRAyXX1LytdTR2z3rN6RuY2a&#xA;s78iVKQJEj07yNT9j7arFLj8uJb3zJa6vo/HT77UYrvVLOzmDxx+naXMCwxv6ZV4/ViuFb4fijYb&#xA;b4VZ9DYwXmu2VlbfWCunlLzWRNd3F3HHMq8oLYGWSRfU5sJSQKhVH8wwKzLFDsVWuiujIwqrAhh4&#xA;g4qwP6/fLpL+RI7dptcEElmryhhB9Q4+nHeySD7Q9NlUqp5GSq7D4gpSiGzsLm18txWFrFqnmOG8&#xA;e612C7dGn5RW7Q3IuGP2eEzRempAX4VoKAYqz7V7nTNFiuNTS0R9SuysUaQoouLubjxii5UqxoO+&#xA;yqKmgGKq3l7TZdN0e3tZ3El0A0t3Iv2XuJnMs7LXs0rsRiqY4odirGtevovL+sDzBdchpM9uLTU5&#xA;VVn9Ews8lvKVWp4kyyI1B1K9sUsO8x+TPNPmvXINdWKKwZLVzZWl0vNB6Tg263QBI9RxNMWHEqin&#xA;j8RJxVb5f8t6/wCYZbW316C3tbbQ7iMXMDO8tyoiKzCzJK8ZbZmWKRGZmNBTk25xVlvlexspNXnv&#xA;tODro1lG9npxeSSVJHkdGuXhMjNSFTDGiBfhqGpsd1WV4odiqW+YtMl1LRrm0gcRXRCyWkrdEuIX&#xA;EsDmnZZUUnFKQN5g1XzLE2maKkmm3Ea8dau5gVa0lI3tYtvimP8AOKqq0YVquKsb8x/lzJp2hacP&#xA;r7/oPTrWKDXLWI+m8saTGaW4Dnny4M5fg46DrXFU71TRotPRPLOh3s6pqsbxDSiVkitrWQ0nuEcr&#xA;6sSqrMEBfiXKqoG+Ks4RFRFRRRVACjwAxQuxV2KsQn1geV9TvrSaCS4j1Sb61osUK1aW4lAWa2B+&#xA;yreoPVq1BxZj+ycUpXqP5YNqdvqGqX5il8z6hLb3AdWaOGD6uU/0eJ6OeJjj4l2Q1ajcdgAqreXv&#xA;L3leHys95eyXcUEF1cXNzdXdz6cySxD6pPW4tfR5xt6P+z+4YqyDytDPJHeavcxNBLqswmigfZ47&#xA;eONYoFYHcMVXmwPQsR2xVPcUOxV2KpBdeUoPWkn0u6k0ySZ/VnhjWOW2kkrXm0Equgau5ZOLE9Ti&#xA;lZL5Z1W7uo7i/wBZflEkkSmzgjtnMUrIzp6pM0ihjEleBU7dRiqcadptjptolpYwrBbpUhF7k7lm&#xA;JqWZjuWJqe+KEVirsVdiqX6todhqixG4Dx3NuSbW8gYxTxFuvpyLuAf2l+y3cHFUAuheYIpGaLWw&#xA;3MBXnls4WuGVfs1kj9JDSp/3XilE6b5ctbS7+vzzTahqfEoL27YM6o27LEiBIogab8EFe9cVTbFD&#xA;sVdiqyWKKWJ4pUWSKRSskbAMrKwoQQdiCMVSOPyzdWIKaLqk1lbb8LGZVurdK/77D8ZUUdlEnEdg&#xA;MUqbeUGu5pJdX1CS7SYILi1gRLWGYRg8RLwrNIoqfgaTj4g4qyCKKKKJIokWOKNQscagKqqooAAN&#xA;gAMUL8VdirsVSnUvLdpd3Yv4JptP1MKE+vWjBXZF6LKjh4pVFduaGnamKUPLonmKeN7e41z/AEZx&#xA;xf07SESlSCGBaT1YzX/jHiqN0fQdO0lJPqys881Dc3czGSeUqKLzkbei/sqPhXsBiqY4odirsVQu&#xA;o6ZYalaNaX0Kz270JRuzKaqykUKsp3DA1B6YqliaHrtt8FlrspgH2Y72FLllFegkBhkb5uzH3OKX&#xA;Q+Vo5J4rnV7ybVZYG5wRTCOO3jcbhlgiVVLA7hn5EdiMVT3FDsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVf/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:74dae36d-8ad9-4645-a8c9-902fae25b701</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:74dae36d-8ad9-4645-a8c9-902fae25b701</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:33ca1287-1e4f-2b4b-bded-d037aea63fda</stRef:instanceID>
            <stRef:documentID>xmp.did:5297c82e-e4d1-4d36-968a-e99ac413fe7c</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:5297c82e-e4d1-4d36-968a-e99ac413fe7c</stEvt:instanceID>
                  <stEvt:when>2015-07-30T17:37:47+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:74dae36d-8ad9-4645-a8c9-902fae25b701</stEvt:instanceID>
                  <stEvt:when>2015-07-30T20:30:46+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=90</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>65</xmpG:red>
                           <xmpG:green>64</xmpG:green>
                           <xmpG:blue>66</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=5</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>241</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>242</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[500 0 0 500 500 500 ]ct
/0 
<<
/ShadingType 3 
/ColorSpace /0 /CSA get_res
/Coords [0 0 0 0 0 1 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.945098 .94902 .94902 ]
/C1 [1 1 1 ]
/N 2.06749 
>>
]
/Bounds []
/Encode [1 0 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[500 0 0 500 500 500 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2lprVc]nrVc]mr;?Kjr;?Kjr;6Bgqtp9fqtp9eqYL'bqYL'bqYL$`q>'j^q>'j^q=sa[
q"XXZq"XXZq"OOWp\4FVp\4FVp\4FUp@e4Rp@e4Rp@e4Rp@\+Op%A"Np%A"Np%A"Np%7nKo^qeJo^qeJ
o^qeJo^qeIoCMSFoCMSFoCMSFoCMSFoCMSFoCDJCo()ABo()ABo()ABo()ABo()ABo()ABo'u8?naZ/>
naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>
~>
<~s8N#srr2orrr2lprVc]nrVc]nr;?Kjr;?Kjr;?Kiqtp9fqtp9fqtp6dqYL'bqYL'bqYL$`q>'j^q>'j^
q>'j]q"XXZq"XXZq"XXZp\4FVp\4FVp\4FVp\4FUp@e4Rp@e4Rp@e4Rp@e4Rp%A"Np%A"Np%A"Np%A"N
p%A"Mo^qeJo^qeJo^qeJo^qeJo^qeJo^h\GoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMPDo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
~>
<~s8N#srr2orrr2lprVc]nrVc]nr;?Kjr;?Kjr;?Kiqtp9fqtp9fqtp6dqYL'bqYL'bqYL$`q>'j^q>'j^
q>'j]q"XXZq"XXZq"XXZp\4FVp\4FVp\4FVp\4FUp@e4Rp@e4Rp@e4Rp@e4Rp%A"Np%A"Np%A"Np%A"N
p%A"Mo^qeJo^qeJo^qeJo^qeJo^qeJo^h\GoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMPDo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
~>
]
>>
0 0 0 0 0 1 [
]true true []
/DeviceRGB
RadialShade
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
906.328 681.866 mo
906.505 680.788 906.152 676.388 904.231 674.86 cv
906.406 675.078 908.249 676.532 908.249 678.6 cv
908.249 679.98 907.479 681.218 906.328 681.866 cv
cp
895.747 674.857 mo
893.748 676.594 893.488 681.374 893.653 681.849 cv
892.503 681.19 891.75 679.975 891.75 678.6 cv
891.748 676.451 893.447 675.176 895.747 674.857 cv
cp
902.282 734.969 mo
901.913 736.561 901.572 738.018 901.25 739.39 cv
901.25 730.104 li
905.798 702.862 li
906.723 702.625 908.732 701.924 908.83 701.883 cv
908.908 702.853 908.962 703.839 908.774 704.75 cv
906.682 715.179 904.377 725.909 902.282 734.969 cv
cp
908.75 717.223 mo
908.75 740.872 li
904.839 735.004 li
906.1 729.524 907.432 723.453 908.75 717.223 cv
cp
896.822 703.378 mo
897.841 703.516 899.955 703.614 899.985 703.614 cv
901.053 703.614 902.118 703.518 903.178 703.373 cv
900 722.411 li
896.822 703.378 li
cp
908.228 699.303 mo
907.276 699.71 906.288 700.063 905.291 700.344 cv
903.046 700.975 900.689 701.2 898.365 701.013 cv
897.203 700.92 896.05 700.724 894.923 700.424 cv
894.611 700.342 891.68 699.337 891.702 699.29 cv
894.639 692.993 896.249 686.055 896.25 679.1 cv
896.25 677.438 897.436 676.251 898.95 676.251 cv
898.961 676.251 901.049 676.251 901.049 676.251 cv
902.563 676.251 903.81 677.439 903.75 678.951 cv
903.583 683.125 905.076 692.583 908.228 699.303 cv
cp
895.161 735.004 mo
891.25 740.872 li
891.25 717.223 li
892.567 723.453 893.899 729.524 895.161 735.004 cv
cp
894.203 702.869 mo
898.75 730.104 li
898.75 739.394 li
898.427 738.02 898.086 736.561 897.717 734.967 cv
895.622 725.909 893.318 715.179 891.225 704.755 cv
891.225 704.752 891.225 704.752 891.225 704.75 cv
891.076 704.032 891.076 702.882 891.12 701.874 cv
891.222 701.916 893.263 702.63 894.203 702.869 cv
cp
885.879 705.89 mo
888.608 703.187 li
888.616 703.839 888.656 704.464 888.75 705.019 cv
888.75 734.845 li
886.213 724.698 li
886.047 724.027 885.371 723.614 884.697 723.788 cv
884.028 723.956 883.62 724.635 883.786 725.304 cv
888.786 745.304 li
889.104 746.333 890.229 746.646 891.04 745.695 cv
895.937 738.347 li
897.667 745.749 898.786 750.299 898.786 750.299 cv
899.125 751.729 900.812 751.771 901.213 750.299 cv
901.213 750.299 902.332 745.748 904.063 738.348 cv
908.96 745.695 li
909.447 746.388 910.918 746.576 911.213 745.304 cv
916.213 725.304 li
916.379 724.635 915.971 723.956 915.302 723.788 cv
914.631 723.612 913.952 724.027 913.786 724.698 cv
911.25 734.845 li
911.25 705.001 li
911.25 704.999 911.247 704.997 911.247 704.995 cv
911.351 704.388 911.408 703.783 911.402 703.197 cv
914.121 705.89 li
914.612 706.378 915.398 706.373 915.883 705.885 cv
920.246 701.522 li
929.441 706.119 li
929.621 706.21 929.812 706.251 930 706.251 cv
930.456 706.251 930.898 705.997 931.118 705.56 cv
931.425 704.943 931.176 704.193 930.559 703.883 cv
920.559 698.883 li
920.078 698.641 919.497 698.737 919.116 699.117 cv
914.995 703.238 li
910.974 699.255 li
910.915 699.139 li
909.512 696.285 908.499 693.404 907.735 690.408 cv
920.395 686.188 li
920.805 686.051 921.118 685.709 921.216 685.289 cv
921.316 684.867 921.191 684.423 920.883 684.117 cv
916.521 679.755 li
921.118 670.56 li
921.425 669.943 921.176 669.193 920.559 668.883 cv
919.939 668.57 919.192 668.827 918.882 669.442 cv
913.882 679.442 li
913.64 679.923 913.735 680.504 914.116 680.885 cv
917.685 684.454 li
907.144 687.968 li
906.919 686.77 906.732 685.582 906.59 684.38 cv
909.006 683.494 910.749 681.251 910.749 678.6 cv
910.749 675.153 907.946 672.35 904.499 672.35 cv
903.32 672.35 902.259 672.768 901.3 673.364 cv
901.826 655.879 910.476 651.162 910.566 651.117 cv
911.176 650.802 911.423 650.05 911.111 649.437 cv
910.8 648.822 910.051 648.578 909.441 648.883 cv
909.098 649.053 902.738 652.425 900 663.753 cv
897.261 652.425 890.901 649.053 890.559 648.883 cv
889.939 648.573 889.192 648.824 888.882 649.442 cv
888.574 650.057 888.82 650.804 889.433 651.117 cv
889.523 651.162 898.174 655.879 898.699 673.364 cv
897.74 672.768 896.68 672.35 895.5 672.35 cv
892.053 672.35 889.25 675.153 889.25 678.6 cv
889.25 681.24 890.943 683.447 893.354 684.363 cv
893.228 685.523 893.027 686.724 892.771 687.955 cv
882.312 684.457 li
885.883 680.885 li
886.264 680.504 886.36 679.923 886.118 679.442 cv
881.118 669.442 li
880.805 668.827 880.056 668.573 879.441 668.883 cv
878.823 669.193 878.574 669.943 878.882 670.56 cv
883.479 679.755 li
879.116 684.117 li
878.811 684.423 878.684 684.867 878.784 685.287 cv
878.882 685.709 879.192 686.049 879.604 686.188 cv
892.253 690.419 li
891.53 693.208 890.481 696.144 888.979 699.2 cv
888.969 699.22 888.96 699.237 888.952 699.257 cv
888.929 699.298 888.913 699.342 888.894 699.386 cv
885.005 703.238 li
880.883 699.117 li
880.505 698.737 879.924 698.641 879.441 698.883 cv
869.441 703.883 li
868.823 704.193 868.574 704.943 868.882 705.56 cv
869.101 705.997 869.543 706.251 870 706.251 cv
870.188 706.251 870.378 706.21 870.559 706.119 cv
879.753 701.522 li
884.116 705.885 li
884.597 706.373 885.388 706.378 885.879 705.89 cv
cp
.254902 .25098 .258824 rgb
f
284.365 484.174 mo
284.594 484.354 284.868 484.442 285.139 484.442 cv
285.508 484.442 285.874 484.279 286.12 483.966 cv
286.872 483.007 288.298 482.777 289.363 483.448 cv
289.912 483.785 li
290.503 484.125 291.272 483.929 291.623 483.339 cv
291.972 482.743 291.772 481.976 291.177 481.627 cv
290.703 481.337 li
288.532 479.972 285.727 480.433 284.157 482.418 cv
283.73 482.96 283.823 483.746 284.365 484.174 cv
cp
f
309.416 483.956 mo
309.631 483.956 309.848 483.9 310.049 483.785 cv
310.595 483.451 li
311.465 482.904 312.59 482.936 313.396 483.534 cv
313.952 483.947 314.734 483.829 315.144 483.275 cv
315.556 482.721 315.439 481.937 314.885 481.527 cv
313.254 480.319 310.993 480.24 309.255 481.339 cv
308.784 481.627 li
308.188 481.976 307.988 482.743 308.337 483.339 cv
308.569 483.734 308.989 483.956 309.416 483.956 cv
cp
f
289.294 490.983 mo
289.524 491.163 289.797 491.251 290.068 491.251 cv
290.437 491.251 290.803 491.088 291.05 490.775 cv
291.806 489.816 293.23 489.581 294.302 490.267 cv
294.831 490.59 li
295.422 490.951 296.189 490.756 296.545 490.16 cv
296.902 489.569 296.709 488.8 296.115 488.446 cv
295.632 488.151 li
293.464 486.769 290.654 487.24 289.087 489.227 cv
288.659 489.769 288.752 490.555 289.294 490.983 cv
cp
f
305.207 491.251 mo
305.427 491.251 305.649 491.195 305.849 491.073 cv
306.386 490.743 li
307.256 490.197 308.384 490.231 309.187 490.829 cv
309.748 491.241 310.527 491.124 310.935 490.57 cv
311.347 490.016 311.23 489.232 310.676 488.822 cv
309.04 487.609 306.777 487.54 305.046 488.634 cv
304.565 488.929 li
303.972 489.283 303.779 490.052 304.135 490.643 cv
304.37 491.034 304.785 491.251 305.207 491.251 cv
cp
f
306.673 537.319 mo
307.898 531.378 li
310.112 520.653 309.878 509.362 307.221 498.729 cv
306.509 495.879 li
308.386 495.498 310.18 495.022 311.86 494.569 cv
312.633 494.36 313.341 494.179 314.051 493.999 cv
314.829 497.501 li
317.362 508.899 317.025 520.858 313.861 532.108 cv
311.705 534.405 309.286 536.188 306.673 537.319 cv
cp
296.064 538.229 mo
294.548 530.875 li
292.412 520.511 292.636 509.606 295.205 499.335 cv
295.967 496.286 li
297.28 496.468 298.616 496.603 300 496.603 cv
301.383 496.603 302.719 496.468 304.032 496.286 cv
304.795 499.335 li
307.363 509.606 307.588 520.511 305.451 530.875 cv
303.936 538.229 li
302.652 538.547 301.343 538.751 300 538.751 cv
298.656 538.751 297.347 538.547 296.064 538.229 cv
cp
286.138 532.107 mo
282.974 520.865 282.637 508.902 285.171 497.501 cv
285.945 494.013 li
286.667 494.196 287.352 494.357 288.139 494.569 cv
289.82 495.022 291.614 495.498 293.491 495.879 cv
292.778 498.729 li
290.122 509.362 289.887 520.653 292.102 531.378 cv
293.326 537.319 li
290.714 536.188 288.295 534.405 286.138 532.107 cv
cp
281.333 493.224 mo
281.971 493.224 282.742 493.375 283.496 493.506 cv
282.729 496.959 li
280.501 506.982 280.547 517.4 282.575 527.443 cv
278.662 521.197 276.25 512.878 276.25 503.724 cv
276.25 498.414 277.046 495.221 278.681 493.968 cv
279.377 493.436 280.271 493.224 281.333 493.224 cv
cp
285.254 478.529 mo
286.079 477.477 287.639 477.23 288.789 477.967 cv
290.181 478.849 291.674 479.503 293.204 480.023 cv
293.517 480.152 293.843 480.268 294.182 480.378 cv
294.194 480.381 294.205 480.384 294.216 480.388 cv
295.892 480.926 297.844 481.251 300 481.251 cv
302.156 481.251 304.107 480.926 305.783 480.388 cv
305.794 480.384 305.806 480.381 305.817 480.378 cv
306.156 480.268 306.483 480.152 306.796 480.023 cv
308.326 479.503 309.818 478.849 311.211 477.967 cv
312.363 477.23 313.923 477.477 314.746 478.529 cv
317.365 481.844 318.75 485.812 318.75 490.001 cv
318.75 490.251 318.724 490.499 318.713 490.747 cv
316.506 490.741 313.974 491.407 311.208 492.155 cv
307.827 493.068 303.994 494.103 300 494.103 cv
296.006 494.103 292.173 493.068 288.791 492.155 cv
286.027 491.407 283.494 490.74 281.286 490.747 cv
281.275 490.499 281.25 490.251 281.25 490.001 cv
281.25 485.812 282.634 481.844 285.254 478.529 cv
cp
306.734 472.726 mo
306.131 473.318 305.405 473.751 304.551 473.751 cv
303.064 473.751 301.854 472.741 301.443 471.322 cv
303.609 471.492 305.44 472.027 306.734 472.726 cv
cp
298.574 471.321 mo
298.184 472.71 296.962 473.751 295.449 473.751 cv
294.594 473.751 293.868 473.318 293.265 472.726 cv
294.563 472.025 296.4 471.49 298.574 471.321 cv
cp
294.94 477.997 mo
292.678 477.259 291.25 476.092 291.25 475.001 cv
291.25 474.837 291.314 474.672 291.376 474.506 cv
292.447 475.597 293.887 476.251 295.449 476.251 cv
297.338 476.251 298.94 475.284 300 473.882 cv
301.06 475.284 302.661 476.251 304.551 476.251 cv
306.112 476.251 307.553 475.597 308.623 474.506 cv
308.685 474.672 308.75 474.838 308.75 475.001 cv
308.75 476.092 307.322 477.259 305.059 477.997 cv
301.758 478.928 298.241 478.928 294.94 477.997 cv
cp
323.75 503.724 mo
323.75 512.878 321.337 521.197 317.425 527.443 cv
319.453 517.396 319.498 506.98 317.27 496.959 cv
316.498 493.48 li
318.518 493.126 320.195 493.112 321.318 493.968 cv
322.954 495.221 323.75 498.414 323.75 503.724 cv
cp
328.869 510.489 mo
328.984 510.763 329.194 510.985 329.46 511.119 cv
339.46 516.119 li
339.641 516.21 339.831 516.251 340.019 516.251 cv
340.476 516.251 340.918 515.997 341.137 515.56 cv
341.445 514.943 341.196 514.193 340.578 513.883 cv
330.991 509.088 li
324.812 494.513 li
324.78 494.438 324.695 494.42 324.651 494.354 cv
324.157 493.389 323.585 492.556 322.837 491.984 cv
322.33 491.596 321.774 491.341 321.196 491.142 cv
321.217 490.761 321.25 490.381 321.25 490.001 cv
321.25 488.36 320.996 486.768 320.63 485.207 cv
326.094 470.695 li
330.903 465.885 li
331.391 465.397 331.391 464.606 330.903 464.117 cv
330.415 463.629 329.624 463.629 329.135 464.117 cv
324.135 469.117 li
324.009 469.242 323.913 469.393 323.85 469.562 cv
319.363 481.48 li
318.655 479.904 317.813 478.378 316.709 476.981 cv
315.375 475.293 313.187 474.726 311.195 475.324 cv
311.204 475.215 311.25 475.113 311.25 475.001 cv
311.25 472.751 309.312 470.854 306.272 469.758 cv
306.519 460.621 320.55 451.136 320.693 451.041 cv
321.267 450.658 321.423 449.882 321.04 449.308 cv
320.656 448.734 319.88 448.573 319.306 448.961 cv
318.689 449.372 304.613 458.902 303.825 469.121 cv
302.635 468.896 301.364 468.751 300 468.751 cv
298.636 468.751 297.365 468.896 296.175 469.121 cv
295.387 458.902 281.31 449.372 280.693 448.961 cv
280.127 448.583 279.345 448.732 278.96 449.308 cv
278.576 449.882 278.733 450.658 279.306 451.041 cv
279.449 451.136 293.481 460.609 293.727 469.758 cv
290.687 470.854 288.75 472.75 288.75 475.001 cv
288.75 475.113 288.796 475.215 288.805 475.324 cv
286.812 474.726 284.627 475.293 283.291 476.981 cv
282.192 478.371 281.354 479.889 280.647 481.457 cv
276.169 469.562 li
276.106 469.393 276.01 469.242 275.884 469.117 cv
270.884 464.117 li
270.395 463.629 269.604 463.629 269.116 464.117 cv
268.628 464.606 268.628 465.397 269.116 465.885 cv
273.926 470.695 li
279.378 485.176 li
279.006 486.746 278.75 488.349 278.75 490.001 cv
278.75 490.381 278.783 490.762 278.803 491.142 cv
278.225 491.342 277.669 491.596 277.163 491.984 cv
276.407 492.562 275.831 493.408 275.335 494.387 cv
275.302 494.441 275.232 494.453 275.207 494.513 cv
269.028 509.088 li
259.441 513.883 li
258.823 514.193 258.574 514.943 258.882 515.56 cv
259.101 515.997 259.543 516.251 260 516.251 cv
260.188 516.251 260.378 516.21 260.559 516.119 cv
270.559 511.119 li
270.825 510.985 271.035 510.763 271.15 510.489 cv
273.771 504.306 li
273.811 508.083 274.235 511.727 275.005 515.156 cv
275.006 515.167 274.996 515.176 274.997 515.187 cv
278.706 539.796 li
273.882 549.442 li
273.574 550.06 273.823 550.809 274.441 551.119 cv
274.621 551.21 274.812 551.251 275 551.251 cv
275.456 551.251 275.898 550.997 276.118 550.56 cv
281.118 540.56 li
281.233 540.331 281.274 540.07 281.235 539.816 cv
279.246 526.616 li
284.051 535.498 291.555 541.251 300 541.251 cv
308.46 541.251 315.977 535.475 320.781 526.564 cv
318.784 539.816 li
318.745 540.07 318.786 540.331 318.901 540.56 cv
323.901 550.56 li
324.121 550.997 324.563 551.251 325.019 551.251 cv
325.207 551.251 325.398 551.21 325.578 551.119 cv
326.196 550.809 326.445 550.06 326.137 549.442 cv
321.313 539.796 li
325.022 515.187 li
325.025 515.161 325.003 515.143 325.005 515.118 cv
325.771 511.687 326.193 508.042 326.231 504.264 cv
328.869 510.489 li
cp
f
493.301 262.701 mo
493.623 262.701 493.989 262.765 494.392 262.897 cv
495.923 263.358 496.95 264.745 496.95 266.351 cv
496.95 267.048 496.713 267.678 496.367 268.241 cv
494.988 266.627 492.973 265.651 490.749 265.651 cv
490.397 265.651 490.09 265.803 489.752 265.852 cv
490.006 264.087 491.466 262.701 493.301 262.701 cv
cp
502.456 262.008 mo
501.296 263.128 500.549 264.641 500.549 266.351 cv
500.549 267.843 501.094 269.318 502.086 270.435 cv
502.317 270.694 502.571 270.933 502.843 271.148 cv
503.219 271.444 503.662 271.584 504.136 271.431 cv
504.337 271.366 504.522 271.25 504.671 271.1 cv
504.836 270.934 504.898 270.744 505.009 270.549 cv
505.098 270.394 505.202 270.246 505.312 270.106 cv
505.528 269.826 505.779 269.574 506.055 269.353 cv
506.606 268.91 507.254 268.592 507.936 268.412 cv
508.581 268.242 509.26 268.194 509.921 268.286 cv
509.905 268.343 509.911 268.398 509.904 268.456 cv
509.882 268.618 509.798 268.765 509.844 268.932 cv
510.151 270.055 510.3 271.075 510.3 272.052 cv
510.3 272.819 510.198 273.639 509.98 274.633 cv
509.937 274.831 510.031 275.002 510.079 275.186 cv
508.593 275.243 507.063 276.023 505.466 276.857 cv
503.684 277.787 501.841 278.751 500 278.751 cv
498.164 278.751 496.318 277.772 494.533 276.827 cv
492.941 275.982 491.41 275.192 489.932 275.124 cv
489.966 274.958 490.058 274.809 490.019 274.633 cv
489.802 273.639 489.699 272.819 489.699 272.052 cv
489.699 271.075 489.848 270.055 490.156 268.932 cv
490.201 268.765 490.117 268.618 490.096 268.456 cv
490.089 268.398 490.094 268.343 490.078 268.285 cv
490.073 268.266 490.995 268.244 491.079 268.25 cv
491.422 268.272 491.762 268.329 492.094 268.419 cv
492.758 268.599 493.389 268.91 493.928 269.339 cv
494.235 269.583 494.512 269.867 494.746 270.183 cv
495.058 270.604 495.173 271.103 495.678 271.355 cv
496.708 271.867 497.566 270.893 498.141 270.162 cv
498.613 269.563 498.968 268.875 499.187 268.145 cv
499.362 267.564 499.45 266.958 499.45 266.351 cv
499.45 264.638 498.703 263.124 497.548 262.007 cv
499.164 261.614 500.839 261.616 502.456 262.008 cv
cp
510.248 265.852 mo
509.909 265.803 509.602 265.651 509.25 265.651 cv
507.026 265.651 505.011 266.627 503.633 268.241 cv
503.287 267.678 503.049 267.048 503.049 266.351 cv
503.049 264.745 504.077 263.358 505.639 262.887 cv
506.01 262.765 506.377 262.701 506.699 262.701 cv
508.534 262.701 509.994 264.087 510.248 265.852 cv
cp
519.861 326.32 mo
519.809 326.678 519.58 326.964 519.25 327.086 cv
519.074 327.152 518.723 327.22 518.374 326.913 cv
516.919 325.631 514.702 323.546 512.39 320.875 cv
511.866 320.278 511.331 319.64 510.796 318.973 cv
509.77 317.685 508.856 316.386 507.983 315.066 cv
506.794 313.238 505.703 311.277 504.847 309.197 cv
504.307 307.917 503.905 306.613 503.602 305.305 cv
503.512 304.929 503.435 304.551 503.363 304.171 cv
503.124 302.886 502.96 300.309 502.961 300.218 cv
502.961 300.204 507.895 299.042 510.61 294.703 cv
511.203 293.756 511.621 292.706 511.906 291.627 cv
513.746 284.821 li
516.185 294.256 521.367 316.124 519.861 326.32 cv
cp
500 343.751 mo
499.358 343.751 497.432 341.739 494.932 336.251 cv
505.068 336.251 li
502.567 341.739 500.641 343.751 500 343.751 cv
cp
481.721 326.915 mo
481.379 327.216 481.028 327.152 480.849 327.086 cv
480.517 326.964 480.288 326.678 480.234 326.317 cv
478.667 315.707 484.284 292.772 486.357 284.855 cv
488.196 291.634 li
488.492 292.704 488.925 293.708 489.477 294.631 cv
491.138 297.412 493.869 299.439 497.144 300.197 cv
497.172 301.631 497.018 303.128 496.675 304.755 cv
496.345 306.398 495.835 307.938 495.09 309.537 cv
494.514 310.978 493.752 312.465 492.634 314.349 cv
491.472 316.251 490.149 317.948 489.109 319.237 cv
488.63 319.86 488.154 320.433 487.661 320.973 cv
485.158 323.815 482.868 325.912 481.721 326.915 cv
cp
494.362 316.251 mo
505.763 316.251 li
505.826 316.346 506.972 318.038 507.497 318.751 cv
492.647 318.751 li
493.215 317.989 493.788 317.145 494.362 316.251 cv
cp
497.047 311.251 mo
503.011 311.251 li
503.121 311.49 504.007 313.271 504.269 313.751 cv
495.839 313.751 li
496.262 312.973 496.66 312.137 497.047 311.251 cv
cp
498.862 306.251 mo
501.236 306.251 li
501.445 307.09 501.696 307.922 501.993 308.751 cv
498.093 308.751 li
498.398 307.933 498.653 307.098 498.862 306.251 cv
cp
509.556 323.751 mo
490.478 323.751 li
490.322 323.204 490.124 322.679 489.978 322.13 cv
490.219 321.851 490.456 321.548 490.694 321.251 cv
509.415 321.251 li
509.633 321.512 509.847 321.77 510.063 322.02 cv
509.887 322.649 509.726 323.166 509.556 323.751 cv
cp
492.02 328.751 mo
491.74 327.933 491.51 327.084 491.249 326.251 cv
508.819 326.251 li
508.537 327.158 508.267 327.958 507.997 328.751 cv
492.02 328.751 li
cp
506.133 333.751 mo
493.866 333.751 li
493.552 332.983 493.229 332.126 492.902 331.251 cv
507.098 331.251 li
506.771 332.126 506.448 332.983 506.133 333.751 cv
cp
489.223 277.699 mo
490.139 277.33 491.704 278.155 493.362 279.037 cv
495.322 280.074 497.544 281.251 500 281.251 cv
502.453 281.251 504.67 280.094 506.623 279.071 cv
508.288 278.199 509.848 277.372 510.776 277.762 cv
511.374 278.011 511.933 278.863 512.397 280.233 cv
509.492 290.98 li
508.515 294.659 505.449 297.382 501.75 297.902 cv
501.421 297.902 500.503 298.212 500.503 299.056 cv
500.503 299.062 500.503 299.068 500.503 299.073 cv
500.503 299.073 li
500.503 299.074 500.503 299.075 500.503 299.076 cv
500.423 300.158 500.529 301.976 500.755 303.751 cv
499.344 303.751 li
499.588 302.121 499.709 300.554 499.597 299.056 cv
499.546 298.405 499.077 297.914 498.425 297.914 cv
494.697 297.386 491.628 294.659 490.605 290.973 cv
487.649 280.067 li
488.105 278.759 488.643 277.935 489.223 277.699 cv
cp
485.124 279.756 mo
484.929 280.421 484.781 281.098 484.594 281.769 cv
484.442 282.324 484.078 283.67 483.606 285.51 cv
481.008 281.969 li
480.879 281.796 480.708 281.656 480.51 281.569 cv
474.468 278.861 li
474.111 278.7 473.696 278.717 473.347 278.91 cv
464.389 283.91 li
463.789 284.247 463.572 285.009 463.908 285.612 cv
464.245 286.212 465.012 286.427 465.61 286.092 cv
474.018 281.398 li
479.187 283.715 li
482.816 288.661 li
482.402 290.351 481.95 292.261 481.486 294.327 cv
473.747 301.259 li
473.484 301.495 473.332 301.832 473.332 302.189 cv
473.332 313.612 li
469.988 321.822 li
469.726 322.462 470.034 323.19 470.674 323.451 cv
470.827 323.514 470.986 323.544 471.145 323.544 cv
471.638 323.544 472.104 323.251 472.302 322.765 cv
475.74 314.327 li
475.801 314.178 475.832 314.017 475.832 313.856 cv
475.832 302.748 li
480.591 298.485 li
478.566 308.222 476.747 319.818 477.761 326.683 cv
477.949 327.946 478.803 329 479.992 329.435 cv
480.376 329.574 480.769 329.642 481.157 329.642 cv
481.96 329.642 482.739 329.349 483.371 328.793 cv
484.325 327.959 486.06 326.362 488.04 324.256 cv
488.627 326.333 489.214 328.418 489.919 330.416 cv
491.783 335.702 495.24 344.137 498.75 345.879 cv
498.75 350.001 li
498.75 350.692 499.309 351.251 500 351.251 cv
500.691 351.251 501.25 350.692 501.25 350.001 cv
501.25 345.879 li
504.759 344.137 508.217 335.702 510.08 330.416 cv
510.697 328.668 511.347 326.549 512.026 324.203 cv
513.852 326.167 515.534 327.743 516.721 328.788 cv
517.358 329.349 518.139 329.642 518.943 329.642 cv
519.331 329.642 519.726 329.574 520.11 329.432 cv
521.296 328.998 522.151 327.946 522.336 326.683 cv
523.362 319.738 521.534 308.06 519.44 298.069 cv
524.663 302.748 li
524.663 313.856 li
524.663 314.017 524.695 314.178 524.756 314.327 cv
528.191 322.765 li
528.388 323.251 528.855 323.544 529.348 323.544 cv
529.504 323.544 529.665 323.514 529.819 323.451 cv
530.459 323.192 530.766 322.462 530.505 321.822 cv
527.163 313.612 li
527.163 302.189 li
527.163 301.832 527.011 301.495 526.748 301.259 cv
518.723 294.071 li
518.676 294.028 518.607 294.046 518.556 294.012 cv
518.159 292.252 517.767 290.585 517.394 289.05 cv
521.308 283.715 li
526.457 281.407 li
534.365 286.078 li
534.948 286.429 535.722 286.234 536.076 285.636 cv
536.428 285.043 536.23 284.276 535.635 283.925 cv
527.17 278.925 li
526.821 278.719 526.389 278.697 526.025 278.861 cv
519.985 281.569 li
519.787 281.656 519.616 281.796 519.487 281.969 cv
516.61 285.89 li
516.33 284.786 516.043 283.684 515.751 282.583 cv
515.558 281.859 515.363 281.136 515.164 280.413 cv
515.022 279.901 514.784 279.432 514.577 278.946 cv
514.36 278.439 514.139 277.932 513.855 277.459 cv
513.689 277.182 513.504 276.917 513.297 276.671 cv
518.159 272.721 li
518.364 272.555 518.51 272.328 518.579 272.074 cv
521.704 260.323 li
521.88 259.655 521.484 258.971 520.818 258.793 cv
520.134 258.614 519.463 259.012 519.287 259.679 cv
516.267 271.039 li
512.557 274.051 li
512.661 273.371 512.8 272.663 512.8 272.052 cv
512.8 270.999 512.603 269.893 512.323 268.74 cv
512.642 267.996 512.849 267.178 512.849 266.351 cv
512.849 262.52 509.179 259.469 505.346 260.415 cv
505.146 260.324 504.936 260.273 504.734 260.193 cv
505.617 255.837 506.215 250.384 506.242 250.135 cv
506.316 249.449 505.82 248.832 505.134 248.759 cv
504.458 248.695 503.833 249.181 503.757 249.867 cv
503.75 249.925 503.166 255.253 502.327 259.476 cv
500.784 259.192 499.215 259.192 497.672 259.476 cv
496.834 255.253 496.249 249.925 496.242 249.867 cv
496.169 249.181 495.564 248.697 494.865 248.759 cv
494.179 248.832 493.684 249.449 493.757 250.135 cv
493.784 250.384 494.383 255.837 495.266 260.193 cv
495.063 260.273 494.853 260.324 494.653 260.415 cv
490.645 259.417 487.151 262.523 487.151 266.351 cv
487.151 267.178 487.358 267.996 487.676 268.74 cv
487.396 269.893 487.199 270.999 487.199 272.052 cv
487.199 272.526 487.326 273.094 487.388 273.605 cv
484.228 271.039 li
481.208 259.679 li
481.03 259.012 480.354 258.614 479.677 258.793 cv
479.011 258.971 478.615 259.655 478.791 260.323 cv
481.916 272.074 li
481.985 272.328 482.131 272.555 482.336 272.721 cv
482.336 272.721 486.886 276.416 486.886 276.417 cv
486.834 276.374 486.135 277.411 486.08 277.503 cv
485.807 277.963 485.582 278.452 485.392 278.952 cv
485.291 279.217 485.204 279.486 485.124 279.756 cv
cp
f
690.139 288.89 mo
690.139 286.227 690.356 285.808 690.424 285.587 cv
690.798 285.609 693.004 287.191 693.061 287.23 cv
694.948 288.527 697.297 290.14 700 290.14 cv
702.662 290.14 705.047 288.523 706.903 287.2 cv
706.906 287.198 709.204 285.59 709.419 285.509 cv
709.563 285.814 709.861 286.08 709.861 288.89 cv
709.861 290.946 709.645 292.819 709.266 294.516 cv
708.849 294.741 708.438 294.958 708.003 295.204 cv
705.576 296.571 702.824 298.121 700 298.121 cv
697.175 298.121 694.424 296.571 691.997 295.204 cv
691.561 294.958 691.151 294.741 690.733 294.515 cv
690.354 292.818 690.139 290.945 690.139 288.89 cv
cp
694.87 274.75 mo
696.13 275.331 697.605 274.801 698.23 273.561 cv
700.049 270.116 li
701.77 273.563 li
702.387 274.801 703.862 275.321 705.178 274.725 cv
708.511 273.065 li
705.189 285.347 li
703.733 286.386 701.859 287.64 700 287.64 cv
698.218 287.64 696.455 286.517 694.828 285.405 cv
691.545 273.058 li
694.87 274.75 li
cp
713.864 295.68 mo
714.445 296.017 715.417 297.589 715.417 304.313 cv
715.417 321.469 709.048 336.068 701.25 337.499 cv
701.25 300.473 li
704.236 300.115 706.981 298.648 709.231 297.382 cv
711.12 296.315 713.081 295.211 713.864 295.68 cv
cp
684.582 304.313 mo
684.582 297.589 685.566 296.037 686.135 295.68 cv
687.218 295 689.184 296.488 690.769 297.382 cv
693.018 298.648 695.763 300.115 698.75 300.473 cv
698.75 337.499 li
690.952 336.068 684.582 321.469 684.582 304.313 cv
cp
684.873 293.522 mo
683.08 294.568 682.254 297.255 682.112 302.569 cv
678.662 299.117 li
678.318 298.776 677.805 298.661 677.356 298.824 cv
676.899 298.988 676.579 299.401 676.533 299.882 cv
675.009 315.839 li
669.245 324.298 li
668.857 324.867 669.004 325.646 669.575 326.034 cv
669.79 326.18 670.034 326.251 670.278 326.251 cv
670.676 326.251 671.069 326.061 671.311 325.704 cv
677.256 316.981 li
677.375 316.808 677.446 316.608 677.468 316.398 cv
678.769 302.762 li
682.126 306.12 li
682.306 313.634 683.586 320.46 685.669 326.002 cv
683.618 325.521 li
682.973 325.35 682.334 325.741 682.138 326.363 cv
676.677 343.778 li
671.338 349.117 li
670.849 349.606 670.849 350.397 671.338 350.885 cv
671.582 351.129 671.902 351.251 672.221 351.251 cv
672.541 351.251 672.861 351.129 673.105 350.885 cv
678.662 345.328 li
678.803 345.187 678.911 345.011 678.972 344.818 cv
684.177 328.219 li
686.859 328.847 li
690.108 335.817 694.75 340.14 700 340.14 cv
705.249 340.14 709.891 335.817 713.14 328.847 cv
715.822 328.219 li
721.028 344.818 li
721.089 345.011 721.196 345.187 721.338 345.328 cv
726.894 350.885 li
727.138 351.129 727.458 351.251 727.778 351.251 cv
728.098 351.251 728.418 351.129 728.662 350.885 cv
729.15 350.397 729.15 349.606 728.662 349.117 cv
723.322 343.778 li
717.861 326.363 li
717.663 325.741 717.021 325.35 716.382 325.521 cv
714.33 326.002 li
716.413 320.46 717.693 313.634 717.873 306.12 cv
721.23 302.762 li
722.531 316.398 li
722.553 316.608 722.624 316.808 722.744 316.981 cv
728.689 325.704 li
728.93 326.061 729.323 326.251 729.721 326.251 cv
729.966 326.251 730.21 326.18 730.424 326.034 cv
730.996 325.646 731.142 324.867 730.754 324.298 cv
724.99 315.839 li
723.466 299.882 li
723.42 299.401 723.1 298.988 722.644 298.824 cv
722.192 298.661 721.679 298.776 721.338 299.117 cv
717.888 302.569 li
717.745 297.255 716.92 294.568 715.127 293.522 cv
714.167 292.961 713.127 292.991 712.014 293.312 cv
712.162 292.302 712.251 291.243 712.293 290.14 cv
716.667 290.14 li
717.053 290.14 717.417 289.962 717.654 289.659 cv
728.764 275.424 li
729.189 274.879 729.091 274.093 728.547 273.668 cv
728.003 273.241 727.216 273.341 726.792 273.885 cv
716.057 287.64 li
712.304 287.64 li
712.177 285.215 711.683 283.884 710.632 283.336 cv
709.899 282.948 709.141 283.028 708.309 283.386 cv
710.863 273.36 715.663 261.24 708.845 251.797 cv
708.091 250.752 707.192 249.7 706.118 248.966 cv
705.556 248.583 704.775 248.729 704.384 249.303 cv
703.996 249.874 704.148 250.651 704.721 251.036 cv
704.77 251.071 707.616 253.096 709.046 257.947 cv
707.942 256.941 706.759 256.273 705.844 255.944 cv
705.197 255.719 704.487 256.044 704.248 256.693 cv
704.011 257.338 704.345 258.055 704.99 258.295 cv
705.172 258.363 708.675 259.766 709.555 263.543 cv
708.292 262.458 706.787 261.804 705.71 261.547 cv
705.027 261.366 704.365 261.801 704.204 262.472 cv
704.043 263.143 704.458 263.817 705.129 263.978 cv
705.172 263.988 709.522 265.086 709.397 268.622 cv
709.283 269.291 709.155 269.971 708.99 270.684 cv
708.429 270.562 707.85 270.568 707.321 270.831 cv
704.006 272.443 li
702.27 268.971 li
701.377 267.277 698.637 267.25 697.715 268.998 cv
695.954 272.499 li
692.671 270.826 li
692.098 270.543 691.476 270.56 690.882 270.719 cv
690.714 270 690.582 269.314 690.466 268.641 cv
690.324 265.12 694.555 264.022 694.738 263.978 cv
695.407 263.812 695.818 263.136 695.656 262.467 cv
695.493 261.798 694.834 261.373 694.153 261.547 cv
693.076 261.804 691.572 262.457 690.31 263.542 cv
691.189 259.764 694.69 258.363 694.873 258.295 cv
695.517 258.055 695.852 257.338 695.615 256.693 cv
695.378 256.044 694.658 255.717 694.018 255.944 cv
693.092 256.278 691.889 256.956 690.772 257.985 cv
692.155 253.216 694.931 251.184 695.146 251.034 cv
695.715 250.648 695.864 249.872 695.478 249.303 cv
695.09 248.727 694.306 248.58 693.745 248.966 cv
688.519 252.555 687.212 260.166 687.652 265.988 cv
688.094 271.829 690.186 277.73 691.687 283.379 cv
690.88 283.035 690.113 282.946 689.367 283.336 cv
688.316 283.884 687.822 285.215 687.695 287.64 cv
683.943 287.64 li
673.208 273.885 li
672.783 273.341 671.997 273.238 671.452 273.668 cv
670.908 274.093 670.81 274.879 671.235 275.424 cv
682.346 289.659 li
682.583 289.962 682.946 290.14 683.332 290.14 cv
687.706 290.14 li
687.748 291.242 687.837 292.301 687.986 293.311 cv
686.873 292.991 685.832 292.962 684.873 293.522 cv
cp
f
892.846 268.591 mo
891.853 273.048 887.838 276.451 883.188 276.451 cv
882.548 276.451 li
884.747 272.29 888.097 269.759 892.846 268.591 cv
cp
899.914 256.652 mo
904.012 256.652 907.689 260.741 909.163 266.62 cv
908.013 266.25 906.778 265.967 905.469 265.76 cv
905.456 265.759 905.452 265.749 905.439 265.748 cv
905.436 265.748 905.434 265.752 905.43 265.752 cv
903.716 265.483 901.913 265.301 899.914 265.301 cv
897.916 265.301 896.113 265.483 894.399 265.752 cv
894.398 265.752 894.398 265.751 894.397 265.751 cv
894.393 265.75 894.39 265.755 894.386 265.755 cv
893.066 265.962 891.822 266.248 890.664 266.621 cv
892.139 260.741 895.816 256.652 899.914 256.652 cv
cp
917.28 276.451 mo
916.638 276.451 li
913.974 276.451 911.501 275.419 909.651 273.517 cv
908.265 272.171 907.348 270.458 906.956 268.586 cv
911.718 269.752 915.078 272.283 917.28 276.451 cv
cp
906.456 346.042 mo
902.989 342.837 901.172 339.176 901.172 335.111 cv
901.165 287.125 li
907.625 287.023 914.077 286.165 920.371 284.488 cv
924.353 291.381 926.538 300.101 926.538 309.164 cv
926.538 326.424 916.035 341.046 906.456 346.042 cv
cp
895.78 347.11 mo
897.565 345.298 899.037 343.365 899.922 341.266 cv
900.806 343.364 902.276 345.295 904.06 347.107 cv
902.62 347.619 901.223 347.889 899.914 347.889 cv
898.609 347.889 897.216 347.619 895.78 347.11 cv
cp
881.463 278.951 mo
883.188 278.951 li
889.469 278.951 894.627 274.255 895.435 268.101 cv
896.83 267.916 898.305 267.801 899.914 267.801 cv
901.518 267.801 902.987 267.914 904.378 268.098 cv
904.722 270.84 905.916 273.376 907.883 275.284 cv
910.183 277.65 913.293 278.951 916.638 278.951 cv
918.366 278.951 li
918.737 279.938 919.052 281.016 919.333 282.146 cv
912.981 283.801 906.472 284.658 899.935 284.656 cv
899.927 284.656 899.922 284.647 899.914 284.647 cv
899.905 284.647 899.9 284.657 899.89 284.657 cv
893.401 284.651 886.894 283.791 880.497 282.138 cv
880.778 281.011 881.093 279.936 881.463 278.951 cv
cp
873.288 309.164 mo
873.288 300.104 875.473 291.383 879.458 284.488 cv
885.752 286.165 892.204 287.023 898.665 287.125 cv
898.672 335.111 li
898.672 339.178 896.852 342.841 893.381 346.048 cv
883.798 341.056 873.288 326.43 873.288 309.164 cv
cp
856.245 309.962 mo
856.372 309.962 856.499 309.943 856.626 309.904 cv
863.593 307.677 li
863.855 307.594 864.079 307.426 864.238 307.201 cv
868.393 301.251 li
871.365 301.251 li
871.007 303.844 870.788 306.483 870.788 309.164 cv
870.788 318.636 873.676 327.133 877.847 333.942 cv
873.899 333.942 li
873.283 333.942 872.758 334.391 872.663 334.999 cv
870.908 346.176 li
864.909 348.861 li
864.279 349.142 863.996 349.882 864.279 350.511 cv
864.487 350.975 864.944 351.251 865.42 351.251 cv
865.591 351.251 865.764 351.217 865.93 351.141 cv
872.549 348.18 li
872.934 348.009 873.208 347.653 873.274 347.233 cv
874.968 336.442 li
879.477 336.442 li
885.551 345.077 893.653 350.389 899.914 350.389 cv
906.175 350.389 914.276 345.077 920.349 336.442 cv
925.031 336.442 li
926.726 347.233 li
926.792 347.653 927.065 348.009 927.451 348.18 cv
934.07 351.141 li
934.236 351.217 934.409 351.251 934.58 351.251 cv
935.056 351.251 935.512 350.975 935.72 350.511 cv
936.003 349.882 935.72 349.142 935.09 348.861 cv
929.091 346.176 li
927.336 334.999 li
927.241 334.391 926.716 333.942 926.101 333.942 cv
921.98 333.942 li
926.15 327.133 929.038 318.636 929.038 309.164 cv
929.038 306.483 928.82 303.844 928.462 301.251 cv
931.606 301.251 li
935.761 307.201 li
935.92 307.426 936.145 307.594 936.406 307.677 cv
943.374 309.904 li
943.501 309.943 943.628 309.962 943.755 309.962 cv
944.284 309.962 944.775 309.623 944.946 309.093 cv
945.156 308.434 944.792 307.731 944.135 307.521 cv
937.57 305.424 li
933.283 299.286 li
933.049 298.951 932.666 298.751 932.258 298.751 cv
927.98 298.751 li
927.192 294.492 925.958 290.457 924.255 286.771 cv
932.849 280.516 li
940.478 285.924 li
941.042 286.317 941.821 286.195 942.221 285.626 cv
942.619 285.062 942.487 284.283 941.924 283.883 cv
933.562 277.958 li
933.122 277.645 932.536 277.65 932.104 277.967 cv
923.109 284.514 li
922.735 283.813 922.434 283.046 922.026 282.379 cv
922.016 282.362 921.987 282.361 921.975 282.344 cv
920.34 275.084 917.126 270.28 911.929 267.684 cv
911.073 262.83 908.961 258.875 906.124 256.528 cv
909.719 254.89 911.851 250.775 911.96 250.558 cv
912.265 249.94 912.014 249.191 911.396 248.883 cv
910.786 248.583 910.029 248.827 909.721 249.445 cv
909.695 249.496 907.033 254.728 903.227 254.728 cv
903.167 254.728 903.13 254.784 903.072 254.792 cv
902.057 254.413 901.01 254.152 899.914 254.152 cv
898.819 254.152 897.772 254.413 896.758 254.792 cv
896.699 254.784 896.662 254.728 896.601 254.728 cv
892.795 254.728 890.132 249.496 890.105 249.445 cv
889.795 248.827 889.043 248.578 888.43 248.883 cv
887.812 249.191 887.561 249.94 887.866 250.558 cv
887.975 250.775 890.109 254.891 893.705 256.528 cv
890.868 258.876 888.754 262.83 887.896 267.686 cv
882.704 270.28 879.492 275.08 877.856 282.333 cv
877.842 282.354 877.816 282.358 877.802 282.379 cv
877.412 283.018 877.125 283.753 876.765 284.423 cv
867.895 277.967 li
867.468 277.655 866.88 277.648 866.438 277.958 cv
858.076 283.883 li
857.512 284.283 857.38 285.062 857.778 285.626 cv
858.181 286.195 858.96 286.315 859.521 285.924 cv
867.151 280.516 li
875.62 286.68 li
873.894 290.392 872.641 294.457 871.846 298.751 cv
867.741 298.751 li
867.334 298.751 866.95 298.951 866.716 299.286 cv
862.429 305.424 li
855.864 307.521 li
855.207 307.731 854.843 308.434 855.053 309.093 cv
855.224 309.623 855.715 309.962 856.245 309.962 cv
cp
f
887.321 291.412 mo
889.707 291.412 891.648 293.351 891.648 295.736 cv
891.648 298.121 889.707 300.062 887.321 300.062 cv
884.936 300.062 882.998 298.121 882.998 295.736 cv
882.998 293.351 884.936 291.412 887.321 291.412 cv
cp
887.321 302.562 mo
891.086 302.562 894.148 299.501 894.148 295.736 cv
894.148 291.974 891.086 288.912 887.321 288.912 cv
883.559 288.912 880.498 291.974 880.498 295.736 cv
880.498 299.501 883.559 302.562 887.321 302.562 cv
cp
f
887.321 327.782 mo
884.301 327.782 881.843 325.323 881.843 322.301 cv
881.843 319.279 884.301 316.82 887.321 316.82 cv
890.344 316.82 892.802 319.279 892.802 322.301 cv
892.802 325.323 890.344 327.782 887.321 327.782 cv
cp
895.302 322.301 mo
895.302 317.899 891.723 314.32 887.321 314.32 cv
882.922 314.32 879.343 317.899 879.343 322.301 cv
879.343 326.703 882.922 330.282 887.321 330.282 cv
891.723 330.282 895.302 326.703 895.302 322.301 cv
cp
f
912.505 291.412 mo
914.89 291.412 916.831 293.351 916.831 295.736 cv
916.831 298.121 914.89 300.062 912.505 300.062 cv
910.119 300.062 908.181 298.121 908.181 295.736 cv
908.181 293.351 910.119 291.412 912.505 291.412 cv
cp
912.505 302.562 mo
916.269 302.562 919.331 299.501 919.331 295.736 cv
919.331 291.974 916.269 288.912 912.505 288.912 cv
908.742 288.912 905.681 291.974 905.681 295.736 cv
905.681 299.501 908.742 302.562 912.505 302.562 cv
cp
f
912.505 327.782 mo
909.485 327.782 907.026 325.323 907.026 322.301 cv
907.026 319.279 909.485 316.82 912.505 316.82 cv
915.527 316.82 917.986 319.279 917.986 322.301 cv
917.986 325.323 915.527 327.782 912.505 327.782 cv
cp
912.505 314.32 mo
908.105 314.32 904.526 317.899 904.526 322.301 cv
904.526 326.703 908.105 330.282 912.505 330.282 cv
916.906 330.282 920.486 326.703 920.486 322.301 cv
920.486 317.899 916.906 314.32 912.505 314.32 cv
cp
f
681.25 510.001 mo
681.25 502.418 687.417 496.251 695 496.251 cv
698.75 496.251 li
698.75 525.001 li
698.75 530.611 695.315 534.599 692.195 537.079 cv
685.758 534.166 681.25 527.715 681.25 520.201 cv
681.25 510.001 li
cp
672.28 480.735 mo
675.294 486.139 681.039 488.873 685.265 490.194 cv
686.193 496.383 li
686.015 496.498 685.843 496.615 685.67 496.737 cv
677.646 492.744 673.155 487.4 672.28 480.735 cv
cp
692.563 485.179 mo
694.262 485.995 696.286 485.297 697.065 483.666 cv
699.233 479.381 li
699.436 478.949 699.836 478.903 700 478.903 cv
700.163 478.903 700.564 478.949 700.783 479.415 cv
702.922 483.639 li
703.711 485.301 705.735 485.988 707.458 485.17 cv
713.408 482.196 li
712.17 490.45 li
709.927 489.351 707.488 488.751 705 488.751 cv
695 488.751 li
692.511 488.751 690.072 489.351 687.829 490.45 cv
686.591 482.196 li
692.563 485.179 li
cp
727.731 480.715 mo
726.877 487.37 722.378 492.732 714.329 496.737 cv
714.156 496.615 713.984 496.498 713.807 496.383 cv
714.734 490.194 li
718.966 488.872 724.72 486.133 727.731 480.715 cv
cp
718.75 510.001 mo
718.75 520.201 li
718.75 527.706 714.252 534.148 707.828 537.066 cv
705.123 534.951 701.25 530.903 701.25 525.001 cv
701.25 496.251 li
705 496.251 li
712.583 496.251 718.75 502.418 718.75 510.001 cv
cp
688.528 495.113 mo
688.223 493.074 li
690.313 491.899 692.631 491.251 695 491.251 cv
705 491.251 li
707.368 491.251 709.686 491.899 711.776 493.074 cv
711.471 495.113 li
709.485 494.246 707.301 493.751 705 493.751 cv
695 493.751 li
692.698 493.751 690.515 494.246 688.528 495.113 cv
cp
699.799 538.751 mo
698.112 538.751 696.508 538.452 694.954 538.028 cv
696.899 536.279 698.811 534.004 700.007 531.163 cv
701.264 534.12 703.262 536.395 705.075 538.019 cv
703.512 538.448 701.898 538.751 700.2 538.751 cv
699.799 538.751 li
cp
668.882 515.56 mo
673.882 525.56 li
674.101 525.997 674.543 526.251 675 526.251 cv
675.188 526.251 675.378 526.21 675.559 526.119 cv
676.176 525.809 676.425 525.06 676.118 524.442 cv
671.677 515.56 li
678.75 512.024 li
678.75 520.201 li
678.75 524.826 680.294 529.069 682.832 532.547 cv
678.813 544.606 li
678.618 545.196 678.884 545.841 679.441 546.119 cv
689.441 551.119 li
689.621 551.21 689.812 551.251 690 551.251 cv
690.456 551.251 690.898 550.997 691.118 550.56 cv
691.425 549.943 691.176 549.193 690.559 548.883 cv
681.528 544.369 li
684.71 534.822 li
688.539 538.773 693.877 541.251 699.799 541.251 cv
700.2 541.251 li
706.123 541.251 711.46 538.773 715.289 534.822 cv
718.471 544.369 li
709.441 548.883 li
708.823 549.193 708.574 549.943 708.882 550.56 cv
709.101 550.997 709.543 551.251 710 551.251 cv
710.188 551.251 710.378 551.21 710.559 551.119 cv
720.559 546.119 li
721.115 545.841 721.382 545.196 721.186 544.606 cv
717.167 532.547 li
719.705 529.069 721.25 524.826 721.25 520.201 cv
721.25 512.024 li
728.322 515.56 li
723.882 524.442 li
723.574 525.06 723.823 525.809 724.441 526.119 cv
724.621 526.21 724.812 526.251 725 526.251 cv
725.456 526.251 725.898 525.997 726.118 525.56 cv
731.118 515.56 li
731.425 514.943 731.176 514.193 730.559 513.883 cv
721.167 509.187 li
720.956 505.013 719.219 501.237 716.432 498.473 cv
730.515 491.012 731.5 480.359 729.751 472.85 cv
729.751 472.75 li
729.751 472.74 729.74 472.734 729.739 472.724 cv
729.734 472.63 729.731 472.527 729.716 472.465 cv
726.819 460.16 716.328 449.562 715.883 449.117 cv
715.395 448.629 714.604 448.629 714.116 449.117 cv
713.628 449.606 713.628 450.397 714.116 450.885 cv
714.218 450.99 724.55 461.434 727.251 472.75 cv
727.251 472.769 727.256 472.803 727.257 472.829 cv
727.257 472.835 727.251 472.839 727.251 472.845 cv
727.211 481.2 721.03 485.351 715.149 487.428 cv
716.235 480.187 li
716.306 479.725 716.111 479.264 715.735 478.99 cv
715.359 478.715 714.858 478.678 714.441 478.883 cv
706.362 482.924 li
705.925 483.138 705.376 482.972 705.166 482.538 cv
703.032 478.322 li
702.668 477.548 702.003 477.071 701.25 476.76 cv
701.25 465.001 li
701.25 464.31 700.691 463.751 700 463.751 cv
699.309 463.751 698.75 464.31 698.75 465.001 cv
698.75 476.758 li
697.998 477.066 697.337 477.537 696.985 478.287 cv
694.821 482.565 li
694.624 482.972 694.096 483.136 693.659 482.933 cv
685.559 478.883 li
685.146 478.678 684.643 478.715 684.265 478.99 cv
683.889 479.264 683.694 479.725 683.764 480.187 cv
684.85 487.428 li
678.984 485.356 672.824 481.217 672.755 472.907 cv
675.536 461.359 685.781 450.99 685.883 450.885 cv
686.372 450.397 686.372 449.606 685.883 449.117 cv
685.395 448.629 684.604 448.629 684.116 449.117 cv
683.672 449.562 673.181 460.16 670.28 472.572 cv
668.501 480.349 669.485 491.011 683.567 498.473 cv
680.78 501.237 679.043 505.013 678.832 509.187 cv
669.441 513.883 li
668.823 514.193 668.574 514.943 668.882 515.56 cv
cp
f
696.25 501.251 mo
696.941 501.251 697.5 500.692 697.5 500.001 cv
697.5 499.31 696.941 498.751 696.25 498.751 cv
689.358 498.751 683.75 504.359 683.75 511.251 cv
683.75 511.942 684.309 512.501 685 512.501 cv
685.691 512.501 686.25 511.942 686.25 511.251 cv
686.25 505.736 690.735 501.251 696.25 501.251 cv
cp
f
703.75 498.751 mo
703.059 498.751 702.5 499.31 702.5 500.001 cv
702.5 500.692 703.059 501.251 703.75 501.251 cv
709.265 501.251 713.75 505.736 713.75 511.251 cv
713.75 511.942 714.309 512.501 715 512.501 cv
715.691 512.501 716.25 511.942 716.25 511.251 cv
716.25 504.359 710.642 498.751 703.75 498.751 cv
cp
f
509.717 544.718 mo
507.418 547.017 504.439 548.338 501.25 548.628 cv
501.25 496.251 li
504.704 496.251 li
513.75 500.774 li
513.75 535.001 li
513.75 538.666 512.317 542.118 509.717 544.718 cv
cp
486.25 535.001 mo
486.25 500.774 li
495.295 496.251 li
498.75 496.251 li
498.75 548.625 li
491.76 547.982 486.25 542.156 486.25 535.001 cv
cp
496.262 475.104 mo
496.799 472.95 498.613 472.186 500 472.186 cv
501.386 472.186 503.213 472.948 503.75 475.101 cv
503.75 475.101 li
503.75 479.109 li
502.58 478.892 501.336 478.751 500 478.751 cv
498.665 478.751 497.421 478.892 496.252 479.109 cv
496.262 475.104 li
cp
492.191 483.444 mo
493.594 482.242 496.466 481.251 500 481.251 cv
503.551 481.251 506.437 482.252 507.832 483.463 cv
508.176 483.922 508.456 484.424 508.667 484.972 cv
508.097 484.951 506.985 484.75 506.108 484.562 cv
504.419 484.2 502.314 483.751 500 483.751 cv
497.685 483.751 495.581 484.2 493.891 484.562 cv
492.914 484.771 491.622 485.034 491.327 485 cv
491.542 484.436 491.829 483.916 492.191 483.444 cv
cp
495.378 493.751 mo
493.718 492.645 li
491.909 491.438 490.945 489.522 490.925 487.417 cv
491.592 487.439 492.997 487.306 494.414 487.006 cv
495.989 486.669 497.949 486.251 500 486.251 cv
502.051 486.251 504.011 486.669 505.586 487.006 cv
506.782 487.262 508.775 487.411 509.075 487.424 cv
509.052 489.527 508.089 491.44 506.281 492.645 cv
504.621 493.751 li
495.378 493.751 li
cp
531.118 469.442 mo
530.808 468.824 530.063 468.573 529.441 468.883 cv
519.441 473.883 li
518.884 474.161 518.618 474.806 518.813 475.397 cv
523.386 489.115 li
509.905 492.486 li
511.353 490.482 511.973 487.873 511.469 485.44 cv
510.891 482.653 508.837 480.283 506.245 479.142 cv
506.213 474.706 li
506.213 474.706 506.164 474.506 506.164 474.498 cv
505.59 472.205 503.881 470.562 501.717 469.968 cv
511.055 459.751 506.17 449.546 506.118 449.442 cv
505.808 448.824 505.061 448.575 504.441 448.883 cv
503.823 449.193 503.574 449.943 503.882 450.56 cv
503.926 450.65 508.028 459.231 499.999 468.149 cv
492.011 459.294 495.941 450.92 496.12 450.555 cv
496.423 449.938 496.172 449.188 495.554 448.883 cv
494.946 448.588 494.194 448.827 493.882 449.442 cv
493.829 449.546 488.944 459.751 498.283 469.968 cv
496.119 470.562 494.409 472.206 493.835 474.506 cv
493.811 474.601 493.75 474.901 493.75 475.001 cv
493.75 479.132 li
490.194 480.656 487.977 484.421 488.426 488.264 cv
488.605 489.788 489.198 491.245 490.095 492.486 cv
476.614 489.115 li
481.186 475.397 li
481.382 474.806 481.115 474.161 480.559 473.883 cv
470.559 468.883 li
469.944 468.578 469.194 468.829 468.882 469.442 cv
468.574 470.06 468.823 470.809 469.441 471.119 cv
478.471 475.634 li
473.813 489.606 li
473.703 489.935 473.738 490.297 473.904 490.602 cv
474.072 490.907 474.358 491.129 474.697 491.215 cv
491.417 495.395 li
484.441 498.883 li
474.441 503.883 li
474.199 504.005 474.004 504.2 473.882 504.442 cv
468.882 514.442 li
468.574 515.06 468.823 515.809 469.441 516.119 cv
469.621 516.21 469.812 516.251 470 516.251 cv
470.456 516.251 470.898 515.997 471.118 515.56 cv
475.932 505.934 li
483.75 502.024 li
483.75 514.228 li
474.441 518.883 li
473.916 519.144 473.645 519.735 473.786 520.304 cv
478.674 539.855 li
473.882 549.442 li
473.574 550.06 473.823 550.809 474.441 551.119 cv
474.621 551.21 474.812 551.251 475 551.251 cv
475.456 551.251 475.898 550.997 476.118 550.56 cv
481.118 540.56 li
481.252 540.294 481.284 539.987 481.213 539.698 cv
476.455 520.67 li
483.75 517.024 li
483.75 535.001 li
483.75 543.961 491.04 551.251 500 551.251 cv
504.333 551.251 508.41 549.559 511.484 546.486 cv
514.558 543.412 516.25 539.335 516.25 535.001 cv
516.25 517.024 li
523.545 520.67 li
518.786 539.698 li
518.716 539.987 518.747 540.294 518.882 540.56 cv
523.882 550.56 li
524.101 550.997 524.543 551.251 525 551.251 cv
525.188 551.251 525.378 551.21 525.559 551.119 cv
526.177 550.809 526.426 550.06 526.118 549.442 cv
521.325 539.855 li
526.213 520.304 li
526.355 519.735 526.084 519.144 525.559 518.883 cv
516.25 514.228 li
516.25 502.024 li
524.067 505.934 li
528.882 515.56 li
529.101 515.997 529.543 516.251 530 516.251 cv
530.188 516.251 530.378 516.21 530.559 516.119 cv
531.177 515.809 531.426 515.06 531.118 514.442 cv
526.118 504.442 li
525.996 504.2 525.801 504.005 525.559 503.883 cv
515.559 498.883 li
508.582 495.395 li
525.302 491.215 li
525.642 491.129 525.927 490.907 526.096 490.602 cv
526.262 490.297 526.296 489.935 526.186 489.606 cv
521.528 475.634 li
530.559 471.119 li
531.177 470.809 531.426 470.06 531.118 469.442 cv
cp
f
918.75 485.001 mo
918.75 495.001 li
918.75 510.001 li
918.75 515.001 li
918.75 522.582 912.583 528.751 905 528.751 cv
901.25 528.751 li
901.25 481.184 li
906.667 481.027 911.816 479.863 916.598 477.713 cv
917.619 479.313 918.329 481.109 918.579 483.065 cv
918.694 483.602 918.75 484.235 918.75 485.001 cv
cp
927.758 510.363 mo
930.464 514.874 930.403 520.389 927.834 524.757 cv
928.347 519.879 926.674 514.908 923.056 511.29 cv
921.25 509.484 li
921.25 499.515 li
927.758 510.363 li
cp
881.25 515.001 mo
881.25 510.001 li
881.25 495.001 li
881.25 485.001 li
881.25 484.235 881.306 483.602 881.44 482.958 cv
881.678 481.07 882.382 479.3 883.399 477.711 cv
888.181 479.864 893.332 481.027 898.75 481.184 cv
898.75 528.751 li
895 528.751 li
887.417 528.751 881.25 522.582 881.25 515.001 cv
cp
876.943 511.29 mo
873.325 514.908 871.655 519.874 872.18 524.784 cv
869.597 520.409 869.529 514.882 872.241 510.363 cv
878.75 499.515 li
878.75 509.484 li
876.943 511.29 li
cp
890.88 470.378 mo
891.446 469.977 892.023 469.594 892.61 469.227 cv
894.758 467.882 897.385 466.251 900 466.251 cv
901.717 466.251 905.414 467.703 909.118 470.386 cv
910.458 471.356 911.673 472.461 912.914 473.551 cv
913.665 474.211 914.293 474.962 914.985 475.678 cv
910.321 477.682 905.302 478.751 900 478.751 cv
894.697 478.751 889.678 477.682 885.014 475.678 cv
885.125 475.561 885.962 474.703 886.071 474.584 cv
887.505 473.004 889.137 471.61 890.88 470.378 cv
cp
891.25 460.849 mo
894.153 461.476 897.032 461.852 900 461.852 cv
902.967 461.852 905.846 461.476 908.75 460.849 cv
908.75 467.115 li
905.34 464.97 902.022 463.751 900 463.751 cv
897.977 463.751 894.66 464.97 891.25 467.115 cv
891.25 460.849 li
cp
905 456.251 mo
906.483 456.251 907.741 457.134 908.349 458.387 cv
902.779 459.61 897.22 459.61 891.65 458.387 cv
892.258 457.134 893.516 456.251 895 456.251 cv
905 456.251 li
cp
925.393 471.188 mo
925.905 471.017 926.25 470.541 926.25 470.001 cv
926.25 460.519 li
935.883 450.885 li
936.372 450.397 936.372 449.606 935.883 449.117 cv
935.395 448.629 934.604 448.629 934.116 449.117 cv
924.116 459.117 li
923.882 459.352 923.75 459.669 923.75 460.001 cv
923.75 469.098 li
914.799 472.068 li
914.767 472.025 914.781 471.967 914.743 471.927 cv
913.643 470.803 912.456 469.791 911.25 468.87 cv
911.25 460.001 li
911.25 457.778 909.834 455.914 908.554 455.001 cv
910.144 453.867 911.25 452.099 911.25 450.001 cv
911.25 449.31 910.691 448.751 910 448.751 cv
909.309 448.751 908.75 449.31 908.75 450.001 cv
908.75 452.069 907.068 453.751 905 453.751 cv
895 453.751 li
892.932 453.751 891.25 452.069 891.25 450.001 cv
891.25 449.31 890.691 448.751 890 448.751 cv
889.309 448.751 888.75 449.31 888.75 450.001 cv
888.75 452.099 889.855 453.867 891.445 455.001 cv
890.166 455.914 888.75 457.778 888.75 460.001 cv
888.75 468.87 li
887.543 469.791 886.357 470.803 885.256 471.927 cv
885.218 471.967 885.232 472.025 885.2 472.068 cv
876.25 469.098 li
876.25 460.001 li
876.25 459.669 876.118 459.352 875.883 459.117 cv
865.883 449.117 li
865.395 448.629 864.604 448.629 864.116 449.117 cv
863.628 449.606 863.628 450.397 864.116 450.885 cv
873.75 460.519 li
873.75 470.001 li
873.75 470.541 874.094 471.017 874.607 471.188 cv
883.148 474.021 li
882.675 474.515 882.22 475.018 881.821 475.563 cv
881.81 475.583 881.784 475.584 881.775 475.604 cv
881.769 475.615 881.778 475.626 881.773 475.637 cv
880.281 477.696 879.289 480.061 878.979 482.538 cv
878.876 483.014 878.859 483.614 878.825 484.191 cv
869.441 488.883 li
869.199 489.005 869.004 489.2 868.882 489.442 cv
863.882 499.442 li
863.574 500.06 863.823 500.809 864.441 501.119 cv
864.621 501.21 864.812 501.251 865 501.251 cv
865.456 501.251 865.898 500.997 866.118 500.56 cv
870.932 490.934 li
878.75 487.024 li
878.75 494.656 li
870.097 509.078 li
866.169 515.624 867.197 523.966 872.595 529.364 cv
873.479 530.248 li
868.882 539.442 li
868.642 539.923 868.735 540.504 869.116 540.885 cv
879.116 550.885 li
879.36 551.129 879.68 551.251 880 551.251 cv
880.32 551.251 880.639 551.129 880.883 550.885 cv
881.372 550.397 881.372 549.606 880.883 549.117 cv
871.521 539.755 li
876.118 530.56 li
876.313 530.167 876.286 529.708 876.069 529.342 cv
873.349 523.903 874.411 517.357 878.711 513.058 cv
878.75 513.019 li
878.75 515.001 li
878.75 523.961 886.04 531.251 895 531.251 cv
905 531.251 li
913.96 531.251 921.25 523.961 921.25 515.001 cv
921.25 513.019 li
921.289 513.058 li
925.583 517.352 926.783 523.953 923.889 529.43 cv
923.662 529.859 923.725 530.248 923.882 530.56 cv
928.479 539.755 li
919.116 549.117 li
918.628 549.606 918.628 550.397 919.116 550.885 cv
919.36 551.129 919.68 551.251 920 551.251 cv
920.32 551.251 920.639 551.129 920.883 550.885 cv
930.883 540.885 li
931.264 540.504 931.357 539.923 931.118 539.442 cv
926.521 530.248 li
927.404 529.364 li
932.802 523.966 933.83 515.624 929.902 509.078 cv
921.25 494.656 li
921.25 487.024 li
929.067 490.934 li
933.882 500.56 li
934.101 500.997 934.543 501.251 935 501.251 cv
935.188 501.251 935.378 501.21 935.559 501.119 cv
936.176 500.809 936.425 500.06 936.118 499.442 cv
931.118 489.442 li
930.996 489.2 930.8 489.005 930.559 488.883 cv
930.559 488.883 921.217 484.212 921.217 484.211 cv
921.02 480.407 919.485 476.775 916.852 474.02 cv
925.393 471.188 li
cp
f
915 513.751 mo
914.309 513.751 913.75 514.31 913.75 515.001 cv
913.75 523.605 905.354 523.749 904.997 523.751 cv
904.306 523.756 903.75 524.315 903.752 525.004 cv
903.752 525.695 904.311 526.251 905 526.251 cv
908.891 526.251 916.25 523.9 916.25 515.001 cv
916.25 514.31 915.691 513.751 915 513.751 cv
cp
f
895.002 523.751 mo
894.646 523.749 886.25 523.605 886.25 515.001 cv
886.25 514.31 885.691 513.751 885 513.751 cv
884.309 513.751 883.75 514.31 883.75 515.001 cv
883.75 523.9 891.108 526.251 895 526.251 cv
895.688 526.251 896.247 525.695 896.247 525.004 cv
896.25 524.315 895.693 523.756 895.002 523.751 cv
cp
f
93.364 458.405 mo
93.5999 458.903 93.7498 459.43 93.7498 460.001 cv
93.7498 462.069 92.0676 463.751 89.9998 463.751 cv
89.5368 463.751 89.0916 463.649 88.6716 463.486 cv
88.9432 463.063 89.1486 462.62 89.5335 462.235 cv
93.364 458.405 li
cp
104.834 456.681 mo
104.191 457.693 103.75 458.791 103.75 460.001 cv
103.75 463.448 106.552 466.251 110 466.251 cv
110.789 466.251 111.549 466.071 112.268 465.785 cv
112.519 467.01 112.562 468.278 112.163 469.508 cv
112.021 469.935 li
111.828 470.484 111.802 471.056 111.691 471.622 cv
104.33 468.031 95.6672 468.032 88.3063 471.623 cv
88.1965 471.066 88.1715 470.484 87.9856 469.957 cv
87.8391 469.515 li
87.4384 468.282 87.4811 467.014 87.7335 465.786 cv
88.4519 466.071 89.2115 466.251 89.9998 466.251 cv
93.447 466.251 96.2498 463.448 96.2498 460.001 cv
96.2498 458.791 95.8085 457.693 95.1658 456.681 cv
97.9014 454.155 102.098 454.155 104.834 456.681 cv
cp
111.327 463.487 mo
110.908 463.65 110.462 463.751 110 463.751 cv
107.932 463.751 106.25 462.069 106.25 460.001 cv
106.25 459.43 106.4 458.903 106.636 458.405 cv
110.466 462.235 li
110.849 462.618 111.055 463.064 111.327 463.487 cv
cp
144.116 544.117 mo
140.058 548.168 128.396 544.291 118.628 535.663 cv
118.627 535.663 li
114.44 531.948 111.296 528.026 109.533 524.324 cv
109.533 524.323 109.534 524.323 109.533 524.322 cv
106.98 518.856 107.434 514.335 110.884 510.885 cv
111.919 509.85 112.387 508.536 112.243 507.081 cv
111.735 501.935 103.544 495.933 101.25 494.344 cv
101.25 491.157 li
106.953 490.781 111.5 489.891 115.767 487.538 cv
120.967 492.773 147.03 519.831 147.063 536.388 cv
147.07 539.601 146.106 542.128 144.116 544.117 cv
cp
99.9998 528.751 mo
96.9822 528.751 94.618 526.617 93.0363 524.626 cv
95.6409 518.516 94.9271 513.161 90.8836 509.117 cv
90.3757 508.61 90.1731 508.041 90.2439 507.328 cv
90.5912 503.805 96.8766 498.721 99.9998 496.526 cv
103.123 498.721 109.408 503.805 109.756 507.328 cv
109.826 508.041 109.624 508.61 109.116 509.117 cv
105.072 513.161 104.359 518.516 106.963 524.626 cv
105.382 526.617 103.017 528.751 99.9998 528.751 cv
cp
87.8513 479.894 mo
88.1663 478.798 li
88.5569 477.184 88.6829 475.662 88.6439 474.234 cv
95.7181 470.464 104.284 470.465 111.358 474.235 cv
111.321 475.684 111.448 477.205 111.848 478.846 cv
112.463 480.973 li
112.861 482.378 113.349 484.043 114.212 485.551 cv
110.151 487.847 105.379 488.638 100.764 488.725 cv
97.4698 488.786 94.242 488.403 91.0422 487.635 cv
89.0195 487.15 87.251 486.393 85.6608 485.478 cv
86.5052 483.723 87.3441 481.511 87.8513 479.894 cv
cp
81.3718 535.663 mo
71.6038 544.291 59.9387 548.163 55.8836 544.117 cv
53.8938 542.128 52.9295 539.601 52.9368 536.388 cv
52.9685 519.943 78.7375 493.08 84.1795 487.589 cv
89.3328 489.833 93.187 491.042 98.7498 491.153 cv
98.7498 494.344 li
96.4551 495.933 88.2642 501.935 87.7561 507.081 cv
87.6121 508.536 88.0808 509.85 89.116 510.885 cv
92.5657 514.335 93.0198 518.856 90.471 524.315 cv
88.7083 528.021 85.5613 531.947 81.3718 535.663 cv
cp
54.116 545.885 mo
55.742 547.511 57.9954 548.231 60.6126 548.231 cv
66.7521 548.231 74.8725 544.248 81.5894 538.725 cv
83.5691 544.664 li
79.116 549.117 li
78.6277 549.606 78.6277 550.397 79.116 550.885 cv
79.3601 551.129 79.6799 551.251 79.9998 551.251 cv
80.3196 551.251 80.6394 551.129 80.8836 550.885 cv
85.8836 545.885 li
86.218 545.55 86.3352 545.055 86.1863 544.606 cv
83.6356 536.953 li
87.1818 533.71 89.9549 530.32 91.8265 527.003 cv
94.2884 529.737 97.0716 531.251 99.9998 531.251 cv
102.928 531.251 105.711 529.737 108.173 527.002 cv
110.042 530.317 112.816 533.708 116.364 536.953 cv
113.813 544.606 li
113.664 545.055 113.782 545.55 114.116 545.885 cv
119.116 550.885 li
119.36 551.129 119.68 551.251 120 551.251 cv
120.32 551.251 120.639 551.129 120.884 550.885 cv
121.372 550.397 121.372 549.606 120.884 549.117 cv
116.43 544.664 li
118.41 538.726 li
125.125 544.249 133.247 548.231 139.387 548.231 cv
142.004 548.231 144.258 547.511 145.884 545.885 cv
148.332 543.436 149.57 540.238 149.563 536.383 cv
149.529 518.489 122.563 490.763 116.963 485.197 cv
115.874 483.82 115.315 481.865 114.868 480.289 cv
114.756 479.889 114.648 479.515 114.551 479.21 cv
114.534 479.153 li
120.561 476.117 li
120.857 475.968 121.081 475.709 121.186 475.397 cv
126.186 460.397 li
126.404 459.742 126.05 459.034 125.395 458.815 cv
124.746 458.602 124.035 458.951 123.813 459.606 cv
118.977 474.117 li
113.996 476.626 li
113.84 475.554 113.76 474.516 113.847 473.509 cv
113.891 472.567 114.072 471.644 114.387 470.743 cv
114.538 470.287 li
115.281 468.002 115.178 465.558 114.253 463.414 cv
113.803 462.35 113.125 461.359 112.234 460.467 cv
106.833 455.067 li
106.667 454.909 106.496 454.786 106.321 454.649 cv
106.508 452.754 108.057 451.251 110 451.251 cv
110.691 451.251 111.25 450.692 111.25 450.001 cv
111.25 449.31 110.691 448.751 110 448.751 cv
107.192 448.751 104.901 450.645 104.115 453.198 cv
101.509 451.969 98.491 451.969 95.8851 453.198 cv
95.0986 450.645 92.8077 448.751 89.9998 448.751 cv
89.3088 448.751 88.7498 449.31 88.7498 450.001 cv
88.7498 450.692 89.3088 451.251 89.9998 451.251 cv
91.9428 451.251 93.4919 452.754 93.6784 454.649 cv
93.4877 454.786 93.3462 454.91 93.1663 455.067 cv
87.7659 460.467 li
86.8748 461.359 86.1961 462.35 85.7517 463.405 cv
84.8215 465.558 84.719 468.002 85.4636 470.294 cv
85.6199 470.765 li
85.9275 471.644 86.1082 472.567 86.1545 473.561 cv
86.2406 474.538 86.1613 475.569 86.0065 476.628 cv
81.0227 474.117 li
76.1863 459.606 li
75.9666 458.951 75.2586 458.6 74.6043 458.815 cv
73.95 459.034 73.596 459.742 73.8132 460.397 cv
78.8132 475.397 li
78.9182 475.709 79.1428 475.968 79.4382 476.117 cv
85.4655 479.153 li
85.4587 479.176 li
84.8774 481.02 83.8511 483.661 82.9758 485.258 cv
77.2648 490.939 50.4706 518.542 50.4368 536.383 cv
50.4295 540.238 51.6672 543.436 54.116 545.885 cv
cp
f
96.2498 315.001 mo
96.2498 314.31 95.6907 313.751 94.9998 313.751 cv
94.3088 313.751 93.7498 314.31 93.7498 315.001 cv
93.7498 321.251 97.512 321.251 99.9998 321.251 cv
102.488 321.251 106.25 321.251 106.25 315.001 cv
106.25 314.31 105.691 313.751 105 313.751 cv
104.309 313.751 103.75 314.31 103.75 315.001 cv
103.75 318.751 102.497 318.751 99.9998 318.751 cv
97.5022 318.751 96.2498 318.751 96.2498 315.001 cv
cp
f
99.9998 283.021 mo
101.375 283.021 102.575 282.911 103.666 282.733 cv
103.744 284.108 103.75 284.983 103.75 285.001 cv
103.75 285.328 103.882 285.648 104.111 285.883 cv
104.123 285.892 105.163 286.964 105.669 288.556 cv
106.355 290.565 105.847 292.386 104.116 294.117 cv
100.942 297.291 100.693 300.045 101.042 301.798 cv
101.511 304.149 103.21 305.614 104.531 306.161 cv
104.953 306.332 105.373 306.454 105.779 306.571 cv
107.358 307.03 108.401 307.33 108.662 312.618 cv
108.755 313.319 108.75 314.113 108.75 315.001 cv
108.75 323.751 105.08 323.751 99.9998 323.751 cv
94.9192 323.751 91.2498 323.751 91.2498 315.001 cv
91.2498 314.113 91.2449 313.319 91.3474 312.513 cv
91.5989 307.33 92.6414 307.03 94.221 306.571 cv
94.6262 306.454 95.0462 306.332 95.4758 306.156 cv
96.7893 305.614 98.4885 304.149 98.9573 301.798 cv
99.3064 300.045 99.0574 297.291 95.8836 294.117 cv
94.1526 292.386 93.6448 290.565 94.3406 288.527 cv
94.8362 286.964 95.8762 285.892 95.8884 285.883 cv
96.1179 285.648 96.2498 285.328 96.2498 285.001 cv
96.2498 284.992 96.2513 284.124 96.29 282.726 cv
97.3911 282.91 98.6063 283.021 99.9998 283.021 cv
cp
92.6023 276.959 mo
92.6023 276.714 92.6932 276.014 92.7048 275.963 cv
92.9798 274.899 93.6536 274.074 94.5734 273.502 cv
94.2585 275.675 94.0681 277.781 93.9701 279.38 cv
92.6511 278.558 92.6023 277.508 92.6023 276.959 cv
cp
99.9998 265.397 mo
102.375 265.397 104.406 268.037 105.743 270.928 cv
105.553 270.801 105.182 270.672 105.063 270.621 cv
104.747 270.485 104.42 270.367 104.074 270.342 cv
103.612 270.31 103.109 270.474 102.858 270.864 cv
102.607 271.253 102.662 271.758 102.726 272.217 cv
102.976 274.021 103.243 275.816 103.399 277.629 cv
103.473 278.491 103.532 279.354 103.579 280.218 cv
102.627 280.395 101.498 280.521 99.9998 280.521 cv
98.5017 280.521 97.3728 280.395 96.4201 280.218 cv
96.5434 277.954 96.7458 275.69 97.0906 273.449 cv
97.1746 272.903 97.3636 272.346 97.352 271.785 cv
97.338 271.112 96.9991 270.457 96.2847 270.356 cv
95.6023 270.259 94.9096 270.587 94.2966 270.843 cv
95.6348 267.986 97.6478 265.397 99.9998 265.397 cv
cp
106.031 279.379 mo
105.929 277.759 105.742 275.694 105.436 273.565 cv
106.6 274.354 107.39 275.587 107.39 276.952 cv
107.39 277.167 107.344 277.58 107.341 277.613 cv
107.252 278.159 106.935 278.815 106.031 279.379 cv
cp
83.8816 289.442 mo
79.1135 298.978 li
64.6043 303.815 li
63.95 304.034 63.596 304.742 63.8132 305.397 cv
63.989 305.919 64.4773 306.251 64.9998 306.251 cv
65.1316 306.251 65.2634 306.232 65.3953 306.188 cv
80.3953 301.188 li
80.7102 301.083 80.969 300.856 81.1179 300.56 cv
85.5588 291.678 li
94.2252 296.012 li
96.0285 297.86 96.8284 299.691 96.5037 301.31 cv
96.2473 302.601 95.3245 303.514 94.531 303.842 cv
94.1917 303.981 93.8523 304.076 93.5252 304.171 cv
91.1146 304.869 89.365 305.881 88.9359 311.419 cv
82.6462 312.728 li
82.2971 312.801 81.9944 313.019 81.8162 313.329 cv
81.6379 313.636 81.6013 314.008 81.7136 314.347 cv
87.2605 330.98 li
78.8621 349.484 li
78.5764 350.113 78.8547 350.853 79.4822 351.139 cv
79.6506 351.215 79.8264 351.251 79.9998 351.251 cv
80.4734 351.251 80.9299 350.978 81.1375 350.519 cv
89.7385 331.569 li
89.8704 331.28 89.8875 330.956 89.7874 330.655 cv
84.531 314.889 li
88.7913 314.001 li
88.7849 314.345 88.7498 314.629 88.7498 315.001 cv
88.7498 326.251 94.9876 326.251 99.9998 326.251 cv
105.012 326.251 111.25 326.251 111.25 315.001 cv
111.25 314.649 111.245 314.33 111.24 314.008 cv
115.469 314.889 li
110.212 330.655 li
110.112 330.956 110.129 331.28 110.261 331.569 cv
118.862 350.519 li
119.07 350.978 119.526 351.251 120 351.251 cv
120.173 351.251 120.349 351.215 120.517 351.139 cv
121.145 350.853 121.423 350.113 121.137 349.484 cv
112.739 330.98 li
118.286 314.347 li
118.398 314.008 118.362 313.636 118.183 313.329 cv
118.005 313.019 117.702 312.801 117.353 312.728 cv
111.065 311.419 li
110.615 305.873 108.872 304.865 106.474 304.171 cv
106.147 304.076 105.808 303.981 105.476 303.846 cv
104.675 303.514 103.752 302.601 103.496 301.31 cv
103.171 299.691 103.971 297.86 105.774 296.012 cv
114.441 291.678 li
118.882 300.56 li
119.031 300.856 119.289 301.083 119.604 301.188 cv
134.604 306.188 li
134.736 306.232 134.868 306.251 135 306.251 cv
135.522 306.251 136.01 305.919 136.186 305.397 cv
136.404 304.742 136.05 304.034 135.395 303.815 cv
120.886 298.978 li
116.118 289.442 li
115.808 288.824 115.061 288.573 114.441 288.883 cv
108.238 291.984 li
108.527 290.88 108.467 289.733 108.197 288.572 cv
115.884 280.885 li
116.118 280.651 116.25 280.333 116.25 280.001 cv
116.25 275.773 li
125.559 271.119 li
126.177 270.809 126.426 270.06 126.118 269.442 cv
125.808 268.824 125.063 268.575 124.441 268.883 cv
114.441 273.883 li
114.018 274.095 113.75 274.528 113.75 275.001 cv
113.75 279.484 li
107.235 285.999 li
106.871 285.363 106.506 284.838 106.242 284.52 cv
106.233 284.086 106.211 283.378 106.157 282.469 cv
106.15 282.274 106.152 282.232 106.154 282.099 cv
108.633 281.136 109.897 279.425 109.897 276.959 cv
109.897 275.204 109.079 271.842 107.51 268.843 cv
115.398 266.185 li
115.581 266.124 115.747 266.022 115.884 265.885 cv
130.884 250.885 li
131.372 250.397 131.372 249.606 130.884 249.117 cv
130.395 248.629 129.604 248.629 129.116 249.117 cv
114.323 263.91 li
106.158 266.662 li
104.583 264.506 102.535 262.897 99.9998 262.897 cv
97.4644 262.897 95.4166 264.506 93.8419 266.662 cv
85.676 263.91 li
70.8836 249.117 li
70.3953 248.629 69.6043 248.629 69.116 249.117 cv
68.6277 249.606 68.6277 250.397 69.116 250.885 cv
84.116 265.885 li
84.2527 266.022 84.4187 266.124 84.6018 266.185 cv
84.6018 266.185 92.4888 268.843 92.49 268.843 cv
92.3904 268.809 91.5182 270.925 91.4336 271.139 cv
91.1069 271.966 90.8309 272.813 90.6214 273.676 cv
90.2336 275.275 89.8499 277.306 90.4132 278.893 cv
90.6856 279.661 91.1565 280.34 91.7667 280.878 cv
92.3662 281.407 93.0776 281.795 93.819 282.086 cv
93.8098 282.206 93.8098 282.206 93.7986 282.362 cv
93.7295 283.322 93.7571 284.073 93.7522 284.523 cv
93.4876 284.841 93.1235 285.365 92.7628 285.997 cv
86.2498 279.484 li
86.2498 275.001 li
86.2498 274.528 85.9812 274.095 85.5588 273.883 cv
75.5588 268.883 li
74.9461 268.58 74.1941 268.827 73.8816 269.442 cv
73.574 270.06 73.823 270.809 74.4407 271.119 cv
83.7498 275.773 li
83.7498 280.001 li
83.7498 280.333 83.8816 280.651 84.116 280.885 cv
91.8055 288.574 li
91.5382 289.738 91.4768 290.885 91.7631 291.985 cv
85.5588 288.883 li
84.9387 288.578 84.1917 288.829 83.8816 289.442 cv
cp
f
99.9998 666.412 mo
103.227 666.412 105.229 667.286 105.229 671.642 cv
105.229 672.484 105.151 673.295 105.002 674.044 cv
103.435 673.151 101.709 672.672 99.9998 672.672 cv
98.2908 672.672 96.5647 673.151 94.9973 674.044 cv
94.8484 673.295 94.7703 672.484 94.7703 671.642 cv
94.7703 667.286 96.7722 666.412 99.9998 666.412 cv
cp
104.57 694.254 mo
102.895 695.409 101.887 697.247 101.802 699.3 cv
101.716 701.368 102.578 703.302 104.177 704.615 cv
106.775 706.703 109.431 709.12 109.431 711.241 cv
109.431 719.376 105.2 725.992 99.9998 725.992 cv
94.7996 725.992 90.5686 719.376 90.5686 711.241 cv
90.5686 709.12 93.2249 706.703 95.8323 704.608 cv
97.4216 703.302 98.2835 701.368 98.198 699.3 cv
98.1126 697.247 97.1043 695.409 95.4221 694.249 cv
92.8635 692.506 90.2488 690.467 90.2488 688.561 cv
90.2488 683.888 92.0942 679.467 95.0648 677.014 cv
98.0176 674.638 101.982 674.638 104.935 677.014 cv
107.905 679.467 109.751 683.888 109.751 688.561 cv
109.751 690.467 107.136 692.506 104.57 694.254 cv
cp
65.4636 673.841 mo
65.1878 673.729 64.8826 673.722 64.6043 673.815 cv
49.6043 678.815 li
48.95 679.034 48.596 679.742 48.8132 680.397 cv
49.0354 681.053 49.741 681.412 50.3953 681.188 cv
64.9607 676.332 li
88.0424 685.555 li
87.8962 686.542 87.7488 687.531 87.7488 688.561 cv
87.7488 688.627 87.7912 688.685 87.794 688.751 cv
74.9998 688.751 li
74.5603 688.751 74.1526 688.981 73.928 689.359 cv
58.928 714.359 li
58.5715 714.95 58.7644 715.719 59.3577 716.073 cv
59.5579 716.195 59.78 716.251 59.9998 716.251 cv
60.4221 716.251 60.8372 716.034 61.0715 715.643 cv
75.7078 691.251 li
88.6164 691.251 li
89.3787 692.542 90.5665 693.734 91.9959 694.842 cv
79.6189 698.81 li
79.0574 698.99 78.6985 699.54 78.7571 700.126 cv
83.7571 750.126 li
83.8206 750.77 84.365 751.251 84.9973 751.251 cv
85.0388 751.251 85.0828 751.249 85.1243 751.244 cv
85.8103 751.175 86.3132 750.563 86.2424 749.877 cv
81.345 700.883 li
94.368 696.708 li
95.1328 697.41 95.6547 698.331 95.7004 699.405 cv
95.7542 700.68 95.2244 701.874 94.2551 702.667 cv
91.0422 705.248 88.0686 708.072 88.0686 711.241 cv
88.0686 720.753 93.4202 728.492 99.9998 728.492 cv
106.579 728.492 111.931 720.753 111.931 711.241 cv
111.931 708.072 108.957 705.248 105.754 702.674 cv
104.775 701.874 104.245 700.68 104.299 699.405 cv
104.345 698.329 104.867 697.407 105.63 696.707 cv
118.655 700.883 li
113.757 749.877 li
113.686 750.563 114.189 751.175 114.875 751.244 cv
114.917 751.249 114.961 751.251 115.002 751.251 cv
115.635 751.251 116.179 750.77 116.242 750.126 cv
121.242 700.126 li
121.301 699.54 120.942 698.99 120.381 698.81 cv
108.003 694.841 li
109.434 693.733 110.621 692.542 111.383 691.251 cv
124.292 691.251 li
138.928 715.643 li
139.162 716.034 139.577 716.251 140 716.251 cv
140.219 716.251 140.442 716.195 140.642 716.073 cv
141.235 715.719 141.428 714.95 141.072 714.359 cv
126.072 689.359 li
125.847 688.981 125.439 688.751 125 688.751 cv
112.206 688.751 li
112.219 688.687 112.251 688.627 112.251 688.561 cv
112.251 687.531 112.104 686.542 111.957 685.555 cv
135.039 676.332 li
149.604 681.188 li
150.263 681.415 150.969 681.053 151.186 680.397 cv
151.404 679.742 151.05 679.034 150.395 678.815 cv
135.395 673.815 li
135.112 673.724 134.809 673.729 134.536 673.841 cv
111.409 683.084 li
111.119 682.068 110.781 681.092 110.339 680.175 cv
120.827 665.985 li
150.559 651.119 li
151.177 650.809 151.426 650.06 151.118 649.442 cv
150.81 648.824 150.058 648.573 149.441 648.883 cv
119.441 663.883 li
119.265 663.971 119.111 664.1 118.994 664.259 cv
108.997 677.785 li
108.442 677.004 107.781 676.344 107.102 675.706 cv
107.487 674.468 107.729 673.127 107.729 671.642 cv
107.729 671.11 107.587 670.727 107.535 670.252 cv
109.649 668.837 110.909 667.042 111.191 664.869 cv
111.87 659.623 106.655 654.34 106.433 654.117 cv
105.945 653.629 105.156 653.629 104.668 654.117 cv
104.179 654.603 104.177 655.394 104.665 655.885 cv
104.709 655.929 109.236 660.529 108.711 664.552 cv
108.554 665.744 107.959 666.769 106.906 667.658 cv
105.814 665.205 103.586 663.912 99.9998 663.912 cv
96.6529 663.912 94.5307 665.08 93.3588 667.213 cv
92.5373 666.389 91.9456 665.495 91.8308 664.427 cv
91.4036 660.436 95.8396 655.929 95.8836 655.885 cv
96.3718 655.394 96.3694 654.603 95.8811 654.117 cv
95.3928 653.629 94.6043 653.629 94.116 654.117 cv
93.8987 654.335 88.7962 659.503 89.343 664.684 cv
89.5628 666.75 90.6583 668.48 92.5172 669.879 cv
92.432 670.463 92.2703 670.968 92.2703 671.642 cv
92.2703 673.127 92.5126 674.468 92.8977 675.707 cv
92.1183 676.438 91.406 677.244 90.7905 678.163 cv
81.0227 664.281 li
80.9031 664.112 80.7444 663.976 80.5588 663.883 cv
50.5588 648.883 li
49.9436 648.578 49.1941 648.829 48.8816 649.442 cv
48.574 650.06 48.823 650.809 49.4407 651.119 cv
79.1599 665.978 li
89.4321 680.581 li
89.0778 681.37 88.8352 682.225 88.5908 683.084 cv
65.4636 673.841 li
cp
f
286.25 265.001 mo
286.25 262.933 287.932 261.251 290 261.251 cv
290.606 261.251 291.189 261.406 291.719 261.682 cv
289.541 262.692 287.739 264.106 286.446 266.012 cv
286.354 265.683 286.25 265.358 286.25 265.001 cv
cp
310 261.251 mo
312.068 261.251 313.75 262.933 313.75 265.001 cv
313.75 265.358 313.646 265.683 313.554 266.012 cv
312.26 264.106 310.458 262.692 308.281 261.682 cv
308.81 261.406 309.393 261.251 310 261.251 cv
cp
308.796 347.78 mo
306.253 346.019 301.25 341.717 301.25 335.001 cv
301.25 281.273 li
312.363 281.487 323.75 284.985 323.75 315.001 cv
323.75 338.132 316.984 345.509 308.796 347.78 cv
cp
294.468 348.424 mo
296.481 346.71 298.672 344.312 300.005 341.156 cv
301.386 344.407 303.646 346.795 305.568 348.419 cv
303.727 348.664 301.855 348.751 300 348.751 cv
298.156 348.751 296.297 348.665 294.468 348.424 cv
cp
285.932 275.985 mo
287.734 274.191 290.083 274.584 293.755 275.38 cv
295.644 275.787 297.783 276.251 300 276.251 cv
302.217 276.251 304.355 275.787 306.245 275.38 cv
309.919 274.579 312.263 274.186 314.067 275.985 cv
316.301 278.219 317.736 281.278 318.371 285.091 cv
313.499 279.884 306.882 278.751 300 278.751 cv
293.118 278.751 286.501 279.884 281.629 285.091 cv
282.264 281.278 283.698 278.219 285.932 275.985 cv
cp
300 262.501 mo
307.856 262.501 312.375 265.919 313.462 272.67 cv
311.074 271.771 308.357 272.364 305.715 272.936 cv
303.865 273.336 301.948 273.751 300 273.751 cv
298.052 273.751 296.135 273.336 294.284 272.936 cv
292.622 272.577 290.932 272.211 289.314 272.211 cv
288.357 272.211 287.424 272.338 286.538 272.67 cv
287.624 265.919 292.143 262.501 300 262.501 cv
cp
276.25 315.001 mo
276.25 284.985 287.637 281.487 298.75 281.273 cv
298.75 335.001 li
298.75 341.428 294.21 345.684 291.235 347.79 cv
283.033 345.529 276.25 338.162 276.25 315.001 cv
cp
270.632 298.925 mo
270.307 298.734 269.912 298.7 269.56 298.832 cv
269.209 298.964 268.933 299.249 268.813 299.606 cv
263.908 314.325 li
254.116 324.117 li
253.628 324.606 253.628 325.397 254.116 325.885 cv
254.36 326.129 254.68 326.251 255 326.251 cv
255.32 326.251 255.639 326.129 255.884 325.885 cv
265.884 315.885 li
266.02 315.748 266.125 315.58 266.186 315.397 cv
270.698 301.862 li
274.362 304.013 li
273.967 307.258 273.75 310.893 273.75 315.001 cv
273.75 318.678 273.935 321.951 274.254 324.931 cv
270.346 323.8 li
270.027 323.71 269.675 323.754 269.377 323.917 cv
269.082 324.088 268.869 324.369 268.786 324.698 cv
263.872 344.362 li
259.116 349.117 li
258.628 349.606 258.628 350.397 259.116 350.885 cv
259.36 351.129 259.68 351.251 260 351.251 cv
260.32 351.251 260.639 351.129 260.884 350.885 cv
265.884 345.885 li
266.045 345.724 266.157 345.524 266.213 345.304 cv
270.898 326.564 li
274.615 327.639 li
277.64 348.025 288.439 351.251 300 351.251 cv
311.501 351.251 322.248 348.055 325.337 327.947 cv
329.118 326.632 li
333.786 345.304 li
333.843 345.524 333.955 345.724 334.116 345.885 cv
339.116 350.885 li
339.36 351.129 339.68 351.251 340 351.251 cv
340.32 351.251 340.639 351.129 340.884 350.885 cv
341.372 350.397 341.372 349.606 340.884 349.117 cv
336.128 344.362 li
331.213 324.698 li
331.128 324.357 330.903 324.069 330.593 323.903 cv
330.288 323.737 329.919 323.707 329.59 323.82 cv
325.726 325.163 li
326.06 322.125 326.25 318.77 326.25 315.001 cv
326.25 311.046 326.054 307.518 325.687 304.366 cv
329.331 301.947 li
333.813 315.397 li
333.874 315.58 333.979 315.748 334.116 315.885 cv
344.116 325.885 li
344.36 326.129 344.68 326.251 345 326.251 cv
345.32 326.251 345.639 326.129 345.884 325.885 cv
346.372 325.397 346.372 324.606 345.884 324.117 cv
336.091 314.325 li
331.186 299.606 li
331.062 299.237 330.774 298.947 330.407 298.82 cv
330.036 298.688 329.634 298.744 329.309 298.959 cv
325.273 301.638 li
324.534 297.039 323.396 293.324 321.925 290.362 cv
329.861 291.244 li
329.907 291.249 329.953 291.251 330 291.251 cv
330.415 291.251 330.805 291.044 331.04 290.695 cv
341.04 275.695 li
341.423 275.121 341.267 274.344 340.693 273.961 cv
340.122 273.58 339.343 273.732 338.96 274.308 cv
329.382 288.676 li
321.115 287.756 li
320.769 282.22 319.126 277.791 316.151 274.618 cv
316.025 272.4 315.634 270.398 314.944 268.662 cv
315.736 267.57 316.25 266.349 316.25 265.001 cv
316.25 261.554 313.447 258.751 310 258.751 cv
308.293 258.751 306.715 259.476 305.516 260.705 cv
304.195 260.366 302.762 260.158 301.215 260.086 cv
301.217 260.053 301.25 260.034 301.25 260.001 cv
301.25 255.177 305.176 251.251 310 251.251 cv
310.691 251.251 311.25 250.692 311.25 250.001 cv
311.25 249.31 310.691 248.751 310 248.751 cv
305.619 248.751 301.857 251.292 300 254.955 cv
298.142 251.292 294.38 248.751 290 248.751 cv
289.309 248.751 288.75 249.31 288.75 250.001 cv
288.75 250.692 289.309 251.251 290 251.251 cv
294.824 251.251 298.75 255.177 298.75 260.001 cv
298.75 260.034 298.782 260.053 298.785 260.086 cv
297.237 260.158 295.805 260.366 294.483 260.705 cv
293.285 259.476 291.707 258.751 290 258.751 cv
286.552 258.751 283.75 261.554 283.75 265.001 cv
283.75 266.349 284.263 267.57 285.056 268.662 cv
284.366 270.398 283.975 272.4 283.848 274.618 cv
280.855 277.81 279.208 282.272 278.876 287.857 cv
270.622 288.683 li
261.04 274.308 li
260.649 273.732 259.87 273.575 259.306 273.961 cv
258.733 274.344 258.576 275.121 258.96 275.695 cv
268.96 290.695 li
269.194 291.044 269.585 291.251 270 291.251 cv
270.041 291.251 270.083 291.249 270.124 291.244 cv
278.035 290.448 li
276.613 293.336 275.503 296.928 274.769 301.356 cv
270.632 298.925 li
cp
f
270.139 681.742 mo
298.75 681.742 li
298.75 683.245 li
298.745 683.247 298.74 683.244 298.735 683.246 cv
298.73 683.248 281.889 689.173 281.883 689.174 cv
281.882 689.174 li
272.868 691.029 262.934 690.245 252.363 686.818 cv
251.299 686.471 251.242 685.494 251.25 685.201 cv
251.267 684.581 251.604 683.832 252.488 683.595 cv
257.217 682.364 263.154 681.742 270.139 681.742 cv
cp
297.993 677.435 mo
298.384 675.332 298.512 674.032 298.499 673.164 cv
299.501 673.031 300.497 673.031 301.499 673.164 cv
301.485 674.025 301.612 675.307 301.997 677.377 cv
302.08 677.993 302.207 678.62 302.327 679.242 cv
300 679.242 li
297.672 679.242 li
297.791 678.628 297.918 678.004 297.993 677.435 cv
cp
296.174 666.459 mo
296.174 666.088 296.286 665.704 296.465 665.472 cv
299.658 661.285 li
299.887 660.978 300.105 660.97 300.349 661.293 cv
303.542 665.482 li
303.713 665.704 303.825 666.088 303.825 666.459 cv
303.825 669.642 li
303.825 670.386 303.421 670.851 303.15 670.868 cv
301.062 670.38 298.881 670.365 296.794 670.864 cv
296.57 670.841 296.174 670.38 296.174 669.642 cv
296.174 666.459 li
cp
347.502 683.592 mo
348.396 683.832 348.733 684.581 348.75 685.201 cv
348.757 685.494 348.701 686.471 347.641 686.818 cv
337.273 690.145 327.527 690.983 318.442 689.286 cv
318.439 689.284 318.435 689.286 318.432 689.284 cv
318.387 689.261 301.59 683.357 301.25 683.276 cv
301.25 681.742 li
329.861 681.742 li
336.845 681.742 342.783 682.364 347.502 683.592 cv
cp
346.677 705.404 mo
346.67 706.139 346.35 706.73 345.671 707.264 cv
342.885 709.466 335.373 709.596 330.095 708.339 cv
319.963 705.98 310.876 699.044 305.163 689.32 cv
303.633 686.688 li
303.799 686.747 317.531 691.617 317.531 691.617 cv
344.294 701.532 346.511 704.813 346.677 705.404 cv
cp
300.01 685.436 mo
302.17 689.145 li
300.654 693.734 li
300.61 693.866 300.508 694.174 300 694.174 cv
299.492 694.174 299.389 693.866 299.345 693.739 cv
297.832 689.153 li
300.01 685.436 li
cp
269.897 708.341 mo
264.646 709.593 257.153 709.464 254.382 707.272 cv
253.694 706.73 253.374 706.127 253.371 705.419 cv
253.454 705.072 254.98 701.757 282.417 691.625 cv
282.483 691.612 295.656 686.952 296.362 686.713 cv
295.354 688.437 li
295.353 688.439 295.352 688.441 295.35 688.444 cv
294.841 689.315 li
289.123 699.044 280.036 705.98 269.897 708.341 cv
cp
248.752 685.135 mo
248.701 687.02 249.814 688.614 251.589 689.195 cv
258.72 691.505 265.586 692.66 272.055 692.66 cv
272.311 692.66 272.554 692.627 272.808 692.623 cv
250.938 701.282 250.874 704.101 250.874 705.377 cv
250.874 706.888 251.55 708.224 252.832 709.235 cv
255.053 710.987 258.906 711.63 262.732 711.627 cv
265.549 711.627 268.352 711.28 270.471 710.775 cv
280.778 708.374 290.019 701.523 296.116 691.926 cv
296.517 693.145 li
293.53 699.774 li
293.423 700.013 293.393 700.282 293.447 700.541 cv
294.536 705.785 li
294.658 706.376 295.178 706.781 295.757 706.781 cv
295.842 706.781 295.927 706.774 296.013 706.754 cv
296.689 706.615 297.124 705.953 296.982 705.277 cv
295.976 700.431 li
297.987 695.968 li
298.216 696.153 298.472 696.295 298.75 696.407 cv
298.75 740.214 li
298.75 740.904 299.309 741.464 300 741.464 cv
300.691 741.464 301.25 740.904 301.25 740.214 cv
301.25 696.407 li
301.527 696.295 301.783 696.152 302.012 695.968 cv
304.023 700.431 li
303.017 705.277 li
302.876 705.953 303.31 706.615 303.987 706.754 cv
304.072 706.774 304.157 706.781 304.243 706.781 cv
304.822 706.781 305.342 706.376 305.464 705.785 cv
306.552 700.541 li
306.606 700.282 306.577 700.013 306.469 699.774 cv
303.482 693.143 li
303.884 691.924 li
309.976 701.52 319.219 708.374 329.521 710.773 cv
331.65 711.28 334.46 711.63 337.287 711.63 cv
341.125 711.63 344.992 710.987 347.221 709.227 cv
348.501 708.216 349.177 706.886 349.177 705.377 cv
349.177 704.013 349.108 701.311 327.132 692.617 cv
327.367 692.62 327.593 692.65 327.829 692.65 cv
334.363 692.65 341.252 691.495 348.413 689.195 cv
350.185 688.614 351.299 687.02 351.247 685.135 cv
351.196 683.251 349.953 681.659 348.142 681.173 cv
343.208 679.891 337.058 679.242 329.861 679.242 cv
304.866 679.242 li
304.778 678.795 304.7 678.323 304.619 677.856 cv
311.867 673.715 li
312.356 673.434 312.597 672.865 312.458 672.32 cv
310.417 664.259 li
310.251 663.59 309.594 663.17 308.899 663.356 cv
308.23 663.524 307.824 664.205 307.995 664.874 cv
309.802 672.015 li
304.177 675.231 li
304.036 674.237 303.992 673.603 303.994 673.256 cv
305.334 672.828 306.325 671.371 306.325 669.642 cv
306.325 666.459 li
306.325 665.526 306.03 664.611 305.522 663.959 cv
302.344 659.786 li
301.157 658.199 298.835 658.207 297.663 659.779 cv
294.485 663.949 li
293.969 664.611 293.674 665.526 293.674 666.459 cv
293.674 669.642 li
293.674 671.359 294.651 672.806 296.006 673.246 cv
296.007 673.592 295.963 674.228 295.822 675.231 cv
290.198 672.015 li
292.004 664.874 li
292.175 664.205 291.77 663.524 291.101 663.356 cv
290.412 663.17 289.751 663.59 289.582 664.259 cv
287.541 672.32 li
287.402 672.865 287.644 673.434 288.132 673.715 cv
295.381 677.856 li
295.301 678.321 295.224 678.784 295.133 679.242 cv
270.139 679.242 li
262.942 679.242 256.792 679.891 251.848 681.175 cv
250.046 681.659 248.803 683.251 248.752 685.135 cv
cp
f
265.163 686.72 mo
280.093 686.72 li
280.783 686.72 281.343 686.161 281.343 685.47 cv
281.343 684.779 280.783 684.22 280.093 684.22 cv
265.163 684.22 li
264.472 684.22 263.913 684.779 263.913 685.47 cv
263.913 686.161 264.472 686.72 265.163 686.72 cv
cp
f
319.907 686.72 mo
334.836 686.72 li
335.527 686.72 336.086 686.161 336.086 685.47 cv
336.086 684.779 335.527 684.22 334.836 684.22 cv
319.907 684.22 li
319.216 684.22 318.657 684.779 318.657 685.47 cv
318.657 686.161 319.216 686.72 319.907 686.72 cv
cp
f
284.187 694.54 mo
284.092 694.635 274.394 704.127 260.185 704.127 cv
259.494 704.127 258.935 704.686 258.935 705.377 cv
258.935 706.068 259.494 706.627 260.185 706.627 cv
275.459 706.627 285.532 696.73 285.954 696.307 cv
286.443 695.819 286.443 695.03 285.954 694.542 cv
285.466 694.049 284.675 694.051 284.187 694.54 cv
cp
f
314.045 694.542 mo
313.557 695.03 313.557 695.819 314.045 696.307 cv
314.468 696.73 324.541 706.627 339.814 706.627 cv
340.505 706.627 341.064 706.068 341.064 705.377 cv
341.064 704.686 340.505 704.127 339.814 704.127 cv
325.605 704.127 315.908 694.635 315.813 694.54 cv
315.324 694.051 314.533 694.049 314.045 694.542 cv
cp
f
508.635 710.883 mo
507.973 710.673 507.273 711.046 507.073 711.708 cv
504.392 720.402 501.111 726.224 500.061 726.571 cv
498.889 726.224 495.608 720.402 492.927 711.708 cv
492.722 711.049 492.024 710.682 491.365 710.883 cv
490.705 711.085 490.334 711.786 490.539 712.445 cv
491.394 715.221 495.871 729.064 500 729.064 cv
504.128 729.064 508.606 715.221 509.46 712.445 cv
509.665 711.786 509.294 711.085 508.635 710.883 cv
cp
f
513.75 700.001 mo
513.75 705.802 512.893 711.532 511.206 717.032 cv
507.885 727.797 502.473 733.751 500 733.751 cv
497.527 733.751 492.114 727.797 488.794 717.035 cv
487.107 711.532 486.25 705.802 486.25 700.001 cv
486.25 698.585 486.306 697.599 486.445 696.713 cv
486.743 693.387 487.575 693.033 488.218 693.033 cv
488.31 693.033 488.398 693.041 488.481 693.048 cv
489.419 693.099 490.757 693.651 492.173 694.232 cv
494.358 695.133 497.077 696.251 500 696.251 cv
502.922 696.251 505.642 695.133 507.827 694.232 cv
509.242 693.651 510.579 693.101 511.55 693.046 cv
511.554 693.046 511.559 693.046 511.562 693.046 cv
511.562 693.046 511.563 693.045 511.563 693.045 cv
512.189 693.004 513.217 692.937 513.564 696.798 cv
513.694 697.599 513.75 698.585 513.75 700.001 cv
cp
500 666.251 mo
502.068 666.251 503.75 667.933 503.75 670.001 cv
503.75 675.177 li
502.425 674.283 501.122 673.751 500 673.751 cv
498.876 673.751 497.572 674.283 496.25 675.175 cv
496.25 670.001 li
496.25 667.933 497.932 666.251 500 666.251 cv
cp
503.617 693.14 mo
502.446 693.499 501.231 693.751 500 693.751 cv
498.768 693.751 497.554 693.499 496.383 693.14 cv
496.774 689.044 498.511 686.251 500 686.251 cv
501.488 686.251 503.225 689.044 503.617 693.14 cv
cp
506.041 692.255 mo
505.41 687.243 503.015 683.751 500 683.751 cv
496.984 683.751 494.59 687.243 493.959 692.255 cv
493.68 692.143 493.394 692.031 493.125 691.92 cv
491.974 691.447 490.956 691.089 489.987 690.841 cv
490.649 686.185 492.763 681.702 495.883 678.686 cv
495.883 678.686 495.884 678.685 495.884 678.685 cv
497.681 676.889 499.223 676.251 500 676.251 cv
500.776 676.251 502.319 676.888 504.131 678.7 cv
507.238 681.703 509.351 686.185 510.013 690.843 cv
509.037 691.092 508.02 691.45 506.875 691.92 cv
506.605 692.031 506.319 692.143 506.041 692.255 cv
cp
515.554 686.122 mo
515.798 686.002 515.996 685.804 516.118 685.56 cv
520.932 675.934 li
530.559 671.119 li
531.177 670.809 531.426 670.06 531.118 669.442 cv
530.808 668.827 530.063 668.57 529.441 668.883 cv
519.441 673.883 li
519.199 674.005 519.004 674.2 518.882 674.442 cv
514.07 684.066 li
511.204 685.483 li
510.07 682.382 508.397 679.552 506.25 677.351 cv
506.25 670.519 li
515.884 660.885 li
516.118 660.651 516.25 660.333 516.25 660.001 cv
516.25 650.001 li
516.25 649.31 515.691 648.751 515 648.751 cv
514.309 648.751 513.75 649.31 513.75 650.001 cv
513.75 659.484 li
505.72 667.513 li
504.755 665.305 502.56 663.751 500 663.751 cv
497.439 663.751 495.245 665.305 494.28 667.514 cv
486.25 659.484 li
486.25 650.001 li
486.25 649.31 485.691 648.751 485 648.751 cv
484.309 648.751 483.75 649.31 483.75 650.001 cv
483.75 660.001 li
483.75 660.333 483.882 660.651 484.116 660.885 cv
493.75 670.519 li
493.75 677.353 li
491.601 679.561 489.928 682.387 488.796 685.483 cv
485.93 684.066 li
481.118 674.442 li
480.996 674.2 480.801 674.005 480.559 673.883 cv
470.559 668.883 li
469.944 668.573 469.194 668.827 468.882 669.442 cv
468.574 670.06 468.823 670.809 469.441 671.119 cv
479.067 675.934 li
483.882 685.56 li
484.004 685.804 484.201 686.002 484.446 686.122 cv
487.993 687.875 li
487.762 688.78 487.623 689.702 487.496 690.626 cv
484.882 691.088 484.238 693.998 484.039 695.669 cv
474.604 698.815 li
474.289 698.92 474.031 699.147 473.882 699.442 cv
468.882 709.442 li
468.574 710.06 468.823 710.809 469.441 711.119 cv
469.621 711.21 469.812 711.251 470 711.251 cv
470.456 711.251 470.898 710.997 471.118 710.56 cv
475.886 701.024 li
483.791 698.389 li
483.769 698.882 483.75 699.384 483.75 700.001 cv
483.75 705.792 484.592 711.51 486.208 717.026 cv
479.116 724.117 li
478.806 724.427 478.681 724.879 478.786 725.304 cv
483.545 744.332 li
474.441 748.883 li
473.823 749.193 473.574 749.943 473.882 750.56 cv
474.101 750.997 474.543 751.251 475 751.251 cv
475.188 751.251 475.378 751.21 475.559 751.119 cv
485.559 746.119 li
486.084 745.858 486.355 745.267 486.213 744.698 cv
481.384 725.384 li
487.076 719.692 li
490.413 729.241 495.783 736.251 500 736.251 cv
504.216 736.251 509.586 729.241 512.922 719.691 cv
518.615 725.384 li
513.786 744.698 li
513.645 745.267 513.916 745.858 514.441 746.119 cv
524.441 751.119 li
524.621 751.21 524.812 751.251 525 751.251 cv
525.456 751.251 525.898 750.997 526.118 750.56 cv
526.426 749.943 526.177 749.193 525.559 748.883 cv
516.455 744.332 li
521.213 725.304 li
521.318 724.879 521.194 724.427 520.884 724.117 cv
513.791 717.025 li
515.408 711.511 516.25 705.793 516.25 700.001 cv
516.25 699.381 516.231 698.879 516.209 698.389 cv
524.114 701.024 li
528.882 710.56 li
529.101 710.997 529.543 711.251 530 711.251 cv
530.188 711.251 530.378 711.21 530.559 711.119 cv
531.177 710.809 531.426 710.06 531.118 709.442 cv
526.118 699.442 li
525.969 699.147 525.71 698.92 525.395 698.815 cv
515.954 695.667 li
515.731 693.936 515.039 691.07 512.503 690.621 cv
512.376 689.699 512.238 688.778 512.007 687.875 cv
515.554 686.122 li
cp
f
722.387 710.829 mo
721.216 720.199 li
719.945 730.355 711.543 738.035 701.443 738.635 cv
701.254 700.901 li
714.866 696.364 li
720.105 699.16 723.126 704.911 722.387 710.829 cv
cp
678.784 720.199 mo
677.612 710.829 li
676.877 704.94 679.869 699.219 685.143 696.367 cv
698.754 700.904 li
698.943 738.672 li
688.669 738.251 680.071 730.485 678.784 720.199 cv
cp
685.361 676.434 mo
698.374 679.375 701.843 679.313 714.641 676.432 cv
719.126 681.37 719.021 688.995 714.275 693.924 cv
700 698.683 li
685.7 693.916 li
680.997 689.115 680.847 681.491 685.361 676.434 cv
cp
690.398 662.167 mo
691.616 663.385 li
693.515 665.284 696.484 665.284 698.383 663.385 cv
699.267 662.501 700.732 662.501 701.616 663.385 cv
703.442 665.211 706.557 665.211 708.383 663.385 cv
709.607 662.162 li
711.247 666.218 711.508 670.687 710.432 674.982 cv
703.62 676.569 696.461 676.568 689.565 674.97 cv
688.499 670.708 688.752 666.271 690.398 662.167 cv
cp
728.813 710.397 mo
728.918 710.712 729.145 710.97 729.441 711.119 cv
739.441 716.119 li
739.621 716.21 739.812 716.251 740 716.251 cv
740.456 716.251 740.898 715.997 741.118 715.56 cv
741.425 714.943 741.176 714.193 740.559 713.883 cv
731.023 709.115 li
726.186 694.606 li
726.071 694.261 725.813 693.986 725.478 693.846 cv
725.144 693.712 724.77 693.724 724.441 693.883 cv
719.3 696.452 li
718.581 695.81 717.82 695.206 716.985 694.684 cv
718.209 693.195 719.106 691.526 719.68 689.774 cv
730.395 686.188 li
731.049 685.968 731.404 685.26 731.186 684.606 cv
726.186 669.606 li
725.966 668.951 725.266 668.605 724.604 668.815 cv
723.95 669.034 723.596 669.742 723.813 670.397 cv
728.42 684.213 li
720.311 686.925 li
720.88 682.407 719.445 677.681 715.984 674.217 cv
715.883 674.117 li
715.549 673.78 714.907 673.719 714.453 673.863 cv
714.005 674.013 713.546 674.121 713.094 674.256 cv
713.734 670.894 713.675 667.477 712.832 664.177 cv
718.034 661.324 721.25 656.002 721.25 650.001 cv
721.25 649.31 720.691 648.751 720 648.751 cv
719.309 648.751 718.75 649.31 718.75 650.001 cv
718.75 654.912 716.141 659.216 711.991 661.684 cv
711.708 660.938 711.484 660.177 711.123 659.454 cv
710.947 659.091 710.605 658.834 710.205 658.768 cv
709.809 658.705 709.404 658.832 709.116 659.117 cv
706.616 661.617 li
705.732 662.501 704.267 662.501 703.383 661.617 cv
701.557 659.791 698.442 659.791 696.616 661.617 cv
695.737 662.496 694.262 662.496 693.383 661.617 cv
690.883 659.117 li
690.595 658.832 690.175 658.744 689.775 658.817 cv
689.38 658.881 689.013 659.183 688.833 659.542 cv
688.488 660.232 688.275 660.965 688.003 661.68 cv
683.856 659.212 681.25 654.91 681.25 650.001 cv
681.25 649.31 680.691 648.751 680 648.751 cv
679.309 648.751 678.75 649.31 678.75 650.001 cv
678.75 655.998 681.962 661.317 687.158 664.172 cv
686.319 667.455 686.263 670.88 686.904 674.252 cv
686.397 674.102 685.884 673.98 685.381 673.812 cv
684.936 673.671 684.345 673.885 684.013 674.217 cv
680.557 677.676 679.117 682.395 679.701 686.929 cv
671.579 684.213 li
676.186 670.397 li
676.404 669.742 676.049 669.034 675.395 668.815 cv
674.743 668.607 674.035 668.954 673.813 669.606 cv
668.813 684.606 li
668.596 685.26 668.95 685.968 669.604 686.188 cv
680.354 689.785 li
680.927 691.52 681.81 693.179 683.02 694.669 cv
682.177 695.19 681.411 695.798 680.685 696.445 cv
675.559 693.883 li
675.234 693.719 674.853 693.707 674.521 693.846 cv
674.187 693.986 673.928 694.261 673.813 694.606 cv
668.977 709.115 li
659.441 713.883 li
658.823 714.193 658.574 714.943 658.882 715.56 cv
659.101 715.997 659.543 716.251 660 716.251 cv
660.188 716.251 660.378 716.21 660.559 716.119 cv
670.559 711.119 li
670.854 710.97 671.081 710.712 671.186 710.397 cv
675.73 696.764 li
678.878 698.337 li
675.995 701.85 674.544 706.446 675.132 711.141 cv
676.303 720.511 li
676.346 720.851 676.464 721.162 676.521 721.497 cv
669.602 723.817 li
669.233 723.939 668.943 724.227 668.818 724.596 cv
668.691 724.965 668.745 725.37 668.96 725.695 cv
678.391 739.842 li
669.116 749.117 li
668.628 749.606 668.628 750.397 669.116 750.885 cv
669.36 751.129 669.68 751.251 670 751.251 cv
670.32 751.251 670.639 751.129 670.883 750.885 cv
680.883 740.885 li
681.306 740.463 681.369 739.803 681.04 739.308 cv
671.945 725.668 li
677.062 723.951 li
679.888 734.009 689.078 741.251 699.799 741.251 cv
700.2 741.251 li
700.202 741.251 700.205 741.251 700.207 741.251 cv
700.208 741.251 700.208 741.25 700.209 741.25 cv
710.927 741.246 720.112 734.006 722.937 723.951 cv
728.054 725.668 li
718.96 739.308 li
718.63 739.803 718.694 740.463 719.116 740.885 cv
729.116 750.885 li
729.36 751.129 729.68 751.251 730 751.251 cv
730.32 751.251 730.639 751.129 730.883 750.885 cv
731.372 750.397 731.372 749.606 730.883 749.117 cv
721.609 739.842 li
731.04 725.695 li
731.255 725.37 731.308 724.965 731.181 724.596 cv
731.057 724.227 730.766 723.939 730.398 723.817 cv
723.478 721.497 li
723.535 721.162 723.654 720.851 723.696 720.511 cv
724.868 711.141 li
725.454 706.456 724.011 701.869 721.109 698.343 cv
724.27 696.764 li
728.813 710.397 li
cp
f
300 78.4363 mo
303.281 78.4363 306.172 77.0593 308.496 75.9509 cv
309.299 75.5676 310.031 75.216 310.678 74.9841 cv
311.328 74.7473 311.665 74.032 311.43 73.3825 cv
311.194 72.7331 310.476 72.4011 309.829 72.6306 cv
309.114 72.8894 308.305 73.2727 307.419 73.695 cv
305.324 74.6936 302.715 75.9363 300 75.9363 cv
297.285 75.9363 294.675 74.6936 292.58 73.695 cv
291.694 73.2727 290.886 72.8894 290.171 72.6306 cv
289.529 72.4035 288.806 72.7331 288.569 73.3825 cv
288.335 74.032 288.672 74.7473 289.321 74.9841 cv
289.968 75.216 290.7 75.5676 291.504 75.9509 cv
293.828 77.0593 296.719 78.4363 300 78.4363 cv
cp
f
296.896 148.19 mo
292.624 147.281 289.119 144.591 285.908 141.474 cv
285.868 141.436 285.829 141.393 285.79 141.354 cv
294.895 139.82 305.104 139.82 314.21 141.354 cv
314.17 141.393 314.131 141.436 314.091 141.475 cv
310.211 145.239 305.965 148.421 300.298 148.517 cv
299.11 148.537 297.978 148.421 296.896 148.19 cv
cp
286.25 71.195 mo
286.25 68.8611 286.719 68.4582 286.772 68.4192 cv
286.816 68.3825 287.107 68.2483 288.176 68.612 cv
288.896 68.8757 289.712 69.2663 290.608 69.6936 cv
293.178 70.9192 296.382 72.445 300 72.445 cv
303.618 72.445 306.821 70.9192 309.392 69.6936 cv
310.288 69.2663 311.103 68.8757 311.804 68.6194 cv
312.895 68.2458 313.178 68.385 313.227 68.4192 cv
313.281 68.4582 313.75 68.8611 313.75 71.195 cv
313.75 76.1865 311.553 80.7858 307.91 83.67 cv
305.256 82.8732 302.579 82.4353 300 82.4353 cv
297.412 82.4353 294.744 82.9007 292.096 83.6767 cv
288.449 80.7931 286.25 76.1899 286.25 71.195 cv
cp
298.377 57.536 mo
298.596 58.089 298.75 58.6682 298.75 59.259 cv
298.75 61.6174 297.068 63.5364 295 63.5364 cv
293.879 63.5364 292.875 62.9544 292.181 61.9931 cv
292.198 61.9665 292.208 61.9342 292.226 61.9079 cv
293.884 59.5334 296.068 58.0374 298.377 57.536 cv
cp
307.763 61.8957 mo
307.784 61.9269 307.796 61.9647 307.817 61.9958 cv
307.123 62.9559 306.12 63.5364 305 63.5364 cv
302.932 63.5364 301.25 61.6174 301.25 59.259 cv
301.25 58.6682 301.404 58.0884 301.622 57.5357 cv
303.931 58.0368 306.114 59.5309 307.763 61.8957 cv
cp
290.927 64.3246 mo
292.041 65.3869 293.467 66.0364 295 66.0364 cv
297.052 66.0364 298.86 64.9447 300 63.2843 cv
301.14 64.9447 302.947 66.0364 305 66.0364 cv
306.532 66.0364 307.958 65.3872 309.072 64.3249 cv
309.409 65.0891 309.659 65.9082 309.884 66.7444 cv
309.371 66.9696 308.893 67.1618 308.318 67.4353 cv
305.971 68.5534 303.054 69.945 300 69.945 cv
296.946 69.945 294.028 68.5534 291.682 67.4353 cv
291.11 67.1637 290.629 66.9705 290.115 66.745 cv
290.341 65.9076 290.591 65.0882 290.927 64.3246 cv
cp
311.296 105.32 mo
311.409 99.8514 313.484 94.7006 317.02 90.8914 cv
323.236 95.3653 327.961 102.001 328.63 109.513 cv
323.333 107.496 317.488 106.097 311.296 105.32 cv
cp
298.634 104.6 mo
296.111 104.637 293.616 104.749 291.171 104.985 cv
290.985 99.172 288.798 93.706 285.1 89.5523 cv
287.047 88.3536 289.082 87.3529 291.166 86.6092 cv
295.697 91.3135 298.35 97.7557 298.634 104.6 cv
cp
300 97.0553 mo
298.785 92.8692 296.695 89.0256 293.885 85.8163 cv
295.958 85.2923 298.025 84.9353 300 84.9353 cv
302.01 84.9353 304.083 85.2459 306.154 85.7736 cv
303.325 88.9914 301.22 92.85 300 97.0553 cv
cp
301.365 104.6 mo
301.65 97.7505 304.306 91.3025 308.843 86.5973 cv
310.932 87.3459 312.987 88.3117 314.937 89.5077 cv
311.215 93.6661 309.015 99.1516 308.828 104.985 cv
306.383 104.749 303.888 104.637 301.365 104.6 cv
cp
283.002 90.9195 mo
286.523 94.7262 288.591 99.8642 288.704 105.32 cv
282.517 106.096 276.677 107.494 271.384 109.508 cv
272.016 102.557 276.228 95.7876 283.002 90.9195 cv
cp
316.23 139.214 mo
305.865 137.249 294.136 137.249 283.771 139.214 cv
282.809 138.264 279.129 133.616 278.374 131.895 cv
285.075 130.074 292.34 129.147 300 129.147 cv
307.659 129.147 314.925 130.073 321.627 131.896 cv
321.153 132.659 318.718 136.781 316.23 139.214 cv
cp
322.958 129.703 mo
315.85 127.693 308.145 126.647 300 126.647 cv
291.855 126.647 284.149 127.693 277.041 129.703 cv
274.906 126.469 274.149 123.794 273.61 122.33 cv
281.527 119.558 290.617 118.094 300 118.094 cv
309.391 118.094 318.488 119.561 326.411 122.336 cv
326.134 123.102 324.906 126.75 322.958 129.703 cv
cp
327.185 120.012 mo
319.002 117.149 309.662 115.594 300 115.594 cv
290.337 115.594 280.996 117.148 272.813 120.012 cv
271.939 117.224 271.43 114.563 271.337 112.171 cv
279.688 108.834 289.554 107.04 300 107.04 cv
310.446 107.04 320.312 108.834 328.663 112.171 cv
328.57 114.558 328.061 117.217 327.185 120.012 cv
cp
350 104.54 mo
345.554 104.54 li
330.927 88.3728 li
330.583 87.9944 330.044 87.8503 329.568 88.0407 cv
329.568 88.0407 321.197 91.1249 321.196 91.125 cv
321.196 91.125 318.358 88.8821 318.041 88.6501 cv
316.47 87.5022 315.144 86.7309 313.404 85.8587 cv
325.1 84.9304 li
325.5 84.8987 325.862 84.6765 326.069 84.3298 cv
335.844 68.1262 li
350.432 62.7527 li
351.079 62.5158 351.411 61.7956 351.172 61.1487 cv
350.935 60.5017 350.205 60.1623 349.568 60.4089 cv
334.568 65.9338 li
334.302 66.0315 334.077 66.217 333.93 66.4612 cv
324.26 82.489 li
311.704 83.4872 li
314.569 80.2014 316.25 75.8441 316.25 71.195 cv
316.25 68.6438 315.766 67.1594 314.68 66.3855 cv
313.926 65.8484 313.052 65.824 312.243 65.954 cv
311.858 64.562 311.327 63.2586 310.664 62.0349 cv
323.514 59.2685 330.646 51.1719 330.952 50.8117 cv
331.399 50.2844 331.335 49.4958 330.81 49.049 cv
330.283 48.5998 329.494 48.6609 329.048 49.1907 cv
328.976 49.2746 321.868 57.4136 309.244 59.8044 cv
306.768 56.6531 303.465 54.8034 300 54.8034 cv
296.539 54.8034 293.241 56.6488 290.757 59.8047 cv
278.176 57.4209 271.021 49.2746 270.952 49.1907 cv
270.5 48.6657 269.709 48.6096 269.189 49.0515 cv
268.664 49.4983 268.601 50.2868 269.048 50.8117 cv
269.354 51.1719 276.485 59.2682 289.334 62.0346 cv
288.674 63.2544 288.143 64.5569 287.757 65.95 cv
286.954 65.8203 286.079 65.8444 285.32 66.3855 cv
284.233 67.1594 283.75 68.6438 283.75 71.195 cv
283.75 75.8441 285.43 80.2014 288.296 83.4872 cv
275.74 82.489 li
266.069 66.4612 li
265.923 66.217 265.698 66.0315 265.432 65.9338 cv
250.432 60.4089 li
249.79 60.1648 249.067 60.5017 248.828 61.1487 cv
248.589 61.7956 248.921 62.5158 249.568 62.7527 cv
264.155 68.1262 li
273.93 84.3298 li
274.138 84.6765 274.499 84.8987 274.9 84.9304 cv
286.499 85.8511 li
285.138 86.5353 283.798 87.3004 282.505 88.175 cv
281.156 89.0783 279.927 90.0735 278.755 91.1072 cv
270.432 88.0407 li
269.951 87.8601 269.414 87.9968 269.072 88.3728 cv
254.446 104.54 li
250 104.54 li
249.309 104.54 248.75 105.099 248.75 105.79 cv
248.75 106.481 249.309 107.04 250 107.04 cv
255 107.04 li
255.354 107.04 255.691 106.891 255.927 106.63 cv
270.361 90.6775 li
276.708 93.0154 li
271.72 98.204 268.865 104.574 268.773 110.999 cv
259.033 132.528 li
249.394 137.855 li
248.791 138.19 248.572 138.949 248.906 139.554 cv
249.133 139.967 249.56 140.199 250 140.199 cv
250.205 140.199 250.412 140.148 250.605 140.043 cv
260.605 134.515 li
260.84 134.386 261.028 134.183 261.137 133.937 cv
261.137 133.937 269.225 116.059 269.226 116.06 cv
270.642 124.331 274.677 132.054 279.96 138.509 cv
284.926 144.574 291.946 151.43 300.379 151.214 cv
305.531 151.082 310.208 148.161 314.08 144.759 cv
320.943 138.729 326.382 130.703 329.238 121.98 cv
329.942 119.95 330.437 117.968 330.774 116.057 cv
338.862 133.937 li
338.972 134.183 339.16 134.386 339.394 134.515 cv
349.394 140.043 li
349.587 140.148 349.795 140.199 350 140.199 cv
350.439 140.199 350.866 139.967 351.094 139.554 cv
351.428 138.949 351.208 138.19 350.605 137.855 cv
340.967 132.528 li
331.229 111.005 li
331.133 104.181 327.949 97.9397 323.216 93.0432 cv
329.638 90.6775 li
344.072 106.63 li
344.309 106.891 344.646 107.04 345 107.04 cv
350 107.04 li
350.691 107.04 351.25 106.481 351.25 105.79 cv
351.25 105.099 350.691 104.54 350 104.54 cv
cp
f
144.941 123.324 mo
135.888 125.465 116.157 119.523 111.118 109.442 cv
107.217 101.642 103.24 99.5276 101.25 98.9587 cv
101.25 96.6882 li
120.281 102.53 148.75 113.578 148.75 120.001 cv
148.75 121.61 147.468 122.728 144.941 123.324 cv
cp
99.9998 142.65 mo
98.325 130.97 98.3201 119.191 100.005 107.379 cv
101.684 119.108 101.682 130.922 99.9998 142.65 cv
cp
88.8816 109.442 mo
83.8425 119.528 64.1013 125.463 55.0584 123.324 cv
52.5315 122.728 51.2498 121.61 51.2498 120.001 cv
51.2498 113.578 79.719 102.53 98.7498 96.6882 cv
98.7498 98.9587 li
96.76 99.5276 92.783 101.642 88.8816 109.442 cv
cp
103.35 94.7238 mo
120.559 86.1194 li
120.754 86.0217 120.92 85.8752 121.04 85.6946 cv
141.04 55.6946 li
141.423 55.1208 141.267 54.3445 140.693 53.9612 cv
140.124 53.5779 139.345 53.7341 138.96 54.3078 cv
119.143 84.032 li
106.33 90.4382 li
110.884 85.885 li
111.074 85.6946 111.198 85.4455 111.238 85.177 cv
116.238 50.177 li
116.335 49.4934 115.859 48.8611 115.176 48.7634 cv
114.487 48.6877 113.86 49.1394 113.762 49.8254 cv
108.821 84.4128 li
101.25 91.9836 li
101.25 85.0012 li
101.25 84.3103 100.691 83.7512 99.9998 83.7512 cv
99.3088 83.7512 98.7498 84.3103 98.7498 85.0012 cv
98.7498 91.9836 li
91.179 84.4128 li
86.2376 49.8254 li
86.1399 49.1394 85.5027 48.6902 84.824 48.7634 cv
84.1404 48.8611 83.6643 49.4934 83.762 50.177 cv
88.762 85.177 li
88.801 85.4455 88.9255 85.6946 89.116 85.885 cv
93.6692 90.4382 li
80.8567 84.032 li
61.0398 54.3078 li
60.6541 53.7292 59.8728 53.5754 59.3064 53.9612 cv
58.7327 54.3445 58.5764 55.1208 58.9597 55.6946 cv
78.9597 85.6946 li
79.0794 85.8752 79.2454 86.0217 79.4407 86.1194 cv
96.6495 94.7238 li
84.0516 98.6499 48.7498 110.498 48.7498 120.001 cv
48.7498 121.647 49.4944 124.581 54.4822 125.758 cv
55.8567 126.083 57.4534 126.239 59.2014 126.239 cv
69.9045 126.239 86.2351 120.326 91.1179 110.56 cv
93.9597 104.878 96.7383 102.668 98.411 101.805 cv
98.133 103.304 97.8519 104.803 97.6279 106.305 cv
88.9597 119.308 li
88.823 119.513 88.7498 119.755 88.7498 120.001 cv
88.7498 129.484 li
69.116 149.117 li
68.6277 149.606 68.6277 150.397 69.116 150.885 cv
69.3601 151.129 69.6799 151.251 69.9998 151.251 cv
70.3196 151.251 70.6394 151.129 70.8836 150.885 cv
90.8836 130.885 li
91.1179 130.651 91.2498 130.333 91.2498 130.001 cv
91.2498 120.38 li
96.9382 111.847 li
95.6086 124.561 96.1948 137.347 98.7253 149.994 cv
98.7742 150.243 li
98.8889 150.826 99.426 151.127 100.022 151.127 cv
100.024 151.127 li
100.62 151.127 101.157 150.582 101.274 149.996 cv
103.798 137.379 104.389 124.624 103.052 111.833 cv
108.75 120.38 li
108.75 130.001 li
108.75 130.333 108.882 130.651 109.116 130.885 cv
129.116 150.885 li
129.36 151.129 129.68 151.251 130 151.251 cv
130.32 151.251 130.639 151.129 130.884 150.885 cv
131.372 150.397 131.372 149.606 130.884 149.117 cv
111.25 129.484 li
111.25 120.001 li
111.25 119.755 111.177 119.513 111.04 119.308 cv
102.357 106.283 li
102.135 104.791 101.858 103.298 101.584 101.806 cv
103.263 102.669 106.041 104.88 108.882 110.56 cv
113.764 120.326 130.095 126.239 140.798 126.239 cv
142.546 126.239 144.143 126.083 145.517 125.758 cv
150.505 124.581 151.25 121.647 151.25 120.001 cv
151.25 110.498 115.948 98.6499 103.35 94.7238 cv
cp
f
674.697 80.1111 mo
675.202 79.7449 675.796 79.5642 676.521 79.5642 cv
676.86 79.5642 677.226 79.6032 677.624 79.6814 cv
679.577 80.0354 682.043 81.2756 684.651 82.5891 cv
688.839 84.6982 693.566 86.9766 698.75 87.3205 cv
698.75 130.001 li
698.75 136.539 694.052 140.744 691.531 142.537 cv
678.093 138.325 671.25 123.361 671.25 97.9504 cv
671.25 93.988 671.43 90.5774 671.789 87.8113 cv
672.324 83.7097 673.303 81.1169 674.697 80.1111 cv
cp
683.96 61.8347 mo
685.527 59.7839 687.964 58.8659 690.503 59.3762 cv
698.215 60.9289 li
699.411 61.1584 700.581 61.156 701.797 60.9265 cv
709.499 59.3762 li
712.038 58.8659 714.477 59.7839 716.04 61.8347 cv
717.544 63.8034 717.791 66.2759 716.786 68.4988 cv
711.796 64.3847 705.553 63.7512 700 63.7512 cv
694.443 63.7512 688.196 64.3857 683.214 68.497 cv
682.212 66.2634 682.459 63.7982 683.96 61.8347 cv
cp
725.302 80.1111 mo
726.696 81.1169 727.675 83.7097 728.21 87.8113 cv
728.569 90.5774 728.75 93.988 728.75 97.9504 cv
728.75 104.867 728.235 111.097 727.221 116.466 cv
724.497 130.738 718.174 139.49 708.486 142.55 cv
705.97 140.765 701.25 136.555 701.25 130.001 cv
701.25 87.3205 li
706.434 86.9766 711.16 84.6982 715.349 82.5891 cv
717.956 81.2756 720.422 80.0354 722.387 79.6789 cv
723.637 79.4397 724.568 79.5788 725.302 80.1111 cv
cp
700 80.4016 mo
703.507 80.4016 705.945 81.3153 707.915 83.2522 cv
705.377 84.2334 702.728 84.9524 700 84.9524 cv
697.271 84.9524 694.622 84.2334 692.084 83.2522 cv
694.055 81.3153 696.493 80.4016 700 80.4016 cv
cp
686.023 79.3689 mo
689.109 74.9768 693.288 73.1018 700 73.1018 cv
706.711 73.1018 710.891 74.9768 713.999 79.4006 cv
714.176 79.638 714.339 79.9447 714.514 80.213 cv
714.416 80.2621 714.322 80.3082 714.223 80.3576 cv
712.996 80.9756 711.71 81.6018 710.396 82.2027 cv
707.124 78.4497 703.157 77.9016 700 77.9016 cv
696.842 77.9016 692.875 78.4497 689.604 82.2027 cv
688.289 81.6018 687.004 80.9756 685.776 80.3576 cv
685.678 80.3082 685.584 80.2627 685.486 80.2136 cv
685.668 79.9344 685.831 79.6258 686.023 79.3689 cv
cp
683.684 71.3855 mo
688.208 66.8615 694.47 66.2512 700 66.2512 cv
705.529 66.2512 711.792 66.8615 716.328 71.3977 cv
717.955 72.9837 719.272 75.1394 720.368 77.6312 cv
719.224 77.9944 718.017 78.5135 716.766 79.1095 cv
716.516 78.7094 716.273 78.2663 716.023 77.9333 cv
711.457 71.4343 705.061 70.6018 700 70.6018 cv
694.939 70.6018 688.542 71.4343 683.999 77.9016 cv
683.734 78.2559 683.49 78.7005 683.234 79.1098 cv
681.982 78.5132 680.775 77.9934 679.632 77.6309 cv
680.728 75.1382 682.046 72.9818 683.684 71.3855 cv
cp
694.628 143.25 mo
696.471 141.669 698.612 139.362 699.957 136.233 cv
699.973 136.234 699.983 136.251 700 136.251 cv
700.016 136.251 700.026 136.234 700.043 136.233 cv
701.387 139.361 703.528 141.667 705.37 143.248 cv
701.826 143.855 698.147 143.853 694.628 143.25 cv
cp
650 116.251 mo
650.456 116.251 650.898 115.997 651.118 115.56 cv
655.886 106.024 li
668.888 101.69 li
669.036 106.874 669.407 111.732 670.162 116.021 cv
664.441 118.883 li
663.916 119.144 663.645 119.735 663.786 120.304 cv
668.674 139.855 li
663.882 149.442 li
663.574 150.06 663.823 150.809 664.441 151.119 cv
664.621 151.21 664.812 151.251 665 151.251 cv
665.456 151.251 665.898 150.997 666.118 150.56 cv
671.118 140.56 li
671.252 140.294 671.284 139.987 671.213 139.698 cv
666.455 120.67 li
670.745 118.525 li
673.867 133.081 680.716 142.088 691.379 145.16 cv
691.404 145.167 691.43 145.168 691.455 145.175 cv
691.457 145.175 li
694.21 145.897 697.005 146.251 700 146.251 cv
703.022 146.251 705.842 145.895 708.65 145.153 cv
719.243 142.07 726.159 133.077 729.302 118.529 cv
733.545 120.668 li
728.786 139.698 li
728.716 139.987 728.747 140.294 728.882 140.56 cv
733.882 150.56 li
734.101 150.997 734.543 151.251 735 151.251 cv
735.188 151.251 735.378 151.21 735.559 151.119 cv
736.176 150.809 736.425 150.06 736.118 149.442 cv
731.325 139.855 li
736.213 120.304 li
736.355 119.738 736.084 119.147 735.561 118.885 cv
729.827 115.996 li
730.58 111.707 731.031 106.92 731.178 101.712 cv
744.113 106.024 li
748.882 115.56 li
749.101 115.997 749.543 116.251 750 116.251 cv
750.188 116.251 750.378 116.21 750.559 116.119 cv
751.176 115.809 751.425 115.06 751.118 114.442 cv
746.118 104.442 li
745.969 104.147 745.71 103.92 745.395 103.815 cv
731.228 99.0921 li
731.231 98.706 731.25 98.3407 731.25 97.9504 cv
731.25 94.3551 731.078 91.2741 730.788 88.6041 cv
740.305 86.2146 li
740.642 86.1291 740.927 85.907 741.096 85.6018 cv
741.262 85.2966 741.296 84.9353 741.186 84.6057 cv
736.528 70.6335 li
745.559 66.1194 li
746.176 65.8093 746.425 65.0598 746.118 64.4421 cv
745.808 63.8244 745.061 63.573 744.441 63.883 cv
734.441 68.883 li
733.884 69.1614 733.618 69.8059 733.813 70.3967 cv
738.388 84.1174 li
730.444 86.1108 li
729.751 82.0282 728.59 79.4012 726.767 78.0847 cv
725.697 77.3114 724.391 77.0941 722.923 77.196 cv
721.8 74.4806 720.374 72.1988 718.68 70.3665 cv
718.916 69.9133 li
720.495 66.781 720.156 63.1042 718.027 60.3161 cv
716.519 58.341 714.325 57.1618 711.964 56.8609 cv
713.219 53.5721 716.316 51.2512 720 51.2512 cv
720.691 51.2512 721.25 50.6921 721.25 50.0012 cv
721.25 49.3103 720.691 48.7512 720 48.7512 cv
714.905 48.7512 710.542 52.1414 709.226 56.9116 cv
709.152 56.9247 709.078 56.9098 709.004 56.925 cv
701.316 58.4729 li
700.417 58.6438 699.58 58.6462 698.696 58.4753 cv
690.998 56.925 li
690.923 56.9098 690.849 56.9247 690.773 56.9113 cv
689.458 52.1408 685.094 48.7512 680 48.7512 cv
679.309 48.7512 678.75 49.3103 678.75 50.0012 cv
678.75 50.6921 679.309 51.2512 680 51.2512 cv
683.683 51.2512 686.779 53.5714 688.035 56.8594 cv
685.669 57.1588 683.482 58.3389 681.972 60.3161 cv
679.843 63.1042 679.504 66.781 681.091 69.9304 cv
681.32 70.3686 li
679.622 72.2073 678.196 74.4873 677.075 77.1985 cv
675.604 77.0996 674.301 77.3111 673.232 78.0847 cv
671.41 79.4012 670.248 82.0282 669.556 86.1108 cv
661.611 84.1174 li
666.186 70.3967 li
666.382 69.8059 666.115 69.1614 665.559 68.883 cv
655.559 63.883 li
654.939 63.5779 654.192 63.8293 653.882 64.4421 cv
653.574 65.0598 653.823 65.8093 654.441 66.1194 cv
663.471 70.6335 li
658.813 84.6057 li
658.703 84.9353 658.737 85.2966 658.904 85.6018 cv
659.072 85.907 659.358 86.1291 659.695 86.2146 cv
669.211 88.6041 li
668.921 91.2741 668.75 94.3551 668.75 97.9504 cv
668.75 98.3493 668.788 98.6914 668.792 99.0854 cv
654.604 103.815 li
654.289 103.92 654.03 104.147 653.882 104.442 cv
648.882 114.442 li
648.574 115.06 648.823 115.809 649.441 116.119 cv
649.621 116.21 649.812 116.251 650 116.251 cv
cp
f
546.018 70.7702 mo
544.065 75.0036 541.853 79.801 541.853 83.4802 cv
541.853 84.7864 542.124 86.5417 542.439 88.5705 cv
543.022 92.3352 543.906 98.0237 542.246 99.2346 cv
541.577 99.7204 540.171 99.4739 538.274 98.5266 cv
531.632 95.2029 519.571 97.5738 510.656 100.131 cv
509.006 100.591 507.298 101.115 505.524 101.721 cv
504.546 102.046 503.633 102.358 502.86 102.632 cv
509.581 92.9208 534.966 80.5765 535.239 80.4455 cv
535.859 80.1452 536.12 79.3982 535.82 78.7756 cv
535.522 78.1555 534.775 77.8991 534.15 78.1946 cv
533.125 78.6896 512.643 88.6682 503.367 98.2223 cv
511.588 82.9617 542.084 63.1506 548.486 63.1506 cv
548.713 63.1506 li
549.133 64.0173 547.258 68.0798 546.018 70.7702 cv
cp
541.985 110.98 mo
546.125 119.259 539.846 126.815 520.993 136.241 cv
519.565 136.964 518.091 137.013 516.494 136.405 cv
511.986 134.692 507.749 128.352 504.872 123.069 cv
504.863 123.054 504.859 123.04 504.849 123.026 cv
502.914 119.467 501.593 116.39 501.25 115.563 cv
501.25 105.892 li
503.166 105.166 508.6 103.185 514.923 101.583 cv
532.441 97.7337 538.63 104.271 541.985 110.98 cv
cp
500.879 132.035 mo
500.737 132.692 500.171 132.743 500 132.743 cv
499.829 132.743 499.262 132.692 499.123 132.05 cv
497.496 123.96 li
498.536 122.036 499.381 120.291 500 118.939 cv
500.618 120.291 501.464 122.036 502.504 123.96 cv
500.879 132.035 li
cp
483.506 136.405 mo
481.906 137.008 480.432 136.959 479.006 136.241 cv
460.154 126.815 453.874 119.259 458.015 110.98 cv
460.678 105.651 465.124 100.428 475.608 100.428 cv
478.36 100.428 481.552 100.811 485.213 101.623 cv
489.092 102.61 492.644 103.74 495.243 104.632 cv
496.264 104.996 497.229 105.306 498.308 105.725 cv
498.496 105.795 498.603 105.836 498.75 105.892 cv
498.75 115.563 li
498.406 116.39 497.085 119.467 495.151 123.026 cv
495.141 123.04 495.136 123.054 495.127 123.069 cv
492.251 128.352 488.014 134.692 483.506 136.405 cv
cp
461.726 98.5266 mo
459.829 99.4739 458.423 99.718 457.754 99.2346 cv
456.094 98.0237 456.977 92.3352 457.561 88.5705 cv
457.876 86.5417 458.147 84.7864 458.147 83.4802 cv
458.147 79.801 455.935 75.0036 453.982 70.7702 cv
452.741 68.0798 450.866 64.0173 451.22 63.2165 cv
451.22 63.2165 451.296 63.1799 451.509 63.1799 cv
458.052 63.1799 489.784 83.8482 497.154 99.2288 cv
488.409 89.3823 466.451 78.7066 465.39 78.1946 cv
464.768 77.8943 464.018 78.1555 463.72 78.7756 cv
463.42 79.3982 463.681 80.1452 464.302 80.4455 cv
464.573 80.5755 489.596 92.7395 496.536 102.421 cv
495.957 102.219 495.281 101.994 494.604 101.768 cv
489.197 99.9144 483.643 98.4458 477.976 97.6549 cv
472.773 96.9289 466.609 96.085 461.726 98.5266 cv
cp
499.121 94.1955 mo
499.262 93.5388 499.829 93.4875 500 93.4875 cv
500.171 93.4875 500.737 93.5388 500.879 94.1882 cv
501.443 96.8438 li
500.872 97.8467 500.394 98.8284 500 99.7949 cv
499.608 98.8342 499.134 97.8589 498.568 96.8622 cv
499.121 94.1955 li
cp
548.491 60.6799 mo
541.588 60.6799 514.286 78.3389 503.355 93.8214 cv
503.325 93.6731 li
503.083 92.5525 502.343 91.7157 501.37 91.2958 cv
501.905 80.4394 505.375 73.9563 510.776 73.9563 cv
511.467 73.9563 512.026 73.3972 512.026 72.7063 cv
512.026 72.0154 511.467 71.4563 510.776 71.4563 cv
505.588 71.4563 501.819 75.6479 500 82.9745 cv
498.181 75.6479 494.412 71.4563 489.223 71.4563 cv
488.532 71.4563 487.973 72.0154 487.973 72.7063 cv
487.973 73.3972 488.532 73.9563 489.223 73.9563 cv
494.625 73.9563 498.095 80.44 498.63 91.2961 cv
497.657 91.7166 496.917 92.5546 496.675 93.6804 cv
496.646 93.8241 li
485.716 78.3417 458.412 60.6799 451.509 60.6799 cv
450.178 60.6799 449.507 61.2951 449.175 61.8103 cv
448.022 63.612 449.321 66.6321 451.711 71.8176 cv
453.557 75.8166 455.647 80.3503 455.647 83.4802 cv
455.647 84.5959 455.376 86.3391 455.09 88.1872 cv
454.294 93.324 453.391 99.1443 456.281 101.254 cv
457.802 102.367 459.948 102.206 462.844 100.763 cv
463.717 100.327 464.743 100.042 465.828 99.819 cv
461.542 101.728 458.204 105.014 455.779 109.862 cv
453.052 115.316 454.145 120.721 459.026 125.929 cv
462.773 129.93 468.769 133.917 477.888 138.478 cv
479.016 139.042 480.183 139.325 481.374 139.325 cv
482.365 139.325 483.374 139.13 484.394 138.741 cv
488.711 137.101 492.634 132.11 495.606 127.245 cv
496.675 132.557 li
497.021 134.164 498.357 135.243 500 135.243 cv
501.643 135.243 502.978 134.164 503.327 132.543 cv
504.393 127.245 li
507.365 132.11 511.289 137.101 515.605 138.741 cv
516.626 139.13 517.634 139.325 518.625 139.325 cv
519.817 139.325 520.984 139.042 522.112 138.478 cv
531.23 133.917 537.226 129.93 540.974 125.929 cv
545.854 120.721 546.948 115.316 544.221 109.862 cv
541.799 105.013 538.461 101.726 534.175 99.8166 cv
535.259 100.041 536.284 100.327 537.156 100.763 cv
540.049 102.211 542.197 102.364 543.718 101.254 cv
546.609 99.1443 545.705 93.324 544.909 88.1872 cv
544.624 86.3391 544.353 84.5959 544.353 83.4802 cv
544.353 80.3503 546.443 75.8166 548.288 71.8176 cv
550.678 66.6321 551.977 63.612 550.825 61.8103 cv
550.493 61.2951 549.822 60.6799 548.491 60.6799 cv
cp
f
492.058 107.245 mo
483.85 103.868 476.777 103.426 471.04 105.924 cv
464.214 108.9 461.885 114.947 461.789 115.201 cv
461.545 115.848 461.875 116.569 462.519 116.81 cv
462.666 116.866 462.812 116.891 462.959 116.891 cv
463.464 116.891 463.94 116.581 464.128 116.08 cv
464.15 116.027 466.174 110.773 472.038 108.217 cv
477.136 105.992 483.552 106.447 491.106 109.554 cv
491.745 109.83 492.475 109.518 492.737 108.876 cv
493 108.236 492.695 107.506 492.058 107.245 cv
cp
f
507.485 107.245 mo
506.848 107.506 506.543 108.236 506.806 108.876 cv
507.07 109.518 507.802 109.833 508.437 109.554 cv
515.976 106.459 522.373 106.002 527.463 108.199 cv
533.318 110.731 535.395 116.029 535.415 116.083 cv
535.605 116.581 536.081 116.888 536.584 116.888 cv
536.731 116.888 536.88 116.864 537.026 116.808 cv
537.671 116.564 537.995 115.848 537.754 115.201 cv
537.658 114.947 535.327 108.9 528.501 105.924 cv
522.761 103.426 515.686 103.868 507.485 107.245 cv
cp
f
900 61.4172 mo
901.404 61.4172 903.235 62.1911 903.779 64.3689 cv
903.779 64.3689 903.786 64.3933 903.794 64.425 cv
903.794 68.4231 li
902.611 68.2031 901.352 68.0603 900 68.0603 cv
898.649 68.0603 897.39 68.2028 896.208 68.4225 cv
896.22 64.3689 li
896.765 62.1911 898.596 61.4172 900 61.4172 cv
cp
911.042 136.119 mo
909.977 138.36 907.268 139.249 904.924 138.168 cv
903.641 137.576 902.439 137.278 901.25 137.125 cv
901.25 85.6897 li
904.748 85.6897 li
913.879 90.2563 li
913.879 128.126 li
913.879 130.367 912.19 133.705 911.042 136.119 cv
cp
895.073 138.168 mo
892.568 139.32 889.719 138.39 888.576 136.049 cv
887.334 133.492 886.12 130.773 886.12 128.129 cv
886.12 90.2563 li
895.251 85.6897 li
898.75 85.6897 li
898.75 137.126 li
897.56 137.279 896.357 137.576 895.073 138.168 cv
cp
895.334 83.1897 mo
893.657 82.0715 li
891.825 80.8493 890.85 78.9099 890.834 76.777 cv
891.777 76.8829 892.928 76.6717 894.362 76.3659 cv
895.952 76.0266 897.929 75.6042 900 75.6042 cv
902.07 75.6042 904.048 76.0266 905.637 76.3659 cv
906.843 76.6223 907.863 76.842 908.718 76.842 cv
908.88 76.842 909.015 76.802 909.165 76.7853 cv
909.147 78.9145 908.172 80.8508 906.342 82.0715 cv
904.665 83.1897 li
895.334 83.1897 li
cp
907.913 72.8003 mo
908.263 73.2669 908.546 73.7802 908.758 74.3387 cv
908.235 74.3521 907.051 74.1119 906.159 73.9197 cv
904.455 73.5559 902.334 73.1042 900 73.1042 cv
897.666 73.1042 895.544 73.5559 893.84 73.9197 cv
892.856 74.1327 891.556 74.3994 891.239 74.3542 cv
891.455 73.7842 891.746 73.2586 892.112 72.7813 cv
893.528 71.5637 896.429 70.5603 900 70.5603 cv
903.59 70.5603 906.506 71.5744 907.913 72.8003 cv
cp
869.741 115.948 mo
870.061 115.948 870.381 115.826 870.625 115.582 cv
871.113 115.094 871.113 114.303 870.625 113.815 cv
857.619 100.809 853.625 64.5544 864.048 54.1321 cv
866.85 51.3244 870.547 50.5676 875.051 51.8786 cv
880.348 53.4259 886.628 57.7978 893.706 64.8089 cv
893.706 64.8089 893.706 68.4429 893.706 68.4436 cv
893.706 68.4961 892.34 69.1731 892.184 69.2798 cv
891.665 69.6348 891.184 70.0441 890.749 70.4978 cv
889.883 71.4007 889.199 72.4818 888.777 73.6605 cv
887.852 76.2436 888.248 79.188 889.731 81.4817 cv
889.827 81.6303 889.928 81.7762 890.032 81.9192 cv
876.399 78.5095 li
881.013 64.6618 li
881.208 64.071 880.942 63.4265 880.385 63.1482 cv
870.3 58.1067 li
869.685 57.8015 868.935 58.0505 868.623 58.6657 cv
868.315 59.2834 868.564 60.0354 869.182 60.343 cv
878.298 64.8987 li
873.598 79.0002 li
873.488 79.3298 873.523 79.6911 873.689 79.9963 cv
873.857 80.3015 874.143 80.5237 874.482 80.6091 cv
891.374 84.833 li
884.311 88.3655 li
874.226 93.407 li
873.984 93.529 873.789 93.7243 873.667 93.966 cv
868.623 104.054 li
868.315 104.672 868.564 105.421 869.182 105.731 cv
869.362 105.822 869.553 105.863 869.741 105.863 cv
870.197 105.863 870.639 105.609 870.859 105.172 cv
875.717 95.4577 li
883.62 91.5063 li
883.62 113.926 li
874.226 118.624 li
873.701 118.885 873.43 119.476 873.571 120.045 cv
878.501 139.769 li
873.667 149.442 li
873.359 150.06 873.608 150.812 874.226 151.119 cv
874.406 151.21 874.597 151.251 874.785 151.251 cv
875.241 151.251 875.683 150.997 875.903 150.56 cv
880.945 140.475 li
881.079 140.209 881.111 139.901 881.04 139.613 cv
876.24 120.411 li
883.62 116.721 li
883.62 128.129 li
883.62 131.305 884.958 134.322 886.33 137.142 cv
887.573 139.698 890.122 141.168 892.844 141.168 cv
893.933 141.168 895.051 140.934 896.12 140.438 cv
898.928 139.144 901.071 139.144 903.879 140.438 cv
907.47 142.098 911.604 140.675 913.288 137.218 cv
913.691 136.4 li
915.012 133.722 916.379 130.951 916.379 128.126 cv
916.379 116.721 li
923.759 120.411 li
918.96 139.613 li
918.889 139.901 918.921 140.209 919.055 140.475 cv
924.096 150.56 li
924.316 150.997 924.758 151.251 925.215 151.251 cv
925.403 151.251 925.593 151.21 925.774 151.119 cv
926.391 150.812 926.64 150.06 926.333 149.442 cv
921.499 139.769 li
926.428 120.045 li
926.57 119.476 926.299 118.885 925.774 118.624 cv
916.379 113.926 li
916.379 91.5063 li
924.282 95.4577 li
929.14 105.172 li
929.36 105.609 929.802 105.863 930.258 105.863 cv
930.446 105.863 930.637 105.822 930.818 105.731 cv
931.435 105.421 931.684 104.672 931.377 104.054 cv
926.333 93.966 li
926.211 93.7243 926.015 93.529 925.774 93.407 cv
915.688 88.3655 li
908.625 84.833 li
925.517 80.6091 li
925.857 80.5237 926.142 80.3015 926.311 79.9963 cv
926.477 79.6911 926.511 79.3298 926.401 79.0002 cv
921.701 64.8987 li
930.818 60.343 li
931.435 60.0354 931.684 59.2834 931.377 58.6657 cv
931.064 58.0481 930.317 57.7966 929.699 58.1067 cv
919.614 63.1482 li
919.057 63.4265 918.791 64.071 918.987 64.6618 cv
923.601 78.5095 li
923.601 78.5095 909.97 81.9186 909.968 81.9192 cv
910.165 81.6696 910.727 80.7012 910.857 80.4295 cv
911.13 79.8561 911.344 79.2543 911.49 78.636 cv
911.756 77.5073 911.781 76.3147 911.617 75.1683 cv
911.189 72.1797 909.027 69.6528 906.294 68.4533 cv
906.294 64.8089 li
913.371 57.7978 919.651 53.4259 924.948 51.8786 cv
929.448 50.5676 933.147 51.3244 935.952 54.1321 cv
946.374 64.5544 942.38 100.809 929.375 113.815 cv
928.886 114.303 928.886 115.094 929.375 115.582 cv
929.619 115.826 929.939 115.948 930.258 115.948 cv
930.578 115.948 930.898 115.826 931.142 115.582 cv
945.166 101.559 949.101 63.7439 937.722 52.3645 cv
934.267 48.9099 929.607 47.9187 924.248 49.4787 cv
918.803 51.0696 912.485 55.39 905.503 62.1347 cv
904.392 60.1773 902.374 58.9172 900 58.9172 cv
897.658 58.9172 895.654 60.1416 894.509 62.1466 cv
887.521 55.3949 881.199 51.0705 875.752 49.4787 cv
870.393 47.9187 865.732 48.9099 862.278 52.3645 cv
850.898 63.7439 854.834 101.559 868.857 115.582 cv
869.101 115.826 869.421 115.948 869.741 115.948 cv
cp
f
896.03 88.8464 mo
895.678 88.2458 894.907 88.0554 894.319 88.4094 cv
889.277 91.4026 li
888.896 91.6272 888.664 92.0349 888.664 92.4768 cv
888.664 125.258 li
888.664 125.948 889.223 126.508 889.914 126.508 cv
890.605 126.508 891.164 125.948 891.164 125.258 cv
891.164 93.1872 li
895.593 90.5578 li
896.189 90.2063 896.384 89.4397 896.03 88.8464 cv
cp
f
905.681 88.4094 mo
905.085 88.0554 904.321 88.2458 903.969 88.8464 cv
903.615 89.4397 903.811 90.2063 904.406 90.5578 cv
908.835 93.1872 li
908.835 125.258 li
908.835 125.948 909.394 126.508 910.085 126.508 cv
910.776 126.508 911.335 125.948 911.335 125.258 cv
911.335 92.4768 li
911.335 92.0349 911.103 91.6272 910.722 91.4026 cv
905.681 88.4094 li
cp
f
907.456 898.27 mo
906.845 898.592 906.611 899.349 906.933 899.96 cv
909.746 905.282 911.135 909.772 911.013 911.014 cv
909.758 911.146 905.283 909.75 899.958 906.935 cv
899.353 906.615 898.591 906.844 898.269 907.457 cv
897.946 908.068 898.181 908.824 898.791 909.147 cv
900.984 910.306 907.292 913.463 910.842 913.463 cv
911.699 913.463 912.397 913.28 912.837 912.838 cv
915.102 910.577 910.583 901.515 909.145 898.793 cv
908.823 898.18 908.056 897.948 907.456 898.27 cv
cp
f
900 948.751 mo
887.009 948.751 875.218 943.611 866.471 935.298 cv
885.042 916.726 li
885.713 918.737 li
885.888 919.259 886.377 919.591 886.899 919.591 cv
887.031 919.591 887.163 919.571 887.295 919.528 cv
887.949 919.308 888.303 918.6 888.086 917.945 cv
887.02 914.748 li
892.399 909.369 li
894.404 910.977 896.506 912.441 898.75 913.682 cv
898.75 920.963 li
898.75 921.403 898.979 921.81 899.358 922.035 cv
911.596 929.379 li
909.294 936.288 li
909.077 936.942 909.431 937.65 910.085 937.87 cv
910.217 937.914 910.349 937.933 910.481 937.933 cv
911.003 937.933 911.491 937.601 911.667 937.079 cv
914.287 929.217 li
914.472 928.661 914.245 928.05 913.742 927.75 cv
901.25 920.255 li
901.25 914.962 li
905.313 916.854 909.269 917.916 912.251 917.916 cv
914.189 917.916 915.717 917.491 916.604 916.605 cv
918.852 914.357 918.106 907.959 914.983 901.251 cv
920.254 901.251 li
927.749 913.744 li
927.978 914.13 928.391 914.352 928.82 914.352 cv
928.952 914.352 929.087 914.332 929.216 914.288 cv
937.077 911.669 li
937.732 911.449 938.086 910.741 937.868 910.087 cv
937.651 909.432 936.943 909.083 936.286 909.296 cv
929.377 911.598 li
922.033 899.359 li
921.809 898.981 921.401 898.751 920.962 898.751 cv
913.68 898.751 li
912.441 896.508 910.976 894.405 909.368 892.401 cv
914.747 887.021 li
917.944 888.087 li
918.603 888.304 919.309 887.95 919.526 887.296 cv
919.743 886.642 919.389 885.934 918.735 885.714 cv
916.725 885.044 li
935.296 866.472 li
943.61 875.219 948.75 887.01 948.75 900.001 cv
948.75 926.881 926.88 948.751 900 948.751 cv
cp
906.125 888.639 mo
905.924 888.437 905.765 888.296 905.586 888.125 cv
910.576 885.631 li
912.096 886.138 li
907.731 890.502 li
907.182 889.891 906.708 889.222 906.125 888.639 cv
cp
897.377 887.432 mo
897.055 888.029 896.353 889.622 896.313 889.719 cv
893.334 887.555 890.269 887.008 888.635 888.636 cv
887.003 890.268 887.555 893.335 889.718 896.314 cv
889.62 896.355 888.023 897.058 887.43 897.378 cv
885.187 894.256 884.335 890.763 884.377 888.368 cv
884.377 886.698 884.773 885.555 885.163 885.165 cv
885.554 884.774 886.696 884.379 888.388 884.379 cv
890.75 884.343 894.254 885.193 897.377 887.432 cv
cp
891.986 895.223 mo
890.278 893.031 889.836 890.971 890.403 890.404 cv
890.967 889.835 893.028 890.281 895.221 891.988 cv
894.84 892.667 894.423 893.331 893.877 893.878 cv
893.329 894.424 892.666 894.842 891.986 895.223 cv
cp
879.922 883.398 mo
879.922 883.397 879.922 883.397 879.922 883.397 cv
878.965 882.44 878.965 880.882 879.922 879.923 cv
880.878 878.966 882.438 878.967 883.395 879.923 cv
883.395 879.923 883.396 879.923 883.396 879.924 cv
885.674 882.203 li
884.718 882.461 883.932 882.861 883.396 883.397 cv
882.857 883.935 882.467 884.729 882.211 885.685 cv
879.922 883.398 li
cp
885.63 910.577 mo
888.124 905.587 li
888.294 905.766 888.436 905.926 888.635 906.124 cv
889.219 906.708 889.889 907.183 890.501 907.732 cv
886.136 912.097 li
885.63 910.577 li
cp
892.268 905.965 mo
891.654 905.417 890.985 904.94 890.4 904.354 cv
889.748 903.705 889.238 903.151 888.801 902.555 cv
887.195 900.629 887.649 900.243 887.917 900.013 cv
888.396 899.586 889.36 899.183 890.383 898.758 cv
892.024 898.072 894.067 897.22 895.644 895.646 cv
897.219 894.069 898.071 892.025 898.757 890.384 cv
899.182 889.362 899.585 888.397 900.034 887.892 cv
900.122 887.789 900.244 887.645 900.508 887.645 cv
900.864 887.645 901.477 887.904 902.617 888.854 cv
903.149 889.239 903.703 889.75 904.353 890.402 cv
904.355 890.404 904.355 890.404 904.355 890.404 cv
904.939 890.988 905.416 891.656 905.963 892.27 cv
892.268 905.965 li
cp
911.889 900.585 mo
915.849 908.077 915.913 913.761 914.836 914.838 cv
913.769 915.917 908.081 915.853 900.586 911.893 cv
898.307 910.685 896.193 909.206 894.167 907.602 cv
907.6 894.168 li
909.204 896.193 910.682 898.307 911.889 900.585 cv
cp
900 851.251 mo
912.99 851.251 924.781 856.391 933.529 864.705 cv
914.073 884.16 li
910.876 883.094 li
910.564 882.997 910.222 883.016 909.922 883.163 cv
903.504 886.37 li
902.426 885.561 900.625 884.51 898.998 885.508 cv
898.574 885.196 898.152 884.881 897.703 884.606 cv
898.564 882.062 li
898.652 881.803 898.652 881.525 898.567 881.266 cv
896.079 873.8 li
898.567 866.337 li
898.784 865.682 898.43 864.974 897.776 864.755 cv
897.131 864.545 896.418 864.894 896.194 865.546 cv
893.574 873.404 li
893.488 873.661 893.488 873.939 893.574 874.195 cv
896.062 881.659 li
895.454 883.454 li
893.326 882.514 891.083 881.951 888.911 881.906 cv
885.529 878.522 li
885.529 868.561 li
885.529 868.229 885.398 867.911 885.163 867.677 cv
879.922 862.435 li
879.433 861.947 878.642 861.947 878.154 862.435 cv
877.666 862.924 877.666 863.715 878.154 864.203 cv
883.029 869.078 li
883.029 876.974 li
881.351 876.49 879.475 876.837 878.154 878.155 cv
876.834 879.477 876.487 881.352 876.972 883.031 cv
869.077 883.031 li
864.201 878.155 li
863.713 877.667 862.922 877.667 862.434 878.155 cv
861.945 878.644 861.945 879.435 862.434 879.923 cv
867.675 885.165 li
867.91 885.399 868.227 885.531 868.559 885.531 cv
878.521 885.531 li
881.926 888.935 li
881.976 891.106 882.522 893.336 883.457 895.454 cv
881.657 896.063 li
874.194 893.575 li
873.935 893.492 873.662 893.492 873.403 893.575 cv
865.544 896.195 li
864.89 896.415 864.536 897.123 864.753 897.777 cv
864.929 898.299 865.417 898.632 865.94 898.632 cv
866.071 898.632 866.203 898.612 866.335 898.568 cv
873.799 896.08 li
881.264 898.568 li
881.523 898.651 881.801 898.654 882.06 898.566 cv
884.609 897.703 li
884.886 898.155 885.2 898.581 885.514 899.007 cv
884.509 900.662 885.584 902.473 886.368 903.508 cv
883.161 909.923 li
883.012 910.221 882.988 910.563 883.093 910.878 cv
884.159 914.075 li
864.703 933.53 li
856.39 924.783 851.25 912.992 851.25 900.001 cv
851.25 873.121 873.12 851.251 900 851.251 cv
cp
936.25 863.809 mo
936.239 863.798 936.244 863.78 936.233 863.768 cv
936.221 863.757 936.203 863.762 936.191 863.751 cv
926.913 854.488 914.114 848.751 900 848.751 cv
871.74 848.751 848.75 871.742 848.75 900.001 cv
848.75 914.116 854.487 926.915 863.75 936.193 cv
863.761 936.204 863.755 936.223 863.767 936.234 cv
863.778 936.245 863.796 936.24 863.808 936.251 cv
873.086 945.514 885.885 951.251 900 951.251 cv
928.259 951.251 951.25 928.26 951.25 900.001 cv
951.25 885.886 945.513 873.087 936.25 863.809 cv
cp
f
106.992 906.988 mo
112.146 911.107 116.799 915.763 120.918 920.919 cv
115.781 916.815 111.133 912.169 106.992 906.988 cv
cp
99.9998 948.751 mo
87.009 948.751 75.218 943.611 66.4707 935.298 cv
91.6367 910.132 li
86.7884 920.571 81.5858 934.065 85.1707 937.65 cv
85.7127 938.192 86.6502 938.841 88.0247 938.841 cv
88.9548 938.841 90.0877 938.544 91.4329 937.714 cv
97.656 933.866 105.381 919.799 102.453 911.014 cv
101.25 907.405 101.284 905.125 101.553 903.769 cv
101.981 904.381 102.439 904.964 102.881 905.564 cv
105.112 916.727 li
105.161 916.969 105.278 917.194 105.454 917.367 cv
110.158 922.071 li
110.158 941.837 li
110.158 942.528 110.718 943.087 111.408 943.087 cv
112.099 943.087 112.658 942.528 112.658 941.837 cv
112.658 921.554 li
112.658 921.222 112.527 920.904 112.292 920.67 cv
107.49 915.868 li
106.333 910.081 li
111.938 916.789 118.429 922.664 125.771 927.557 cv
125.771 927.557 126.321 927.848 126.526 927.848 cv
126.86 927.848 127.192 927.696 127.453 927.435 cv
127.876 927.015 127.893 926.278 127.561 925.78 cv
122.674 918.448 116.809 911.967 110.06 906.33 cv
115.866 907.491 li
120.669 912.294 li
120.903 912.528 121.22 912.66 121.552 912.66 cv
141.836 912.66 li
142.527 912.66 143.086 912.101 143.086 911.41 cv
143.086 910.719 142.527 910.16 141.836 910.16 cv
122.07 910.16 li
117.365 905.455 li
117.192 905.279 116.968 905.162 116.726 905.113 cv
105.548 902.879 li
104.951 902.439 104.369 901.985 103.759 901.558 cv
105.118 901.284 107.399 901.248 111.013 902.455 cv
112.334 902.894 113.772 903.094 115.278 903.094 cv
123.794 903.092 134.443 896.72 137.712 891.434 cv
139.773 888.099 138.557 886.08 137.649 885.172 cv
134.067 881.584 120.572 886.787 110.132 891.637 cv
135.296 866.472 li
143.61 875.219 148.75 887.01 148.75 900.001 cv
148.75 926.881 126.88 948.751 99.9998 948.751 cv
cp
104.739 897.03 mo
117.556 890.602 133.223 884.281 135.881 886.94 cv
136.565 887.623 136.465 888.695 135.586 890.118 cv
132.136 895.699 119.316 902.589 111.804 900.082 cv
109.143 899.195 107.033 898.89 105.388 898.89 cv
104.104 898.89 103.192 899.094 102.432 899.336 cv
104.739 897.03 li
cp
99.3207 902.448 mo
98.7748 904.185 98.5117 907.1 100.08 911.805 cv
102.593 919.34 95.698 932.137 90.117 935.587 cv
88.6936 936.468 87.617 936.564 86.9382 935.883 cv
84.2841 933.228 90.604 917.558 97.0301 904.738 cv
99.3207 902.448 li
cp
99.9998 851.251 mo
112.99 851.251 124.782 856.391 133.529 864.705 cv
103.275 894.959 li
102.401 895.4 101.621 895.802 100.904 896.174 cv
104.99 883.915 li
105.058 883.707 105.073 883.487 105.029 883.275 cv
99.9583 857.921 li
99.8215 857.24 99.1404 856.8 98.4885 856.94 cv
97.8098 857.074 97.3704 857.733 97.5071 858.409 cv
102.512 883.439 li
99.9827 891.028 li
99.9827 888.592 li
99.9827 888.321 99.8948 888.058 99.7337 887.843 cv
84.5188 867.557 li
84.1038 867.006 83.3201 866.891 82.7683 867.306 cv
82.2166 867.721 82.1043 868.505 82.5169 869.056 cv
97.4827 889.01 li
97.4827 895.716 li
94.5457 892.779 li
94.0574 892.291 93.2664 892.291 92.7781 892.779 cv
92.2898 893.268 92.2898 894.059 92.7781 894.547 cv
95.7151 897.484 li
89.0086 897.484 li
69.0549 882.518 li
68.5105 882.108 67.7219 882.218 67.3045 882.77 cv
66.8919 883.321 67.0042 884.105 67.5559 884.52 cv
87.8416 899.735 li
88.0564 899.896 88.3201 899.984 88.5911 899.984 cv
91.0264 899.984 li
83.4373 902.513 li
58.408 897.508 li
57.761 897.362 57.075 897.809 56.9382 898.49 cv
56.8015 899.166 57.241 899.825 57.9197 899.96 cv
83.2737 905.03 li
83.3543 905.048 83.4348 905.055 83.5178 905.055 cv
83.6521 905.055 83.7839 905.033 83.9133 904.991 cv
96.1726 900.906 li
95.8005 901.622 95.3989 902.403 94.9576 903.276 cv
64.7031 933.53 li
56.3898 924.783 51.2498 912.992 51.2498 900.001 cv
51.2498 873.121 73.1199 851.251 99.9998 851.251 cv
cp
136.233 863.768 mo
136.221 863.757 136.203 863.762 136.191 863.751 cv
126.914 854.488 114.114 848.751 99.9998 848.751 cv
71.7405 848.751 48.7498 871.742 48.7498 900.001 cv
48.7498 914.116 54.4868 926.915 63.7498 936.193 cv
63.7607 936.204 63.7556 936.223 63.7669 936.234 cv
63.7781 936.245 63.7965 936.24 63.8081 936.251 cv
73.086 945.514 85.8851 951.251 99.9998 951.251 cv
128.259 951.251 151.25 928.26 151.25 900.001 cv
151.25 885.886 145.513 873.087 136.25 863.809 cv
136.239 863.798 136.244 863.78 136.233 863.768 cv
cp
f
300 948.751 mo
287.009 948.751 275.218 943.611 266.471 935.298 cv
280.633 921.135 li
281.99 927.183 284.059 932.754 287.248 935.956 cv
289.194 937.906 291.44 938.898 293.928 938.898 cv
299.515 938.898 303.18 930.644 304.109 922.278 cv
307.251 923.849 li
307.251 927.931 li
307.251 928.622 307.81 929.181 308.501 929.181 cv
309.192 929.181 309.751 928.622 309.751 927.931 cv
309.751 923.075 li
309.751 922.601 309.482 922.169 309.06 921.957 cv
304.323 919.589 li
304.437 916.594 304.196 913.838 303.607 911.464 cv
303.646 911.464 303.691 911.473 303.73 911.473 cv
306.074 911.473 308.005 910.765 309.385 909.386 cv
310.799 907.972 311.469 905.955 311.432 903.527 cv
313.449 904.038 315.667 904.376 318.164 904.376 cv
318.63 904.376 319.114 904.351 319.592 904.333 cv
321.955 909.061 li
322.168 909.484 322.6 909.752 323.073 909.752 cv
327.929 909.752 li
328.62 909.752 329.179 909.193 329.179 908.502 cv
329.179 907.811 328.62 907.252 327.929 907.252 cv
323.847 907.252 li
322.277 904.111 li
330.641 903.182 338.896 899.517 338.896 893.929 cv
338.896 891.442 337.905 889.195 335.952 887.25 cv
332.751 884.061 327.186 881.985 321.14 880.629 cv
335.296 866.472 li
343.61 875.219 348.75 887.01 348.75 900.001 cv
348.75 926.881 326.88 948.751 300 948.751 cv
cp
304.787 893.446 mo
304.668 892.537 304.298 891.719 303.562 891.117 cv
300.801 888.852 294.153 889.765 291.918 890.152 cv
290.783 889.017 li
292.389 887.542 295.02 883.563 295.824 880.596 cv
298.914 880.588 307.531 880.788 316.054 882.18 cv
304.787 893.446 li
cp
296.384 905.384 mo
298.299 906.146 299.773 907.832 300.742 910.499 cv
301.667 913.107 302.038 916.488 301.811 920.277 cv
301.279 928.866 297.595 936.398 293.928 936.398 cv
292.104 936.398 290.5 935.675 289.018 934.191 cv
285.926 931.086 283.981 925.262 282.743 919.026 cv
296.384 905.384 li
cp
280.608 895.885 mo
282.67 895.294 287.282 892.635 289.016 890.785 cv
290.151 891.919 li
289.764 894.156 288.856 900.806 291.115 903.563 cv
291.718 904.3 292.535 904.67 293.445 904.789 cv
282.203 916.031 li
280.837 907.583 280.63 899.038 280.608 895.885 cv
cp
293.928 902.394 mo
293.552 902.394 293.288 902.269 293.049 901.979 cv
291.778 900.431 292.054 895.716 292.578 892.58 cv
295.713 892.055 300.425 891.78 301.977 893.05 cv
302.268 893.29 302.392 893.551 302.392 893.929 cv
302.392 894.52 302.555 895.036 302.65 895.583 cv
295.582 902.652 li
295.035 902.556 294.518 902.394 293.928 902.394 cv
cp
289.211 878.236 mo
290.547 878.973 li
291.304 879.395 292.294 879.853 293.351 880.2 cv
293.062 882.333 289.69 886.686 288.186 888.187 cv
286.684 889.691 282.791 892.625 280.121 893.368 cv
279.674 892.155 279.107 890.84 278.598 889.867 cv
278.213 889.174 li
277.649 888.252 277.03 887.512 276.38 886.86 cv
277.971 881.881 281.882 877.97 286.861 876.38 cv
287.525 877.04 288.269 877.661 289.211 878.236 cv
cp
277.612 870.892 mo
280.666 870.892 li
280.791 870.892 281.019 870.892 281.019 870.892 cv
281.019 870.971 280.964 871.125 280.901 871.188 cv
280.046 872.042 278.662 872.04 277.812 871.19 cv
277.724 871.102 277.682 870.99 277.612 870.892 cv
cp
272.951 876.041 mo
272.399 875.49 271.718 875.159 270.989 874.935 cv
271.224 872.844 272.842 871.225 274.934 870.991 cv
275.158 871.719 275.49 872.401 276.042 872.955 cv
276.955 873.868 278.156 874.325 279.355 874.325 cv
280.554 874.325 281.755 873.868 282.668 872.955 cv
282.978 872.646 283.206 872.275 283.414 871.898 cv
283.922 872.305 284.809 873.654 284.809 873.654 cv
284.917 873.878 285.092 874.048 285.218 874.262 cv
280.167 876.156 276.155 880.167 274.261 885.218 cv
274.023 885.078 273.82 884.902 273.572 884.776 cv
272.912 884.44 272.362 883.994 271.898 883.415 cv
272.275 883.207 272.644 882.979 272.954 882.67 cv
274.78 880.843 274.78 877.87 272.951 876.041 cv
cp
271.186 880.902 mo
271.123 880.965 270.989 881.006 270.891 881.013 cv
270.882 880.891 270.891 877.613 270.891 877.613 cv
270.987 877.682 271.099 877.724 271.186 877.811 cv
272.038 878.663 272.038 880.05 271.186 880.902 cv
cp
307.617 907.618 mo
306.303 908.934 304.336 909.066 302.72 908.901 cv
301.652 906.376 300.121 904.603 298.209 903.56 cv
303.558 898.21 li
304.602 900.122 306.375 901.652 308.898 902.721 cv
309.061 904.338 308.929 906.306 307.617 907.618 cv
cp
320.276 901.813 mo
320.276 901.813 li
316.49 902.042 313.114 901.67 310.506 900.746 cv
310.505 900.746 li
307.832 899.775 306.145 898.301 305.383 896.385 cv
319.049 882.72 li
325.278 883.968 331.088 885.933 334.189 889.02 cv
335.674 890.502 336.396 892.106 336.396 893.929 cv
336.396 897.596 328.865 901.28 320.276 901.813 cv
cp
300 851.251 mo
312.99 851.251 324.782 856.391 333.529 864.705 cv
318.201 880.032 li
308.702 878.283 298.765 878.127 295.28 878.127 cv
295.23 878.127 292.722 877.323 291.765 876.788 cv
291.336 876.552 li
292.685 872.462 li
292.79 872.15 292.763 871.808 292.617 871.512 cv
287.761 861.796 li
287.451 861.178 286.699 860.924 286.084 861.237 cv
285.466 861.544 285.217 862.296 285.525 862.914 cv
290.151 872.169 li
289.167 875.151 li
288.763 874.815 288.402 874.46 288.076 874.073 cv
287.037 872.923 286.655 871.423 285.436 870.34 cv
284.139 869.187 282.419 868.392 280.666 868.392 cv
280.666 868.392 275.245 868.415 275.156 868.419 cv
274.582 867.569 274.631 866.42 275.381 865.668 cv
275.869 865.179 275.869 864.386 275.381 863.9 cv
274.892 863.412 274.101 863.412 273.613 863.9 cv
272.24 865.275 271.905 867.298 272.598 868.994 cv
270.992 869.702 269.702 870.992 268.993 872.599 cv
267.297 871.904 265.273 872.24 263.899 873.614 cv
263.41 874.1 263.41 874.894 263.899 875.382 cv
264.387 875.87 265.178 875.87 265.666 875.382 cv
266.416 874.632 267.568 874.583 268.417 875.157 cv
268.414 875.247 267.862 881.459 269.453 884.181 cv
270.846 886.566 273.36 887.249 275.028 889.209 cv
272.168 890.153 li
262.912 885.526 li
262.295 885.221 261.545 885.47 261.235 886.085 cv
260.927 886.703 261.177 887.455 261.794 887.762 cv
271.511 892.618 li
271.687 892.706 271.877 892.75 272.07 892.75 cv
272.202 892.75 272.334 892.728 272.461 892.687 cv
276.535 891.342 li
277.115 892.487 277.783 894.022 278.106 895.113 cv
278.099 898.398 278.251 908.507 280.036 918.198 cv
264.703 933.53 li
256.39 924.783 251.25 912.992 251.25 900.001 cv
251.25 873.121 273.12 851.251 300 851.251 cv
cp
336.233 863.768 mo
336.221 863.757 336.203 863.762 336.191 863.751 cv
326.914 854.488 314.114 848.751 300 848.751 cv
271.74 848.751 248.75 871.742 248.75 900.001 cv
248.75 914.116 254.487 926.915 263.75 936.193 cv
263.761 936.204 263.756 936.223 263.767 936.234 cv
263.778 936.245 263.796 936.24 263.808 936.251 cv
273.086 945.514 285.885 951.251 300 951.251 cv
328.259 951.251 351.25 928.26 351.25 900.001 cv
351.25 885.886 345.513 873.087 336.25 863.809 cv
336.239 863.798 336.244 863.78 336.233 863.768 cv
cp
f
483.769 895.36 mo
484.438 895.182 484.834 894.498 484.658 893.832 cv
484.48 893.163 483.803 892.76 483.13 892.943 cv
482.71 893.046 li
480.586 893.522 479.172 895.494 479.421 897.631 cv
479.497 898.265 480.036 898.734 480.661 898.734 cv
480.71 898.734 480.759 898.732 480.81 898.727 cv
481.494 898.646 481.985 898.024 481.906 897.338 cv
481.806 896.49 482.4 895.677 483.249 895.485 cv
483.769 895.36 li
cp
f
493.825 884.667 mo
493.923 884.691 494.023 884.703 494.118 884.703 cv
494.685 884.703 495.205 884.305 495.346 883.734 cv
495.456 883.285 li
495.613 882.584 496.186 882.045 496.882 881.94 cv
497.566 881.837 498.034 881.202 497.932 880.519 cv
497.829 879.835 497.187 879.374 496.511 879.469 cv
494.802 879.725 493.396 881.039 493.015 882.745 cv
492.91 883.175 li
492.744 883.844 493.156 884.498 493.825 884.667 cv
cp
f
494.76 889.252 mo
494.658 889.676 li
494.487 890.345 494.892 891.027 495.561 891.195 cv
495.664 891.222 495.769 891.234 495.869 891.234 cv
496.428 891.234 496.936 890.858 497.08 890.292 cv
497.202 889.791 li
497.358 889.093 497.929 888.553 498.625 888.448 cv
499.309 888.348 499.78 887.714 499.677 887.03 cv
499.577 886.349 498.933 885.873 498.259 885.978 cv
496.548 886.229 495.144 887.543 494.76 889.252 cv
cp
f
486.175 897.56 mo
486.072 897.984 li
485.902 898.653 486.307 899.335 486.976 899.503 cv
487.078 899.53 487.183 899.542 487.283 899.542 cv
487.842 899.542 488.35 899.166 488.494 898.6 cv
488.616 898.099 li
488.773 897.401 489.344 896.861 490.04 896.756 cv
490.723 896.656 491.195 896.022 491.092 895.338 cv
490.992 894.657 490.347 894.181 489.674 894.286 cv
487.962 894.537 486.558 895.851 486.175 897.56 cv
cp
f
500 948.751 mo
487.009 948.751 475.218 943.611 466.471 935.298 cv
484.373 917.396 li
485.935 921.256 li
483.252 929.303 li
483.034 929.957 483.388 930.665 484.043 930.885 cv
484.175 930.929 484.306 930.948 484.438 930.948 cv
484.961 930.948 485.449 930.616 485.625 930.094 cv
488.452 921.61 li
488.545 921.327 488.535 921.022 488.425 920.746 cv
486.822 916.782 li
488.739 918.564 490.752 920.117 492.827 921.437 cv
492.853 921.46 508.833 933.299 508.833 933.299 cv
511.535 941.41 li
511.711 941.932 512.199 942.264 512.722 942.264 cv
512.854 942.264 512.986 942.245 513.117 942.201 cv
513.772 941.981 514.126 941.273 513.908 940.619 cv
511.081 932.133 li
510.998 931.888 510.844 931.676 510.637 931.522 cv
503.124 925.977 li
525.333 930.375 528.999 912.833 525.824 902.908 cv
531.526 910.631 li
531.679 910.839 531.892 910.992 532.136 911.075 cv
540.622 913.905 li
540.754 913.949 540.886 913.968 541.018 913.968 cv
541.54 913.968 542.029 913.636 542.204 913.114 cv
542.422 912.46 542.068 911.752 541.413 911.532 cv
533.303 908.829 li
533.303 908.829 518.446 888.673 516.67 886.771 cv
520.749 888.422 li
520.898 888.483 521.059 888.512 521.218 888.512 cv
521.352 888.512 521.484 888.49 521.614 888.448 cv
530.1 885.621 li
530.754 885.402 531.108 884.694 530.891 884.039 cv
530.671 883.385 529.97 883.031 529.309 883.248 cv
521.26 885.931 li
517.4 884.369 li
535.296 866.472 li
543.61 875.219 548.75 887.01 548.75 900.001 cv
548.75 926.881 526.88 948.751 500 948.751 cv
cp
517.927 922.104 mo
513.098 918.924 li
507.112 914.987 501.941 909.819 497.838 903.931 cv
503.924 897.845 li
509.81 901.948 514.979 907.121 518.918 913.107 cv
522.096 917.935 li
521.574 918.78 521.038 919.617 520.324 920.331 cv
519.61 921.045 518.772 921.582 517.927 922.104 cv
cp
495.705 900.795 mo
494.529 898.834 li
495.32 898.225 496.097 897.578 496.833 896.842 cv
497.57 896.105 498.218 895.326 498.827 894.535 cv
500.788 895.712 li
501.145 895.926 501.468 896.191 501.82 896.414 cv
496.407 901.826 li
496.185 901.475 495.919 901.151 495.705 900.795 cv
cp
488.987 905.428 mo
487.585 903.225 li
488.023 902.966 488.453 902.709 488.921 902.44 cv
490.063 901.784 491.275 901.075 492.485 900.285 cv
493.562 902.079 li
493.882 902.612 494.274 903.099 494.611 903.622 cv
490.595 907.638 li
490.068 906.894 489.477 906.198 488.987 905.428 cv
cp
485.921 912.312 mo
484.086 910.198 483.194 908.492 483.357 907.267 cv
483.484 906.302 484.317 905.439 485.486 904.585 cv
486.877 906.771 li
487.466 907.696 488.17 908.536 488.809 909.425 cv
485.921 912.312 li
cp
503.616 894.618 mo
503.093 894.28 502.606 893.888 502.073 893.568 cv
500.278 892.492 li
501.068 891.282 501.777 890.071 502.434 888.929 cv
502.703 888.462 502.959 888.032 503.219 887.593 cv
505.42 888.995 li
506.19 889.485 506.885 890.077 507.63 890.603 cv
503.616 894.618 li
cp
523.332 915.261 mo
521.008 911.732 li
516.977 905.606 511.714 900.294 505.72 896.049 cv
509.677 892.092 li
515.597 896.691 520.626 902.4 524.311 908.945 cv
524.379 911.214 524.018 913.318 523.332 915.261 cv
cp
512.311 885.923 mo
509.417 888.817 li
508.527 888.178 507.687 887.474 506.762 886.886 cv
504.578 885.494 li
505.432 884.325 506.295 883.491 507.26 883.363 cv
507.358 883.351 507.461 883.343 507.566 883.343 cv
508.763 883.343 510.362 884.23 512.311 885.923 cv
cp
481.531 883.672 mo
481.817 884.508 481.648 885.467 480.981 886.134 cv
480.618 886.496 480.158 886.677 479.67 886.747 cv
480.017 885.752 480.705 884.696 481.531 883.672 cv
cp
489.279 881.903 mo
489.227 882.023 489.196 882.153 489.141 882.271 cv
488.982 882.699 488.73 883.145 488.476 883.59 cv
487.875 884.594 487.211 885.561 486.382 886.39 cv
485.552 887.22 484.583 887.885 483.578 888.486 cv
483.136 888.737 482.695 888.987 482.27 889.145 cv
482.149 889.202 482.016 889.233 481.893 889.286 cv
480.907 889.588 480.114 889.575 479.725 889.237 cv
480.849 889.143 481.928 888.723 482.749 887.902 cv
483.785 886.865 484.207 885.482 484.117 884.123 cv
484.226 884.13 484.329 884.186 484.438 884.186 cv
485.691 884.186 486.943 883.707 487.895 882.755 cv
488.71 881.94 489.143 880.879 489.243 879.768 cv
489.558 880.164 489.573 880.939 489.279 881.903 cv
cp
486.739 879.678 mo
486.667 880.167 486.486 880.629 486.128 880.987 cv
485.474 881.645 484.529 881.818 483.679 881.527 cv
484.699 880.707 485.748 880.025 486.739 879.678 cv
cp
482.492 903.361 mo
480.163 901.029 478.728 898.053 478.34 894.755 cv
478.23 893.82 478.884 892.921 479.829 892.709 cv
481.724 892.283 483.489 891.518 485.103 890.519 cv
485.515 890.27 485.925 890.036 486.336 889.727 cv
486.976 889.249 487.582 888.725 488.149 888.158 cv
488.856 887.451 489.469 886.667 490.037 885.849 cv
490.188 885.629 490.32 885.418 490.456 885.196 cv
491.484 883.56 492.268 881.764 492.702 879.835 cv
492.912 878.888 493.835 878.221 494.746 878.348 cv
498.047 878.734 501.023 880.17 503.354 882.501 cv
503.445 882.592 503.527 882.694 503.616 882.789 cv
502.411 884.049 501.369 885.763 500.266 887.682 cv
498.877 890.099 497.302 892.838 495.066 895.074 cv
492.829 897.311 490.09 898.885 487.676 900.272 cv
485.756 901.376 484.042 902.418 482.782 903.623 cv
482.687 903.534 482.584 903.452 482.492 903.361 cv
cp
487.636 914.132 mo
490.298 911.471 li
493.818 915.95 497.955 919.911 502.604 923.207 cv
497.492 921.688 492.229 918.664 487.636 914.132 cv
cp
508.935 924.318 mo
502.394 920.633 496.685 915.605 492.084 909.685 cv
496.042 905.727 li
500.286 911.721 505.599 916.983 511.723 921.014 cv
515.253 923.339 li
513.309 924.025 511.204 924.386 508.935 924.318 cv
cp
523.198 902.607 mo
519.904 897.96 515.944 893.825 511.463 890.305 cv
514.126 887.642 li
518.656 892.234 521.679 897.495 523.198 902.607 cv
cp
500 851.251 mo
512.99 851.251 524.782 856.391 533.529 864.705 cv
514.883 883.35 li
509.607 881.215 li
509.54 881.188 509.474 881.231 509.406 881.217 cv
508.545 880.938 507.715 880.782 506.931 880.885 cv
506.47 880.946 506.086 881.17 505.681 881.346 cv
505.496 881.141 505.317 880.929 505.122 880.734 cv
504.198 879.81 503.16 879.053 502.078 878.375 cv
497.011 867.194 li
497.011 861.808 li
497.011 861.117 496.452 860.558 495.761 860.558 cv
495.071 860.558 494.511 861.117 494.511 861.808 cv
494.511 867.465 li
494.511 867.643 494.551 867.819 494.624 867.98 cv
498.58 876.708 li
497.44 876.321 496.268 876.009 495.039 875.865 cv
493.368 875.656 491.776 876.468 490.884 877.837 cv
489.77 876.797 488.061 876.576 486.042 877.259 cv
485.75 877.357 485.45 877.569 485.153 877.7 cv
480.284 872.451 482.808 859.365 482.834 859.232 cv
482.969 858.556 482.529 857.897 481.853 857.762 cv
481.186 857.626 480.52 858.063 480.383 858.744 cv
480.266 859.324 477.724 872.534 482.93 878.931 cv
482.174 879.463 481.421 880.038 480.725 880.734 cv
480.015 881.444 479.427 882.18 478.905 882.919 cv
472.503 877.733 459.32 880.277 458.738 880.392 cv
458.059 880.526 457.619 881.185 457.756 881.862 cv
457.893 882.543 458.581 882.97 459.226 882.843 cv
459.358 882.814 472.314 880.304 477.619 885.098 cv
476.581 887.418 476.596 889.565 477.829 890.889 cv
476.463 891.776 475.658 893.357 475.857 895.048 cv
476 896.269 476.309 897.433 476.693 898.567 cv
467.983 894.62 li
467.822 894.547 467.646 894.508 467.468 894.508 cv
461.811 894.508 li
461.12 894.508 460.561 895.067 460.561 895.758 cv
460.561 896.449 461.12 897.008 461.811 897.008 cv
467.197 897.008 li
478.356 902.063 li
479.036 903.154 479.797 904.199 480.727 905.131 cv
480.924 905.326 481.135 905.502 481.34 905.687 cv
481.164 906.093 480.94 906.476 480.879 906.937 cv
480.773 907.73 480.933 908.57 481.22 909.442 cv
481.233 909.496 481.197 909.548 481.218 909.601 cv
483.354 914.879 li
464.703 933.53 li
456.39 924.783 451.25 912.992 451.25 900.001 cv
451.25 873.121 473.12 851.251 500 851.251 cv
cp
536.233 863.768 mo
536.221 863.757 536.203 863.762 536.191 863.751 cv
526.914 854.488 514.114 848.751 500 848.751 cv
471.74 848.751 448.75 871.742 448.75 900.001 cv
448.75 914.116 454.487 926.915 463.75 936.193 cv
463.761 936.204 463.756 936.223 463.767 936.234 cv
463.778 936.245 463.796 936.24 463.808 936.251 cv
473.086 945.514 485.885 951.251 500 951.251 cv
528.259 951.251 551.25 928.26 551.25 900.001 cv
551.25 885.886 545.513 873.087 536.25 863.809 cv
536.239 863.798 536.244 863.78 536.233 863.768 cv
cp
f
710.451 915.692 mo
710.664 915.692 710.876 915.67 711.086 915.629 cv
712.268 915.392 713.098 914.562 713.828 913.829 cv
714.56 913.099 715.39 912.269 715.627 911.088 cv
715.896 909.74 715.307 908.363 713.828 906.883 cv
713.34 906.395 712.549 906.395 712.06 906.883 cv
711.572 907.372 711.572 908.163 712.06 908.651 cv
712.632 909.222 713.291 910.026 713.176 910.597 cv
713.088 911.036 712.566 911.556 712.06 912.062 cv
711.555 912.567 711.035 913.09 710.595 913.177 cv
710.017 913.307 709.221 912.633 708.65 912.062 cv
708.161 911.573 707.37 911.573 706.882 912.062 cv
706.394 912.55 706.394 913.341 706.882 913.829 cv
708.13 915.077 709.304 915.692 710.451 915.692 cv
cp
f
700 948.751 mo
687.009 948.751 675.218 943.611 666.471 935.298 cv
690.392 911.377 li
690.883 912.85 li
685.937 922.743 li
685.63 923.361 685.879 924.11 686.496 924.42 cv
686.677 924.51 686.867 924.552 687.055 924.552 cv
687.512 924.552 687.954 924.298 688.174 923.861 cv
693.352 913.505 li
693.501 913.207 693.525 912.865 693.42 912.55 cv
692.369 909.399 li
697.86 903.909 li
699.432 903.994 700.616 904.421 701.179 905.262 cv
701.643 905.961 701.635 906.8 701.435 907.281 cv
701.335 907.518 701.216 907.733 701.101 907.941 cv
700.198 909.583 699.765 911.141 702.355 914.254 cv
699.912 917.982 li
699.716 918.282 699.658 918.649 699.751 918.993 cv
699.843 919.337 700.078 919.628 700.398 919.786 cv
711.765 925.47 li
716.953 939.276 li
717.141 939.777 717.617 940.087 718.122 940.087 cv
718.269 940.087 718.418 940.062 718.562 940.006 cv
719.209 939.764 719.536 939.044 719.292 938.397 cv
713.933 924.132 li
713.823 923.837 713.603 923.595 713.322 923.453 cv
702.773 918.177 li
704.078 916.185 li
704.162 916.27 704.205 916.33 704.294 916.42 cv
706.77 918.895 708.818 919.777 710.551 919.777 cv
713.059 919.774 714.904 917.931 716.423 916.415 cv
718.977 913.859 722.478 910.355 716.355 904.232 cv
716.292 904.169 716.249 904.139 716.187 904.078 cv
718.176 902.775 li
723.452 913.324 li
723.593 913.605 723.835 913.824 724.131 913.934 cv
738.396 919.293 li
738.54 919.349 738.689 919.374 738.835 919.374 cv
739.341 919.374 739.817 919.064 740.005 918.563 cv
740.249 917.916 739.922 917.196 739.275 916.954 cv
725.468 911.766 li
719.785 900.399 li
719.626 900.079 719.336 899.845 718.991 899.752 cv
718.647 899.657 718.281 899.718 717.981 899.913 cv
714.253 902.356 li
711.116 899.768 709.564 900.204 707.939 901.102 cv
707.732 901.217 707.517 901.337 707.285 901.434 cv
706.799 901.639 705.959 901.642 705.261 901.18 cv
704.42 900.617 703.992 899.433 703.907 897.861 cv
709.398 892.371 li
712.549 893.422 li
712.866 893.524 713.203 893.505 713.503 893.353 cv
723.86 888.175 li
724.477 887.865 724.726 887.115 724.419 886.498 cv
724.109 885.88 723.364 885.626 722.741 885.939 cv
712.849 890.885 li
711.375 890.393 li
735.296 866.472 li
743.61 875.219 748.75 887.01 748.75 900.001 cv
748.75 926.881 726.88 948.751 700 948.751 cv
cp
706.747 891.486 mo
705.45 892.783 li
705.969 891.227 li
706.747 891.486 li
cp
694.033 894.034 mo
694.667 893.4 695.132 892.814 695.576 892.233 cv
696.13 892.737 696.516 893.109 696.528 893.119 cv
696.76 893.351 697.08 893.48 697.404 893.485 cv
697.414 893.485 698.435 893.502 699.45 894.029 cv
700.606 894.595 701.133 895.591 701.244 896.989 cv
696.989 901.245 li
695.59 901.134 694.593 900.605 694.013 899.425 cv
693.501 898.436 693.484 897.416 693.484 897.413 cv
693.484 897.081 693.352 896.764 693.117 896.529 cv
693.112 896.524 692.737 896.142 692.214 895.593 cv
692.8 895.146 693.392 894.675 694.033 894.034 cv
cp
692.625 886.353 mo
693.234 886.407 693.813 886.633 694.243 887.064 cv
694.257 887.078 694.263 887.092 694.275 887.106 cv
694.576 887.418 694.71 887.745 694.746 888.098 cv
694.114 887.552 693.409 886.965 692.625 886.353 cv
cp
686.867 889.185 mo
686.647 888.966 686.41 888.789 686.16 888.718 cv
685.496 888.528 684.927 889.036 684.615 889.57 cv
684.363 888.726 684.177 887.881 684.177 887.108 cv
684.177 886.132 684.424 885.392 684.907 884.908 cv
685.39 884.425 686.13 884.178 687.107 884.178 cv
687.927 884.178 688.803 884.348 689.572 884.626 cv
689.091 884.96 688.588 885.208 688.677 885.913 cv
688.739 886.394 689.064 886.804 689.439 887.111 cv
689.938 887.522 692.728 889.64 693.555 890.367 cv
693.624 890.428 693.693 890.489 693.762 890.55 cv
693.369 891.082 692.881 891.651 692.265 892.267 cv
691.65 892.882 691.081 893.37 690.548 893.764 cv
690.479 893.815 687.201 889.517 686.867 889.185 cv
cp
687.063 894.252 mo
686.932 894.122 686.78 893.874 686.638 893.69 cv
686.458 893.37 686.437 893.024 686.396 892.682 cv
687 893.454 687.572 894.14 688.098 894.748 cv
687.729 894.711 687.388 894.579 687.063 894.252 cv
cp
691.225 905.97 mo
692.782 905.451 li
691.485 906.749 li
691.225 905.97 li
cp
703.874 903.26 mo
705.163 904.122 706.884 904.308 708.252 903.741 cv
708.571 903.605 708.862 903.448 709.145 903.292 cv
710.102 902.762 710.688 902.447 713.401 904.901 cv
713.784 905.196 714.165 905.58 714.651 906.063 cv
718.943 910.355 717.236 912.064 714.648 914.654 cv
712.063 917.24 710.361 918.946 706.001 914.591 cv
705.578 914.166 705.195 913.785 704.834 913.324 cv
702.444 910.69 702.763 910.109 703.291 909.147 cv
703.447 908.863 703.603 908.573 703.742 908.248 cv
704.309 906.883 704.121 905.167 703.259 903.876 cv
702.726 903.075 701.727 902.196 700.056 901.713 cv
701.711 900.057 li
702.195 901.728 703.074 902.727 703.874 903.26 cv
cp
700 851.251 mo
712.99 851.251 724.781 856.391 733.529 864.705 cv
708.724 889.509 li
705.573 888.458 li
705.263 888.361 704.922 888.378 704.619 888.527 cv
704.323 888.675 704.096 888.934 703.991 889.249 cv
702.591 893.45 li
702.181 892.923 701.723 892.532 701.25 892.223 cv
701.25 884.466 li
701.25 884.134 701.118 883.817 700.883 883.583 cv
698.842 881.542 li
701.186 874.506 li
701.404 873.851 701.049 873.143 700.395 872.924 cv
699.753 872.711 699.033 873.06 698.813 873.715 cv
696.225 881.483 li
696.076 881.932 696.194 882.428 696.528 882.762 cv
698.75 884.984 li
698.75 891.167 li
698.459 891.107 698.155 891.041 697.946 891.019 cv
697.722 890.809 697.404 890.526 697.046 890.233 cv
696.986 890.147 696.934 890.125 696.87 890.05 cv
696.914 889.939 697.013 889.817 697.048 889.708 cv
697.501 888.32 697.295 887.042 696.522 885.946 cv
696.516 885.938 696.082 885.361 696.018 885.297 cv
695.064 884.341 693.024 883.162 690.798 882.41 cv
693.354 877.257 li
693.44 877.084 693.484 876.893 693.484 876.7 cv
693.484 861.166 li
693.484 860.475 692.924 859.916 692.234 859.916 cv
691.543 859.916 690.984 860.475 690.984 861.166 cv
690.984 876.407 li
688.288 881.839 li
687.893 881.789 687.491 881.678 687.107 881.678 cv
685.442 881.678 684.109 882.172 683.139 883.141 cv
682.17 884.11 681.677 885.445 681.677 887.108 cv
681.677 887.492 681.788 887.894 681.838 888.289 cv
676.406 890.985 li
661.164 890.985 li
660.473 890.985 659.914 891.544 659.914 892.235 cv
659.914 892.926 660.473 893.485 661.164 893.485 cv
676.699 893.485 li
676.892 893.485 677.082 893.441 677.256 893.356 cv
682.409 890.799 li
682.964 892.443 683.718 893.909 684.49 894.98 cv
684.504 895.004 685.271 895.995 685.295 896.019 cv
686.142 896.866 687.138 897.299 688.23 897.299 cv
688.706 897.299 689.199 897.216 689.707 897.049 cv
689.801 897.019 689.907 896.933 690.002 896.896 cv
690.432 897.353 690.782 897.717 691.018 897.96 cv
691.04 898.166 691.104 898.466 691.164 898.751 cv
684.983 898.751 li
682.761 896.529 li
682.426 896.195 681.938 896.09 681.482 896.227 cv
673.713 898.815 li
673.059 899.034 672.705 899.742 672.922 900.397 cv
673.098 900.919 673.586 901.251 674.109 901.251 cv
674.24 901.251 674.372 901.232 674.504 901.188 cv
681.54 898.844 li
683.581 900.885 li
683.816 901.119 684.133 901.251 684.465 901.251 cv
692.223 901.251 li
692.535 901.726 692.926 902.183 693.45 902.591 cv
689.248 903.993 li
688.933 904.098 688.674 904.325 688.525 904.62 cv
688.376 904.918 688.352 905.26 688.457 905.575 cv
689.508 908.726 li
664.703 933.53 li
656.39 924.783 651.25 912.992 651.25 900.001 cv
651.25 873.121 673.12 851.251 700 851.251 cv
cp
736.233 863.768 mo
736.221 863.757 736.203 863.762 736.191 863.751 cv
726.913 854.488 714.114 848.751 700 848.751 cv
671.74 848.751 648.75 871.742 648.75 900.001 cv
648.75 914.116 654.487 926.915 663.75 936.193 cv
663.761 936.204 663.755 936.223 663.767 936.234 cv
663.778 936.245 663.796 936.24 663.808 936.251 cv
673.086 945.514 685.885 951.251 700 951.251 cv
728.259 951.251 751.25 928.26 751.25 900.001 cv
751.25 885.886 745.513 873.087 736.25 863.809 cv
736.239 863.798 736.244 863.78 736.233 863.768 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 19.1.0%%For: (Siarhei Nehin) ()%%Title: (Insect icons set.eps)%%CreationDate: 30.07.15 20:30%%Canvassize: 16383%AI9_DataStream%Gb",KGs`6:oC2V\p^ZgZ5p/kqb]M/2.L@7(7R=ie^lSs9a^ks+IK'"ip:$'RaWs,,mOBJuQ;p;KViSEi]"2Nt2V[HHbE_p<[dj)a%b"=5lbHb%<QSgQ\qlI(F[/6>giB,*O#$^4.V/@l`GP54";UB<"1ocO9HR6)iZWL#:.%\:7`ROdX>&F2&b#XFso9n:U[X47B<.fRn%<@`5j.W$?Q5,(PS\)A3L*'YZM+)TU0EY*=R0GEXea5#Rp`eVJ-j3QN$rSY'2m^.kB8u)B2*a30a(&*%d1lDctY#\F%IcfS3<%^-Z%G,lW)0\'qB+$9'Ck[>XBgI+;r*`=\NTHDATn8H1%!9)7e_#Jc+/q1[`11d@')J3n@LI4W3?<J_tKl<f%0<XMg%O[+c3t,lKC9\E`%Z!>IE];[+U-iT$<$eVA#;USX<B;N!/nY<:u8WTshO%Son9'TPU/-dc(?Dc75W;I1I'X7_WpUetKot"Jo!4!;jHq+*n7QID6lfdS\%[7IZ`/WKbl#)C1KC!ZkbCfJ$&qN[9]Nps>Y.hmI;aC15:fPLic_o<Xaj-"?6.A:kk=!\P7X05JnRjC")HSL\O*q=N'3p]lL!bV1W%j`Xjndn5$Wp^SFf=3QV-X\-.EMZS]Frka]E?L3^pro%S.ME@B%DNH"%dDh(]:L!'"#;GLV]tDak+kk]?>8EU:%X_T"SFUmOBDMfR%ml#G#o_[%Z#.1P_Z-Si)oSn(%=7*k+>HLB(\QqF6bfjY@NT2.hLQcH&GO+bW/<t'pgLmM'7\`#:l>L(Eia2,t<em:j3'NHW<grVi%1KO.lA`LRmP;:-IZ!+9"[Yi>99'NWi0)7[L0E0c\$jd?r$@9D4YMm6kT0=Y8&MKVhs&[SJ#5eib]T+`'"Jnkg"hLh+g-,E>^HaG_%J5V0)@L4:fIZN2.i-eEN9k[l/&Y_0PD0ijEFbA=JM1mLg=g#QqXr(qfRtJJ5S^LZ7Enh^!>+nj/0O98F>FiMIX`Hm63@OT[Hii<!%#;H(08MTk0GKY#1%I3%uKEqLaa!Co)0Z+Mso4RI#;6@3@4k>NWp0aV[;DgH/g$T!NdCk,&!UGQ@$A*0HIg":k1FA(90#;;'`HndH%5kY9L<Y5a-Y=!+CFP[Jm&M\K-WIrGk*HWg&TVm,T[3dqhWIqNd1S@a'/J"Qch'9.*EJq321a>oOHH]]4[>O&QR(AR4h!9:"=9F[I%25$2(T=GA$r_g0eo5SAZ`o@#O,qU'b*6Y0#ASLr0i5_afbf-3B-b[R*"7-(N#s7,g\*li[I]e"PNZPt1R-spgitc`ucf[7Y\bno\%S'Sm2TD.mpIT50X*s[72qN9o16pGr85PB?Q4<A[mlQY\kf8]\KO#s>oUML<oJ520tdZ3L`?Ni^a@?128g%GgW%Y,1K5*7..f;F+`%E#iteI)iXBns:?RP0q#W]N0,*_d<@K-SUHp/n3"cnV6p9_W%a/hJ@b[!Q@(**.:M_bUgMU;0WCb/UkoD9'E,f><dmkZ'q-Y]2l&O%=%f3B>F"5d-NL!M34#,h[>G&<8nXE(\J<WaH^S'o#54+l_nS5s;=kW:k$WJ@o;UgRkcfNihr[G6g>teR<Q^l=.pAX.@3ZWE1g:sC%24Oi8e$I?`7>1'2I2*(>n8n6oJ)7ub1YYEfC@eNO,Y"r0;BELSCieuZBTT\=b?0^.apEn[7B<38eCSpb=mN*\`n'X'q![\YNf.N8%FBcdkE6CkiaMma,UXgO\Hir[O\Uml/mT(!7\$4]]ZXDL-8$:j]fFIJSi-Q9=Q9a%21r&`AeJeaa$H*`*f@?a1Qo.O0.f(&jqjQTe%`RMN-h,:0G,KX-KD3O1D.qU>eb]oqP%LtuXK&209TR.ZT^/D_'>]FhBNNSh50MEH@HO*JQ`D30cH3q9Nf=m8t7^lA)[Q#:nJ07GI%EJ(P^_0;BcnWBR8-RM)rd)`JYF2:F_FW)r."/]9D0KIU4Bc8[bMe5%b'u<tP^2-d&du\8p6Di0+P\J'Xit9aR*BoIM`^]0i&^rRG%qDDEC7SNhCg2Lpq`0=dA@imEWabc%GZGDTpH>ln92u]9,XenKc\:*>TBKrKP.Hc:)'rmm#iq:8p?TT!`X50i+ncZoKCof''1&7\m%X4V9u/&ci.C=8'9j4ZIQBa:1PPF`nG8gG.n)/8G:<&oM90)n)+;bpfRb<KoAI!8-l-:i*Vkf.%J@YmjBr,m1*PRoco5H>)GB;X@i%o+@8smrkn/_Gh1Se*KTV9!l44P@>t#-l!E#;d\kV&"c<E#PbH+/[dPUold68:V^*LT=BH#[)D:ar4CX\#J[RIh@l+6j[3ths,BFi%s$l&-Il@t.M+"Zldh!CXk`)23mu&asL_m;IW73n_7#@-mPAgm>MuXWPH(Q4?jO_8ZBe"Mq9`<h%N.$TA=0hY^,1O_s5ILW!CfNN/%[@i^k6YIYHHaH"aSq%U>2aN=9V*g%6-=82J+G-/7#ke^$rD2gC??_+GBF8!5Uc8OrGY\4;PZiJ"cD94#ab_Qu+\b/oDTIa/FW)Cj%-HHWfCcH;IpA`nNVY)57eF&6/4is)@P9a;MQmU!3gIE3B7Q&p-K)^he[2I_.P$;4H^Z:DeYM3,,;m,%ACptWc*hA$*q_0fl-?WRY%_k3pr\Sb?6*do@QDe/)Z:hO4KRr^_3Xl^MX_Dg0uNfW@QRhX:&3#@h;Pf(!\Uo>9$WhFpfpS/D9j"J"X>dp<cFOc`cn'\R*o(qJ@%p7*Ko:8%I(?1V/)m+6o]-;HglYuR[1nK`2hj#4%U@W]HRoG%&0aRo8Y\K"sVE%jS4,/G2;<i]!$"r`KpG/@G_)_1F9+.]Ii3%NSG%61lA!dN/)h;YM!!\GhJ^d5tUJ]W@#egmFAJ<SG]4YnZ,#6XCIr'4`S-7HeLYIb/g7(8Cu\nM_9uI#D,?@lLOpU\?79e:isXn)MJH%d\d4sD:n7\CYnQ':r<Ec*&U`Jj)5TRotfj"C&F7IkV\=&dRp0OIq&rE\4G"=Z;R6W9!t+dYbcXZ3r:BQ)b\$OVb*h"RU,qjT[B4.%\!C^_QSe50CDpkML.S%5,CqAu\:LX2)thUQ;(S!D[I0.$r&?9;D/\?o8j+S_Y4IB5[tO4)*5.eIb:u,VEme^P&nih2Fo='M>%<g2%>dqV1Y.rnfqH*4MkS8UedODVfq((7ig/l]0-qk^7j5k:bht`U(_P<DUjN\S-Q!+f+oS9I9-hP!KdOcl"8?dj=otDe4A$G#gb93Zn%&H?!MDabP^m<]@D!kO>m2SG)m&4rtX\=/3V='A<++iZsLa0uVSF:/F!'!,MXe`nE\T[?O"Zk-\M#k?ZO`3^*87Uq?\:^E1k%HD4X%DGq^3Qki#IVl%%:Kb1(b:^E1k%HFLrY."sOXEPg7ViDu.a,N12-Lh/@,UH5b]`3Gnhh!fQ9Q*TD3VGGiR$QDhb0_4N8&$jV2)uH8%2I0^29<O:LO<;3%QYB,.e8PSfV@%(<TZ08`NFp,.K)/7lW6H(XrhBs&J8:dWV_M(F;u^R3Sh<l9s%W6%Wh.4)4\`VfWI!i.:[r:^%UYiUX4ule]oW%rIk3$8k?qhpmM1k*mUkF\5oi+9WWtODq.<fn4%PMog8I81ol1LB@DBJ7GrXPrTe`+oM#sJ`@]l,!\*(AEcC5ja)%i(gJU\>C"";?de]:W;_4m%N7RlQ/NuB-JsTW79#,8Ypn/9,ZcTJ^'k?aX+JZ+kH;^%tpdtWjG[@Ktj`(r)na"nF%iSOno1Q[+Bc`%D0it9oR;]_j7t(;hdTjgQ9QC??$F7tP*a.JI>)j=<K(dNn7UTD2AqYT\;9g]DCUV4Z/R8OAAWM89&Zh_GIsX-VgM,Oe@<]qDg@oM%==`".($f>0dQ+?3SHR)L,/ehM7diG?/^A:qieEh4\cin0-(r1VPr*JQf]-io`jQFdFNXU\.N684+NAKf=)I3AVs[6i9q.Z[ql_HP%Z1gedVllmYQ=II83PkI79m8-Aa3/SFEk5a@h6Hkg?;H(JFtCc'ih!!R<g24pkq;(>QZBZ13AF[_kq;'7B%j,oP[fn9R*]-]V!7#o%A@K>I2'0ZRF1H=3dVT4.NB.o_H32L.nA)Fbl=Wqq2Z=W*Z>/LnX97?5Q10sRd0gn0J*lPWR%8UNS9,oaX+u2r<q:B'*hsa>DX.H'%a+PqD^\'FS1ef@rg'SHAib;/%RT'(-CUnjR-2)^e:Kp+]?NhYhXMPl+ViB4KPt!XpXL<`OC84e1?b'H#8]djo.j(\2VJ3=bPQl&J%rj_a<9!-jYl5`oFr.b`bSX7ji<<Q=s-!A5=f(?tf*4ZE1_$0INDQ5rGa733HpfS9KemP_"?Q@s@"srcr>19M:)\7YAT8nW/I0XZ^%H49NocfeY^@P$bSB"@_]'-aSd=]b'KC$oH!]D/cK9QM$!gr2*onXER4R0q5FQp_.T0W)C=C$oH!]9q_5rkl:)RrE+kj6l8`3;%<"%@Z1W;^"ecL]=6lUriO<]rQ8Th^6!1EO5qZ@_&6Ur^2:p\'--'RfAlYV8nY>0\ME>+6&I)l&]XJhr[k[E5J^V2e"c\:>P=,KM5`WW%+$grlHT&Q@jsCO@@]s6WD;"PbR>JCaPHuF&>\T1G6p84]B&qV)I&0MKqrlt>=Dn$oI;-WbCRWm+=@V2J1Hj<:6a?[`@.6kt7cWR*%*HZ8KXe;2C'P#HjP?m!)qGh_#X0d2c`o?IWSGMFc4]7ag'B<A]L]<+tr=<Fgm+(U/38rmaLHh%+T)]Ktj.NZ8K7maZNb$#A.chpu%9r?V:k7?q_CH)\7e_!:WY'h$X_B$=I":"P^%EuL%9i!E!9c-Tc,BkI'2#j/K9Yfl$Vb])LdnIP6'/7Z6git0]S(p\&JuMO%!TRZ(%VjW)*TYiT"n-:9oblms&(p6e2;VF!fi$N8)oV>J<Fc+_9NCneCH@BTC0#G?+GpT<7q1Z(t;m#]URj*lNm3(9n^3>3U.=peAd!QhT%1:BfMhDj^u3i/nJS+0/Q2ES!>PFUCqCOH*QpmhRhj**^]]j'4pL%Z_t+l[>d8S?q8]2Ol+Z&-/=`(H)>HU=Wm^lgTn7-REa9c:7*%l)cDdm-gIO)RT]_N*9Na!i@oM9Q*8n6WoW62kg/3N6,M;Fkj*NFe67Qg%<^J0f_Uf,k`2OeE*kR_jP*I09=h)5oigc22lr(;1^Za%D\Z-q+<=a1jDtB#9"2Bp-inhR^,i"6-q@u<o&mNCgQ4_1DI!VJ2Q!0<f7j.E9^X`HRRTt\))3F8_UFld)Db)tVXa1j-R*.@m1i?*%VJ47r9oH_K<CaMEC)VM0HQ"`sGgJ:98CO5G)Dk0@VJ4ELh[Gt/>7`V;=i8ks9hSri_kso&7esDk9V<K*1"4C;=T;/d9r$OZl&#*'%>fG?qM-G/KE-gMmCuh<Fm*tY18B,2t(biWbE3aBj\F+`\'g,fO$1Q)W[9,Is9eiTo/=%cVT.<JGK^I(27.1uUB%LCKRckL,A$8st%/S"/)DO<rfRNMq47i,Z/1OnFTQ*D.p2Vj\.nXILF4LN\K`tO[35,k>rrAc8@PF1[M`n-gm*UO:+Wus>>Fa@>2!mbiTJSSWB?Y;rj%E)t4FGF+'+;J]WkmB:q@8RKV#p)5p\gI9._qbD>$3kA4gh//\s90klRf&(e:'#)4(NJm&%jf`YMUgno;Kf1mNf8RVZj`@M7-h,[W%\(#laW`QQ':#I]=3-JVUaEu%bpkqr'5_4:AF`%-6Ct+)E=]b'KWQ-de=T4l313H]J`uGSJA58f<1+cVA\:bep>Mgo+ldt!#5>Cq0%>e4Zt"hWEeFO"VeOrL8G6GO8IIQRW_c>S:KM-jIOp51:"&[&]9-;F^@#,_Btb4<P)mQ81`8Xoik4IPB4MO=1gSZ+4<K?hEbSrJdR%:[QgP&7Ji2=^iS6XXQnN&#Q4?]M7)?A5T7Ci>N4fquO2_!SIEn':9ojhjtcZ7c(@'5q^OVElX$HVrZ1:`HV6'GGhpP>R)Ee7HeLY%q=V!n_HZMCHUt9Y"R4iOYUAH]gF:>D>kTUuN*IKR8g+%?],M0OWf>Sf@=g=rP(1Y-4Le\[Pl?W(^ENE?d#/!LDrLN$5EtlOmON$!%p]UTEkTFYe"FghJH&O\tDG-fA-D$>HLUZ93fAofMfGj0KgtWYOhKCnV%W,H3DSb)ZInA;5?:$!gV*uT@3sf*d9'[6<95[5ZNXIF#%`T%(O+7$k99T;dLdk]f+9Ek)H^:EQR](OMN"DNQo^e&72Z;S/sQaWd(FKN2$DQd6dhGf=5KbSdmnuu,q[ndWAL-@d`rMp+^e&9'[%\?S_lgYp6QP$:-DZ-ah/&#b(0;m$$"?CIC?iYTRKlksePlLOqmi4np(OkIseY`:X-jljr6#]^MtoWh?OK.cB]PU-NHK@<FUrl*+)%-@Y"F2ga(-r4P`V8XPphPT.Y/.bj6scVcERp#9]49's(00Y-0"V>/5n@^TB"A_V!(*]=qeAb`lA3kOJ=jnVlE-Ng^DS'#YUdM4Qj%WF%NjGq=seP5_pAq@ic%Xn28^RnTl(J6)f]B9o1A)h6E&(Qc,:O$NIaBW07m+tnKf:`']m[:V9%RolZGR9o[nrk'`_@"60g.pje5%&Q`.M=7QUNF0uAt[-bK.%j-J,V2Gm.KrYJ'?,oaSbKTV$6/MQn?ZtAF2ZWd[#YD^#IJdoXaoHn"5=:'hB9oMl(t^[bY!+&*\%7\M%g+-3V:+)\Lm2a(_Zti6!9CS3Zdg&N<#p4Of.*###mc-Jnh<qWu$Ok+n\\J%!bTM:FYB1@ZF)U:q,PpiciN.hs\&HekDsD,u0d%D6%]SA_t*s3I:rG(_7l:uSaKt)(bb>n&8j!s.5]!)_A7_4oSdD)8#SP-Qe_d4q8E[<WOUeOdoU_5:g3:/f))rGb\s'G':V9\e?&Z%jH%re_C(J7<NL^VECii1GfEBM\Kii+MGe;8mGP?VIHm"0^qDbVe!#F__O9jbfVgbj<_tpcD"lrYG50ArhUT9EYbM;GknqT[RbT$H;jU%(K>-aYL2\p;;YaI+FLoQW4'3iX]!@>6*ZlICDP*)L0:M;/82KA>clXBB93Bbm:N+Ld&L3MZqY2+iHTlnZ]\qQ.aBr;l#muErF-^>%:$$l@5R4ZbEk%Q1]2:/'JeZ/MoY-liNR-pMdWqVB8Y*:.iM,.I79e<^EO!(s1qV;Hg!l^UptKUB#g3$hs2^\VN"1;`fP&:=Mn*I:%0mfbC"&2.dkKeAB)u@=d3LN#Kk"Eu@brr#7O+%dImF>'o,d^#8W'![/PBPi%'8i?,UH[,DL1XHDk$Z^;5r=M(j_nVPJ%DfC$H_MQ%l:u""bQ3Ud,qWTuqVnW,'D_YS-AK(oZU]l'?bsZg'#l"beJf:r;RbIreGb]2:QcJtq2ooAfJGT=s#E8JBc#1e7uma?/1E[[EOe%G%=^lQF;n3?8g-5=JN32UZMa=sY.8@B+p3f.7Ij0[BWjO1!:Ff-`H;j-(XpP50CXe4S]sX,;d!K]s9s/1ZaeD8T!Rp6sDgEiDcs,'l%Q5`hbc,8H2>,&7pWb!//3oK39Js4JtX)^6V"\o`AprjRWI8Y9ZmACcRhRM5Dj)iaKW!/`$)8)Vl3tM?ucJr5uc:GfXZ,ZG*`tq%P%d]KA>K6F$D2/174S')F5q'n(+:_-a/]iNJi3iQGM-/;$_A[_QeMkGJ6ASijg)&jogo'&<Bg[-i0SIs3?Z<2Q8)4^&oDR!C0r(IiW%+$k$74u'O43f,3?k]WtkHB;lc>)i,EN!AZiT3**:eRui2TE9iX>2-SGI=%@^7P,"-;R),#M78I'3(.Bk7l@Xb:)^KL%/o@Wm<lBH%%12MNBON(l^:fo`;R,<ul^^WTOATh$Cj-a83l0^EIZ]/8o&ub"kjW$"7bJ@*oceGD_.8u8@-gCfeZ+jp:gn5?h2++l58BJ1V&%7/%%I&_4C0,V5"3!=4MT/A$cIS%!ebB``R[?/of[+MSOmrZ[`,nX:?m^k6lF9qJd^e(?A!F!YAua@rE9Qai.l[^lQpG!A82%u\`E)03%;/DLroL=Cr9V&VD5s9=ph$*BFWFiCA"1KegDRJ+1$0Ab,HhD>%52=5f`t<3#XB>cYELOi^hTZ&V<Q["P0GQ[Tb>t!G)MsgA/UPq\%b4b2#BdbPP`VPX)q]M?'kXtsFL$Wdbbb*T?=$"=\$L3[K9S):tNE/%f?W7N7jd1s%hq,W5=Vl(Hef-b!9i^Js;5PT_R?!T4bk<a(%goi+[T8jg6K,PrVON5a9rG<ZuD]%WnO#-NaVRo<[*5qNLF]GK[8DV3QOd`N6?[fmJR(Z)r7;?o4@.^DrbmlDUEi-s/MWi(s[^ZHK%n]>i26Y8Q7J&6VpjdpD"r2jt/DP("!a3`*,r6T%-0R9dDd%J)A^*O8tUfA22eNr*P69Et-#JLY%%h,b"Rk:C]$Y;9Jj/<9=O7X%h%7VkpkFrJEUoohkFB04'4,7RO-M4]DG*9Q$]i2e(7&pK"R7U*!(\UmGI=>(W>BUCHk%i(1G1G+'31tCMOr?LjFIW[&fC@kWOfh0?$%R=gLdD9pH-':5sB@+KV7qr$MOg=sXY=,ZM_GO,RH9A0!h<pa_b[!lX8IqNchiC9Z2DVnO!T5CTT/*jCJT"K$6XqX&_I'MPnQ?7RS%^@5`gj4puBG4&T&FO@\7^A9/SBROa&fj8S]Qch1kl`5_$Xg$2J-[Y^V<FL=##nAjCO.VYWl1DmB$UYZOmpS>LbKm?T%pPU[\'J4?%_pW"kegRm]gBX:UKdZ.l2kP0Z^Wh5.5(#FJRldluN\Bed^@k@pRo^[rAI^ZIDlt-<hJVHHqV$5ooD2'@?!GB%c?Af#>NM':=[H0g%ld9T/GOkR3c;rPtmoE2hB:Y#<rB^(Lj6M>&8JJnBY<@=/QMZ4^[l;$kIVHTq#N'UWjm>._-1BUebe_`@3mZbjZ.tn<otSa'PVu2&%X1=3Gk@eui1M]3WaM(pW]!/p=n9'1)kWX=`B'8%(C8k/pa%qtSc'-!^O"@BoU2F!!IpK%$fdUR7ZVMYq[2(rK1PLGdhf8Yel`3*[%p<9UAIIh_I;_L;8/NeKe\u]\>*`o^TDP,RL<bYbhS?IaIa&6fQr<CWG*sVSDD3\0P)p:[CYB]S^DJ:iH<qTdY=7EpX]=tP`G44h\%U@5OA0&%Ju]dJ-$nRZ.r:&3h,4MLQX\p[JKK`sV:O7"/_5,u*W<?:W%,^V_YQ4.QC.2OQ*q;.%bEcLJ4rm&B9(65-YM_EQf249l?%NpgjIoQfCeIa*7DHb9*DRr9iqIc\l9HasTeqp&Ainmlf=k+8/.2Z:::]XD#Cp@8Sg17Boh\!qNb.*sBS'2@D+DZXD9nNJi<*.k_F%ZFM2HFY7>lFjpZhXctiiI9Xd`/3j0K=Y)bLT2iq8?`cK7*BhLaSs;@)^&+WBR6tZjoeZI9qg7g+q8;@,Y>;bBMO82Vf_!@4Y;<AN%DES@6p:cYN3S5kr5,$`jr5+YEX)FCmf^m>Rk)ibjPBGaLjO[V<Ze*LFMmlK=6CqCq.3RKB`J&-Gs"]DQre8D_*o`"_Md=TOXtDj)%cK0+IOgTAf(&2RfWc10ue8\uHorrKrF1B]`?:<lT-"D01$3./N#@WC\a1eH%R6`rXp\c4!pRjO]EMiFoC`ZerO)dOe[:f_jO&r*5%0KLCg'Xfbe4+atZD<YgW-1uOE\,B#;=n\8VhSJs?o??Whm#1e]ac:"jkJu]^7_/5aPij>LfZI7Fj0u_9<N#?]6h]3l]uL4rR$iY2%"M;4Ho@X+uHF8JG`jSWChDR"3G-G6Y4tUrdRWjg@IpplQ3Im7Bm<7N#UXH:ne<W`LpZ27cm:X+4XTg9dC*:Xqo>k5k(*;plfEhdG%r<.GjL2U]4O1%)>j]^g)lV;?.noue5*Lo6>VD<o[)Q2n>%_%Al:%-WERG"tOC\(JXNooJ5j/'sa:b2!bk$<JCFT25)2uj7U[E+7$%_8h<7:lgYZB(i:M8+Cc+MU+Qd4`p>qfqWZOq>5g@b\Tt,LYj2U+6j*C)hma9U<d@4HB:514T*W?"8;?^U\QuaZjb<lo`.D&4WaCL%:`mG:n$=jUV]UI%h.gaY*gRiL(14`Y_1$TXiQ5S@e$k`t`V''sV=LXF9=ogN%Wfsg5?l:6D7]?2/["4-;4X0u^0%#P<d1W%dct=<%5.1-lo#Os`'3Nue:k*=FT;uhG?feB^>a.&BC$5G)+$RAb!jL[1*%"FeTIkN:R$L24i:FM.NUXc&n7gb:UM%HA_Z:%_J'BkBd-g-^%I/9/h-J0/*&^ASqoWV3**u^uA)seb,q<3[+o5`.#L8T]gK3i4*RL1X1HGj1RZNgmpS^FHN'RY3<7:s[Y#;*"hDK$<TEUMl9f[DpQ%h)/m<qC2@80b[&'2u^*(@WCd8$jDU9%hE$%]mRpiC[!(n&CUOZ+U6"QCP`<?mqd^!Jr,rY+.n42l9bfcli#!(6C`ZQpW\9?'%+"7%/P/K"/)X4^Wm%sB?X]2"(h47aI(3+2YH#Vm(O6cd\Ir&(Do+nuNnBf*nYJc&hMA;ER1D=RP%F2?B"Y(#rn55^V<*/RdPiTJ#D3Xp%,'<<&rD[@`@?3N@^r0fY@doD=T`E$!Ph/59V!id6e]IT?;#]khEAB)j4;/=@pC)u=l,Gqs6fMgCb1H\Np:T)g5LG(%)8&k/l0"&g%.o>0]Ch*5;9Kf_3Er$d2b3."MK980Ao=UZ%(ZKgSG&)9e#i$&::;qUEm]5$Kr))YHdJBlNG@t@Uc+@V^.9jA*F!kF'_-iKAD`9IF%JH<A9@"K2(TpbBn@!S>D&&Iq.s*/*3V,okqneq?&rXQmJr<lf%!+BKjC[>/LF(t0_aZY.Mh2.2U4UNtAon1kaK?eXWF.og#fDf\F%^[BE+_k:Ig^))1e!8AS+^Lq^KZ?tfQ)"4KULDYh4d0o8IC!>8WX/4GF)?"8^5I]*fo_#L"1@DKpgR75C?\+hcB(gQEI&jq"[#F<P%:g#L,T@-U'O<,H)%$)CT]*MmOlqH`sT7c=;P?7.(jiZFM@*-[^)shLto'XQW_9eI@d*-;g)!Z)h/r_+BGF@97mb?KkNQO2f]R!JF%4U(lZOT:n6q5X+:\UfrKlM3riNBO4hmWA]'Cc]1&ObJ)qjTD+8:7(+8nc5l[-XX\egO6SO[d\`U\anhOMP4$7T))oYF("le^)%'-%L5FAemhqf@#.<o.nt<c\DjW==OfO(k#>^`5HNLGGX9t(Yci<J.raQW7c\(C"Yb:PRrp.rF5I^;lT0PBM.4r*l]GU#/eXcM3"$m:c%fOd,0f2oMHf*be`E1G7rq=5k*+@W;>EGi[,`V!g0_>.)OV=S%X5J!3=XEVG%=hj):lE;er?iK9R;ILsMC2Y-Do"OhG"SggIZ^FlJ%&)QAgoB#J"*j[dH=Sf[W]OqtN+#eO$nmKa/IQ.SDCn,pbZa0(2lf]bXXNtUR@/>0Br5A`Ip3S/MR9dX&bEqS+I!hjd7?e(^<m%hM%"\^CP,.9`.Z5jMH>r)-B*Z;)I)*8PgB):&pdl587i;eXZIJ*F5]+@/th<FBT2fl3'rW[Iiglh!,n+]9QU;5g"XpgER:?W)4@o(G)%>p?TS$C!$!ntcUt*4@eeRc8R?p%?4E/4h2ElJ:!SmbYFsiToKM(gs1TjZfm%0Ul]JO`hd>@*HjkeU6E<.ZP*<bJR/&j..K\?9=`U%*%o!l<1+!%@ja5Q.D<!CT_+fW-g0[eWiPrcq`uhsH2m]f`?#[\q6=fF1$QpuNm7p&5aNj5Vjg?JQ^?9)?@Fts9[ocIS$-ate0$I&%;Y,71P$<CE\fTl&@Bb+pI//ZpCn&O`jW5?MqY%1PAmT(b]2-5"of4'HSa:7GrW&nRDf76j;C=2We`/`%-$B7EGAhokmJ"cgag:$V%op'asGZUuO3Hk.XB4f7pY:[Iic`$<"m5?Pu3Jc-G-(s.NeQgJV/W`&fmM27=#a;g^LG/)hL=^@DKgRP9:[`3C=nU+OPJc1tbj=J$%j$boeY%Kq9QM.?M"7D>o9V0P$K0o8"lLsel2jqS#3f9WGFE-keF6fqS^RNp2?iI]9q;RqF`SWi\]#<AC2FigpJR]%J^d7eg3e+M_%[QHOJI.FrT6pA;jrr$O[k^A#hl=R]hk%S!]Ha@Bn5[s6'%e"mSb0MsCq15`fEFE)F\qo]':AO!L[T^"4J7$SdW$a+-n(1X1^::[0%dgkUD/[b>Qn`\+be7>C\55p#9abQ^_jaVNBh[%_WjtKjNfrB8BZfL-?b509KX""]4VI;)r&a`@V0"q,f6BcbYffraAIZZSW[5TRr%?aSEdo!:dX<5%&?Ge*A,C#g9a@pek3V=ZLO?/"2Z3cATm!o^oL]*$'jHBk,WH!9^0IEHbm'5WJl#"EsB<hJ9qSE*H6I<P6T1VEhW%:utQX/+WP@Z]h&59_WODrr26rEqe;Mna_HI^ZWito*ukt5KFr&HZ/uN>PPT$j]eWN3QR-Rh!/\sB-5CCbc\T\YWl_0%j0TkA!X%I%;7?^mV(uja?mQflqWS=kH$1jUOnfD<iqi@1cssW*6T<.*nne9rbiW>'qtm;*o/0a)7:rYPS"LoQ@]2,u<*qbHgp>$Z6qL2#f@QTN%hh%u3eu]1DF:i'0+*Mh5cMP5WT0<274A<+[j6$%-17.unURZ8;K^`KX&XPSehEYkdK=O`ZY%upI&E/9!lXE;-G@'FphsY\CcejY$%Cs^5K?^>cpR_K]sZ[eIgJX51V5OI]B<l0j"B5UC@UYQ;Y\-jr/hf:+D:,R7nW&!ZT^:)V`R;2[QV*bL_"fRJdGq1O,Q9XK&5@7W,%=&$Ci=NYQ>PI^T`B)ca>d'n(hq%&hBj*]u\<m<PYgifq`HU7[2pZ;K8TD)3LVK:(mmr!Zalkc>&`U;U[r4:E=!h.`%o626-$4('I%j"nCPag&U4(d@V%h:dqPjuKs$L\aZRGI9Wh^\_W)YaV3=Y%@O;:G;1uF*fPMo!;$qPfqh>FPY5kE-eg'g`ZCAF0K<g0;B'GD.MSN%Zh:`&o_bP\@&!s2Qn84>NAg0^13W+Kj32(ADpGbO5GKD7K?1@PM][`V+Lk)5Y8lYsOHoDbLR30-*q#7IA:C+aSF&Lt7o$rIQ.S9Z%pkCPQP^NL%])YAPR4B=pIG1.GqWn6tS9JJ&4,*TFT`4e9E^aZ&')c@KrZ[]c4^3ham1Zn[a?Q,#<8[s@ZOfa1=)#!\2=O7WbSH`&%Go^7+49b7Sk#WAfp&b!s4;Km1c14GTmeN.j-Sk5WX&&KZMe_D4\9Ys=U/Z>4ZaIF%\!X)#riGoYPffSGTi'\#CIPr5C3M=Pd![K!%)AKZGgTFQ1@(*?uQsj"V^V6*.YP%s>=4['G@kYuYH^BpXoI2o;Z!?!FDEM,AdI-M?gWuA.YM49-[=ni?"!-r7bklY]nf:Q<'&0l;%kU\')(KQCtjl?]'q!?CPE4NGbL)-3,kI9$[GPML"Arq/H=bq/BdZ2<-e>,"cJHehe<jU\tmB,Q[bHEt;S[l9nDM)iu^/:b2XH@;*%fm0fM-QIE0$f:YIkI#8s#A`,If"Ej0h.#NsUEd")V4*4@j.1).gA\Ui2BWNB/`<:d%Tctc3UZ%EIZZMK0g")_rt&h>a$DV\r_^rY%&$sj_7kbGAk&Mg[ReKeEH092HW1%&\)l<+:nJ%qLI\^&Z/0*Ssd)$o2m.n4%%Y7R&3"I)hI.?q+ElQjKGHbl`*4kOs]Ckmq]=YW:%4.j:NK!d7UHNYRcs/Q5KqP4G_j3t;;3So1GoP&^(LZ%INZi!\`o2:&9@;sl6)5g#%=MofC_&f!+oqaGT``q6PqVWBCg,qRC]Zm"Y%%k7\8.oKWGcAJ\[lR>2a9qoVN/8[[jS:+Z>T$Qc*2cj=m]8cg>TMj[$^Rm#n'[Li].a'-OAo@mC+&97'U\#fh3<4n#aJ3T%B"Xu4%?-J"=OkM"<m=!?:?_8q5F577A9>1Igj5Elg?dH@bqft/n4^VK!1(MGlO/JZ/%_@GW?Ju*(6dt;#]30>A^C5Fi]TP@9BhS'riB;g)%K=fa'rC5bHHLcL`4<?7&NjB8J$CcsGZOlRU=mIAH$!CY_5?.\n:VK'IaW8,(p-IE(4PP13eGMp"1(p300HUnIj9Zo\!aj+-;ls-I%Sq?;"'NF_rmoc)WQlVHqjuURZC[1S!Go7n#ojWANbX(%^C4@tIF6CK!YCIQNKmN@h,XWn%5?lJb"+<\!J]I<l5+L2F-]QF[PWHB4%Ir//5f#-kDiDqnnr/u@)@G^<I+%lSTDO.kX^NdB:lpKZ:gf_lD/\Y@*=A./iiFZT8D"m\qFlW*Frt'Cf]tPpc*Al;IVX_@5N7Ar\%\^-Q8pYrg84U&'q;ge22\,O)qqA&e?0CfX_B(O>`;-3r%dbFZ`gs3c"2a28iF+:N<]NE0'K"(<MJ_'6Q5f+V:^UD^[l2Id9=2-;/%1PZqG#boU"7+f[U`CqKijEm*N?L55HlMBf/f3)D:4qtQRVk59RqZk[EjfgPf(OK_T^WIHG\BboGbWj`01je=TkrTFR2bNI::=\=O%q[[`=c;Ji]XBmO9pJ9\T@'7h[BKRe'.X+'?"F4-p<;N2mmP!,4]XrAG*XRW/C3RMMIsnt`RF>;Is50$=i_X*d@;<9.7<%WnN_Xrn%'a"p]Y928PVSlPOhhkJ]`]NHc-(EY?p2YFWEL?aV3,W]A_'7c]%t/SW;3CK9j`.V/&!''TK*'OprOgkPUe?\b=GS&"@;a]C;g:T"%X8k%W14)jq&\R=.4-aD8aRkg=L;OF//OLWSWl9:iHJ-KA7r`-k`hTcDHb3JKdZlnR(7'.H)E3OJ0(Q/ue\]!=7kX,l7AJ]fS[BBD%+P6ChcGuL]CEfN'i.2B$T.IM=Bo0b!@2M+F;X`t[)CLebJ5kEA<%Ff;@9IA^Q)WC^9p\l>@^0f9=M;d<Q]6LA.=r\MHFLJ)_<>Ht%M@O5,mFB%M^nT?TlGDP"r52R?fc8D$7]/U'fj_!FFED79eHM"Ob%n!cX1]"4k(1<dKB"nUi%IHa__Y];<3[163bLaYb_/Q=GU"<=%;h(>Aoi/Qu")1`9ViZ`+FK3S^&o!md[dgu$IL&_eV,OSPe1^aUVT8PErRpD3R_WC37QhJ?j3o9`cdQ@"SuU<)YuH[-(/lo'oR%[F%T'A/:T2LcNd&D\-W`l4=Ic?&A5T4#t5+pHGqo`BUgN<f!.];rG?T]s%#/&E=))k<:Z`1<1h>0.g1mYk-B1$!UN_?KHZR9slfl=cN%E-E.eZ$mWK7N427BL;.mV_<q0o6/PBn?JmeXUcAqd8S[JSd&<p5.]iaX&=l#efKAFTOn$(bV5RG<VekDpq0K`67R_idt@'C#XH+$%n*D:VQm5)')DMf;3V=MDldM++"2of:#J_#CMk@-f>Lq/VZ'.lgerD5nfEi&6]!^REYu3IC*OUifc[^Xp#eOPh,7a;S0msd!SVTZu%N#ts3&n@^t2]D?2I'PGD>1>6LjYnIH_)-brr7,JOpN6FS3B$WirTm[[O`Cs>XI.dV`?'i=B)!cjB`SaC/gCghQL6FHK];Y_G!gf?%Nq+QD@^B>B8^8;7ILKR`cb`s;EUFQV-.1u3&Z9)ma:*IBmV7e4_Z[dEfd.7RL175kd9J[.1>;E4qLmuaEQ!#<lu(p\&g"7Q2;q)B%M>E?F%Q#+f.Bd\I0>Z*[B/q2]P'u-/acjNfcBMLlj'no_r#)lqrrbQKh&F)L!?i:bAJ0T$E2H,U'[q<=?34JJ5cZ/<^e9`W?bu<N%cXm]sP_>QU;u(2sLq>.3D#[L/)EUtXW/VF\llS.RA\hJH2);s-K>U#X$a!O'D+$Zfs-*jEnM$?dc6\IL0B/^O>!#M%UUSi73Ct=5%OFAXhW-JiC\A@<oiMsY6n@$5BCC&hjSf,o[UjRuF8kng)BP",\9$LPEbA]r\MNg2_6G!@KX[\mQK#XA6P")irosArF;Y?oLTQ)fJ%"DqA\NQDLFLZN8&]!:3Lb]91bl_G+WnU,&W2YcX4rjdtWD-1Inh8Z9jCo<?YeEG7+p#*35)5*[_8j0:4U0YI]W"8?t.S:EG%+SS/%Y'j>%#H_E\)]Jr$<8;V`>==iOHg>TmC$OpNB"BW]FErTJ>.%P#SHQ[.jlp0r/)$7:%d701%HR)'Cse!H"Rg-iO;QaeqbG[KdBM"L%%FHZTTKRtfe=bU1RZX:0]A"V)q?sLc%L)D>4CmZM*ku^R_AKCqX.9acGj3B_>t_:p](OJ_<oQ$W=(i+eBW5^N?>g5]c_qT9b'>j1%9=8k;YKXEK\$E"#bmbtHV3YXq>a9H5V46g<?&a8GK7W@8ZlJbV%VMd7F%B1]f!*O^$U+3t/+!:1G-p))VG07Xal2qI`+!N2X?Iih%V5DKmU:=B&4G@Bm<1ck8W8XR6XP"L`I;EBtj[QD&Bm>U(@eTkKNkDAlr+\CR?.Gs,DLTg"NbTHb;S8KJBZlbhorQ>:G18G<H-H@;%JSSRe*WJgp>%"aA=0NB&hPUu=N_gWZf@>l?fG`1<_n9f46tZVH/d`3!U+:_rDM-P`PUYQ1oAhM;n*")=@rleJYTBcP9OA3F=)8s[%3jiqImHP'ML+DCa[?Vg$0k$!elnoa"S0i%i?063%Ddg/eD6'1E[.'rQ&[!fG498Z4enG$.0_Z<akh_uk8TGmF1d.)`9Ud-/]^Fm`%k`)TN?R+>((r""5WEC5W>B?93]fh<qThVFL!IVl_J4e@$F#4q3]-25C%t16bVcIY^EPsPSjfjN)EDHjp1^3U@<'$/K>`lChVP(XX%VpMVb/ep")W^4D)rt:nsprMR/^r#L+7dj@V%]XkAlQdlI438;Ujkbo!qHmtlMsnU"mHiIe2(7'5,L">0pbaO%9)C%\]bJ0$,ip5W%E',pHD,]Aa'^@Jr='t-R$[?#sk9,H@[R\]1QYIO,ldoRT%hh'oYu:?dRWj7ti0gHflV5h%e)27LI$8>_L9<gb4O4!74TPIJYinI,%,^UNE2(!YS':=,P8&\M(SV@s[aSFImAO<ahldH`,n+u_ApSI(4f:m7rC'd)#ZF-)6(a>H?.J-r;69+4VUWI*"(PHt)JG(W??iC,t%AJ4'JB-)3c[jK<Ca&Mi#YG4Z_7F-&(T(W1pg4E*A+L),90<Hd$,LB0n:\d7.!Xbb@kh3\6,*9tj-g`=;6/&__m`uN;TA#Zh!Gs4O%3A,HPdSe`mXE;n5pHkP7BEPW;(+GcHXT^m=D3t;cm!8@+`1$nXT(Z'Y)$F-k;[i;(AOAP(5[(l>_KH6[EB+#MDCmr=*<R;a`0pC7%!E2:W9&&iBb4>YOdPi<1\/p/'^>[,p8!WNkm*Bn)5"lhql_SGge&m'/<XNG2/[YZop&&K.(OGe'Oa7Q*I!f!-Y0@\q/V,Z@0XXCV%5_uj2J;=b\iKG3:^^<'IBE2]L(f@`%k2E/n5V"MT/!Q-/`WZA=Bnt)rMZkG"q8,c$_NPCK[;l9^NTrpQo0n_!&b6KHCL?`GmgHpf%(4M3'#dQ%oO,1Nck!Fd?`d(s5l,Pab5p6gLkMSH*MEr>B`F-cF(3J.=F?jVlMB\-LZltNS07[;9`ir`W*X+A\eBY<]RtX1U[PT*U%NUQq_Cs]bH'R!0m$G9Jk+qX95=9kAkKQR@LN$]Od4@s=R5]fNDj@%_@(O&/`&nrc<UI'KU1/LR$0b?`=V\%nqBcE.l34;Co`^)is%Rl$*`cjlFDo3;8k0KWLS=Q/mW"eFSHJ,sAkJrcP&RFVcYn/M&^]"UHMaJE#U_gnZg.hKqQ2upf\mib/.V)UGcZjlj:5sbR4!XM#)%`ulBNkO9&2p6[4XY;N7SC'beXLHkn2b`CM;3tMa$[6buY^]P?;i;m.MPHf\[_!Je3@1'/*OG0cDem\I**U#<<Bl+Ue$J]9eKtYS>%G7&G^[SYI"MO5"bP+GJ5"<bbg%KSW9;o&5$W%Tu[*/Q)`rjah_LB.rl@QUE7d(h4!]j\=f,\%sZ%!jiXPD3TR@?U<)UR4.lYgD/p%o78S3R"/o0,?n)&M:33lSjCGoP,681J_C)3"B:EC0[Q/p&U3!K\Tok0b<_4'P2!<0Tb*l)4[qK*`-#`r5TSfCKI74Tc_E4FT4*nG%.A7I`"b9G%#jncBI"JlBj`5Q':l\MV%t^O3L-U51kmskj*M8'4`M2?7%6+A'6\t".h6_,5__=*Ck,(Fcj*.H,*M48g&3L9CCJ2k=%CF<O=hdqlR<09bV@;Z@&p<$Dm?\&>FCq=0>?()aHH>Ei;"B`nn&/]D(5Q]M<,$i7MGEHg'>*HC(LrCiA^jc?'J:=qmAso$7!#X.U%m0GDXb7O/VE2oV/U.3?sLfr6ge=#Emie'[OiBh(e&r(QD=[H.g8c_juWsuA9;@+(RLR&iAUL%R=0t\HbM'h*K/klcqL59tdqSo-^%>j<.Y/Wn*3Je8E2ThRU?fH>jpUPK]?lbb4S?"s0jr1b>V==&Z#6BFNh2GQtO-oVNjmX\hF*\B3Z%<OeLpXO[CjS9G9i5XMsW;X5s%iQ!o+inG:]q:kUk`i`fE,6\Pg*Y]>k7`T0aR'31YK%?3\IY1'Ne.-<)189PK^q"1MmmoiD+eq[7dj-0W_@1%T^of/2a$O^780CT"%2^$1BQAB5d"GIaI;Ep`hWBh8u+4#k0FJue_"FdfnC,k,a*V"'D#Jkh>k(M\i>p@?D8Z5RePu2frp#8@>M;%E"dPs^piJ]fNn/t&N%=HTINpr/9H"pBLnF@$q@]Pr<^EbK6%#\J8N]$V`+OKqto)T/sKbTgEJ0c!NGG78r(CC@S'dXlY`'TP[S!N$Qkm?'s7)Z=5&[1Efd%d>:,OgQ4Kh!,tsF64P(VBVgZGc@,eEHr"]3@@QFr:eWEkkg)$*F.&0;nT.-k%mX*+Qbnf&9Dh.X-?L_"iZC\0>`T`dNJ@R&W1N$\%)m@4Z+Zi(%O/G<fLqFpHjfnn)3D\:uYh3MC:)8GsT';Umk35ND2?X@?oH'cNi*#?4",NVso.l?c#4WYr;r-V7H<t8s6f4)9/iZZ^%&!\=qj.[GVp6)@p"(Ldn6fpCJOrXQ:MPZlMfhABpXmJ(,WC.CUkCEFL=GfgtPJHfE%`GGt0?1@QF<`^2_13hZ>8a(Y[0_aB8]oWT%aO@Q5kUWGbW`h\#-:AM2fZ"PXFUIaY7lk%^=In-^_hio1/i8,E91me=%OB:<1P7r'r/i,BfB,q';m:o5SB];FLh-KNOPiA?/O$6d%)H=9V"SYsEI&4,3IT0bJFU9[M';Z7I@,D79."m-K)Gc5>id_U*8=LG=3,oT(>(P05LE@'63c)]"]Z<0dYaCF6-"HkMfqYSY`&=%k%0i]H:&r`/S3hSkU\V\aEq6D^.7_],6Y"pc'J8E:"N>'@c":O6#Q_Slgq1_#K2ceg:Xq<unf]6h@HXeeT0M3K-Nran[(^0X(LlB&F%3#4P@/j2f-AiLBrM,D&d)GOu$RMcl3DaGfW3P=iQRl.>O,t+UL<D"+A\?5j7`bl+,]&A9)TLPhUP:S`&,,[?K8j;Nbp@<Ra$\:pg%J`sl>66jiQb&b(Weqg^9c4K@?iaA?R+DiHWK*fRp_=bko"/@AS3Ck\4-ANBEhq=uePlGS%U!P*/fhd3j,^IaNc]Q42\JXF:#0;#+%Ya#l.#kD4b"tIkOEoP=T1Z6]+@:pWi60L"b#MPU[7?Qu!i%PPTq5M3P'n2btl*t^0,Y8TPVZnjOTsUO+AeW!01l%4;F4^WPV]0?)%e0RK[2D"pCO(X5[!+`H+GR)j<M9H..WN0`&BMgI!7N&e/j^A6.#DOQ4),U3p[Ntf%PZ]h'a/l288NgaVP:?W&h'8"o>:'d^NX(?<%_!RF(=pKHL32c\M@046KktO6#AnjppWl"[Rc^H"K5_aF*k$:AHl1`j=QkDtA0ENA]jMT"%Z)g;gR]M$,)A`Jg?tkrmb-aqPmQ$eY%7X;F/T^[?[IbFoa5&9+:W#,%Jd.(oneNr"WUH2SGE!b!eQd#35E?2Pd-?'U]e2tTl$6<(Zl=e>fU27'7XM_Cs&.CmsBMt@KKQ`BP%9^]aF*]&='km6Jhe!;^Z05D.%,/u&*TJ9\k9gC*`k=Ps@qjT;0kk30c)*]u;T6g6TVE6"O\A[I<K<D1#QU6j*C1%U+b*8\u#j6g_%$LK)uUm0KsJP%^(F=hUlqV$35j!b+&%6gu6:l(Vl?jYb978JNDeE@8abd%3S?3#^,$:,NVC@'0b=I:$f%]--9jpUE-&GemC+>Gs/%^)aCMJm_4CM6rLZ<!cJnO@$c2ODT>$'*.l4qIWh74s<I4P]mDSi(KF<Jgd+@&5WPOW]2CT"G_Od7Q`@<b\UZ2bTV:b?:Kl=B/HWB%q$`b^9A*2_dQr#2(r7boV&;fI*J-6VU89o.T,\srC(D7>6:.**dI'8ZJ@l[0!>.`ZbodD\JrTRP`tpIXDTj6Mp!&\\CS>mU0n6$)%@3u9&f+nutI"l+E%4_M%JM85m)'B!/2`o`FTM_BrBEq_iG0HnV"Ad-/S`r,r;5mheNrk*I.\mPp&V@eG%&nkn1[GPp-C7"NmW%`p%'#Osk4%'sDf'6bnO[.@">f);=>nn!7G(ON\bQ(&l/eCj@hMet]`WRQAFZnTt<jp8C'(He?@1`^9Zu-$BT'm.#B7Pe/>@_tMBhep)%7\4.Y7:Ya.G9^`M@Oc>rI7t)1'FoXtLE$Y9.h4$@gO`dH&$uG:en's)5psbCloF((R]1j'cXLYI-A[RhL04OM1<@FO2OJ<L+h6F-%Zq[iXXpG<o#^!mc,,o]F$,\8\2NsO*n9ji37`$:hF^28%d!S%%6t([FQsg_k%7-5F!>*n+mY\Osi`-=1EBlrV!5\m$RW0*$m^s/D%Ze:p?peZ]f^`RS&[t#7#8h%/B&rW6g^;1!VPW%b[Y_m%q/io\mOH1^=`Oq6JUI'rj&6ZV"+G,hFgl@']?%R;2%828R9alsBbDZJU%f-,UnR/J`R'L#,01+0&DU^S^lj>l0R1B7s$r/"^-1uI9I*9!"?\2%SIJXf6IA@pu$=-L]3ga;\3A-l->Jk':ofodFVkQ!<1UbkGB%\G8K/<u),nqJ]UW,.P-SN(^W"Aa$%.;H7,/?&JFh7X?--DPL*RbbuSi7$+8t<LTC-&KRN2D$*Y.R;!l/YZ["&/h/OXO^@CPaoM*r%W/nMhIfQ>c'*3Uf(H2^anp1o3HcT+kKHM*mQC'oG5sB1J+imN:/sg_d.(9>CLk*mu,Q\^DL4GMU64aMBJS:bfd_Uus@#YY5@Ft\L%GdlBA-><Zf$F$:R#+=Nj!Zf=X.@VS&[6s@+&>eZr2ck@uBXg!8gSfI=+2^NNHaJuI9?6Cq3hRU',/+(mgb0kEK;"N(qp]/'&4BuX%+BKBk\LecmW,P?*@V,qUs(mN8/(k,KBMfn&#m!iU-r8_F,DnaRUCf$GLB*qZr;algCeR^[Zu;lOiP?+)1b/<@7M7P4huocF"[TS@%!CWFAV3r/3\CX2oe!>e<*NC@O'1CNLM`p&]QNgH(Mu5;HKk1OC@uE<ML&"3mL8k&P3.N\%;fQdg+OS'&`h#$One-'MXsQn=@3LHQ%r2HJJ#SMP])EKQ'8e<5k,5_L9@N$4X"+d,c+PXAn=rntJ&EI;4$G@$l"-#;FdnSX)e@r)*[*X'N&A*7Uo)XqC&NDa7Th,53h=hcJ%=<^!k<b%^-3ET[K%S8JOr",h&Upbqp)SsY>.mR*H3T60h0X.<U#QtH"S]*l<R:AL=nIdo)i';!'T]b%1nK^38$F@i\W7kNCKN8jh%j"Q7u/h'HK!jc1!=i;\H]3%qZ@kL2tl(UHg<XLc/*=%g_#Q0K&0#9i8D,D;[og_X)nVk@0YWY!nB![Q>_VTf1R3u;im\c_pU#%U9%?ssh1Ht(^&D+2snSn,jXC)t-J*&FUjAhgFVj/R&o<]LA[=n@BYQO&9$!*TI[FWjTX)BEB$l\ukcN*529U.\n#AN,g:kQ_I#=Q'U_%(Lae^;?R=u:Ei+f+JmStQ(gUH$&!ud1GRr_g=TlQ)'U1ogD%GVUnZ-O]fhNNg-6bJ&<`X_(K<*4+;VLS2MN3_O-.M_0jJT5:.Af+%L+QsY-t;(_+L*qXaI7jhJ.U)]rA$`[*gPq+d8C[q.&lU$!+MT'Wl4=h;[G(an0r)pE>D4cG0;`%c1@>Y%L6&:pGjsL!IbBc`4h6\%OTGV:-"G(%5o*Ub:a:P[`>`$DhSS-N&/K+.,)cn/+uLcK\FnGYipEA*;O,%X8pW7iI,c?EU>q;h<D.kKZqnt_:ZE+PB[:;>+>=DN%5g-\%$KFUBq5\.@*'XqtRA53RR4SJcG3G&=_pf5MKK^h/DM'!qdaaJb`'LY=cW;ibMBIdWihdOVi)j/"'<T%p,XU-MZ6=uV'nL2]%D`TGU3%ELpOe[\lJR`[]n2!30_MqUu)0a?8)=T&IR-Pc&%LM?JZPOL*/dMjZ+sR<t6+e!O\O"`&p*+#7&pD<BOc`k%+Pr$8S1gj.%SJH:p&BK3\II2841331%`-[W/CWIJ7!_)<+&fXKqM)h%:-\I0nK#f6,ODq2u2fr>nnLtscLr.5nq$o=ld"MH]"N[?.0luK'4K=^g%`B)d:`oRSIdgaEL3unE&g8.;fT,ghj@d&J2g0bDBGAVRu>L^s<?rr2(.ZAU"W^B%E+V5BUpt0)D9l[/J"N*+aK[b/SU6$<7;t>]/%`j-*1<!!X`BGFPf<2-4/a^8C:0)<C^R0.P59n=Ec`#tgi$J1,las9uGT^3iK``+gH..N6=$`/bcO\]kaW-j5>!1,[Vi$^)1(F`1X%cZ3`62TulRO5bPC;lRM[\;AkcM3`mi,M3eshMt3+dE5:(g3(IGd8\&7UUl>(8RXA#RN?fo5TV;]$uW!@fO>HR>8Y7J83u.]%Y8MN%.<7DI:bP-kJm;m1(bojkL=&hYBF&/1d+=;Y80\m8O9oWIXF`XG$%5.+6BDM86H5d$*(W(eoo)U&M51?%XA&6'dX`IgLHsH%jb6#-%g8d(B#9tkS-Y^)e^-PPHgmVVK@<XhD641jeDJ::#MgS(,-!*]E'#>@I-pWg>cR-NJL`0cS=r\q5[_d&`=s3Xo0#pXL3TuKFM*'XZ%6i/J!7?Wgg7l;2LQQ/YRd>sQI\D<%'8kgokAq""=AOlJ9g,[/D@*$EZjU+V"qRAtn,]P+io-$X1p4Fe?80A3%>S@28<.s@`="#NN%(bNtJWX$=^l4O4rRLV9<*HE+8`q^Grec5t>XX;5o0cT.Gc:]*`$6qOhpORWS<t'nq1X34?$hf'88!.GA+K@n!&8c?%d&9oD7fBlb%ECZ):o-g">meKcSc/BM;B6DR<[QV+'SVISoN5+LPnhP7&8bi^Sr-,@l<&YS.#Kp1(eer%7a=H_=Bi>b+<.3"J1p`b*$;^aPg=##H%.VTO'MY;0;N7_1W=!bNPK6e\D$u"jTUB1tY0ksS*ae`r'UaiP^Cm8PXe<d\ciT!*4jYqOZ$Oj:+HpXt<+[odE.e<u/Q6":2ig.oY%:g_WL"e+=7MV5\q-euE"27%;s7Pi-*X:AfU'kOq\J#S+Cab#-:)/.tU.1YWF9P_IbJ'!'s."@'W^Q'E%Z,W$h/8mL'V)1nG@##n1%_unC:0HpXl_!>b_+A1UD0tAn>JK0FiI%1RW#B9FoU3nB7fas.=R$ORIQct^CJ]ST^!3D=VeM1C81oF>mRnfZreQBt&5a:T3i!5H=%9NlOH33Ng<fB)F6Q\@>fW8\Kn(>>E*8m&aL@A0u>J]2@+m4_AHK(J9!A"29^M.n*.Qgi4_[cUC!@=HiL3:)6c8]qS;4n-6EJV<S]%OQMNUoLu&pkG+c9<(oRpnLcd'&ZA*k\o<qjf+'-:Bg:/fP!OH'l5Q"=^>m7G7gX$mbec4KLs!bICF/Ch_c77?&EJ)S&0^%hfRDJB%5qjV!WK'%a"Dri!5=R4sdKh#nW/>q,[\BmdOSZ>T`As0E7qb!-+bU\5_C%&?@5aDOX"J`Y-4%N^iG?IZ;-6%Z;RQisdP7/4YXLa.%KPa!4&j"#X\fCPYd,ODXY8n:1;4PUn/5G[Z-)hjg[@\hSZ)3g2`<hV%NesnA6q_NK#XQ*B""q9C!RV)X9p>s2j-5,Y+-ct(L7*/;%A=%Bp^bL1))RoRa`V#IQenR<Zn?,cE'&s;m,H`+&jYM3c=$m8;2CR="A)t5"+*]kBn7adaQpcj3,G;5oL]Jgj#b#opk+-a*b(*`T%[4pu`nck0FC^QD2E\6k;a9//rFT>8>"oCkT&)jgL7IHBs+d/Q*M7kN1iJ*<gAg.`M\M-0SjQ^-[DE/t8TgM6HZeY0m-dG&3Bm7Up%NG9R9<Md_iEWL6?:c'()LYEGaLeA#=aKuYqJ7jk-JLRBhaQZns1lN219:ul*KE2)LNbb$5_Sfr8##S!JS4r04d-EUY9%*tG`iHU"%B_r!%]8@ogC@rij8!&)CC0_Z8d6pi&=^g%2#m>Fh5]\AD.%Nce8d.LE#%ell7G1+'B$nIDl\bKA'G-1+@BLY78@B/>Ukh=3ERgpJ%/NC6q"m9,\6!h"eT^A#D92Nj8LdIk0%qG0b3#NP#E)S;=F*Z29VLVebS=tiEDrfSLpjuKMPf5s)YrFt#V3*=)Ga),E[iLYa"`c>o%g"lbs9q&m/:W=SL%I+f5.Zrb&H`Ze4FsoPZ^20tCFaHLH*hapF6rW.E;:b*]'$0IY6r7fmj@d"IkQp^p/r*6ujq)M9:1%M=(r9G^%K.WTGfl.''Uou#)8RIZiMh'lD3uhIohC_\VoYZoj<J4US@o^eT<6.6,Wp*nM4(:"OJXQZm_i1s</6T[re!`E*hAS3*c/fMP;Jo/8%BEYLd-YR*S79]sZEC,;XCc`=m[SO=V6AqRX91ae^$;rWYqaWLbP2*9<edKL;RV::DWPh0!/$"ZhE'6Jh:gKaQIP9L#dDW.V8k^[i%a&Fq%F:!+&klXpcB%rY-YZQ4Y,j@"5Mt2O43^."m#rSH0.1-2l9_pE97^RO[`sGDC&4.ZKV&<30jWIB/5$_&BMinWb8ee/4YuF+g%Bc7dt;0<#10FRX%WBUg)X#&rKnVI;c_[")9+AHKe&Yq*DLEHlubtMA2jXV0=;(@D8^C&1iQ!f3d/'&nWNR2`JPRX<K*U%-n!miYF%Li4W<*3SJ#71^$A_rGFk;.GWD&m#@URQt$nXMuOlQY%F4iTT'fFBen,8STrEQnl.T313#AW(_jmWc'56_j@N/Q:9?<A=8Mh\?<%Y%JdSe;g.'kKi=pOPO(pjts+c/cL%9mhfLDj:_B:V-W#d7&g%14M+V37s99UdDTj8%q.U$7t<<>2u2%pO3aCb?I.[u#5>P<[pf->9b%"t98r2e!IoSe34O(FCpH_B/irj;$Y]cb\84<A:UB<M$S25Z*Fk:%];4Ja$Z$;RE-X-3lh#3Fr?1S2NiE!\9.T+FFljMone(mA.94%!'t]h%RE"<dGs"=Sk6giYs]:m7C[CE9eINL7$tb`'1'k-OeURt"6#!?P,:#g665$W`PSI(^o2r-9T.pJ=Kb/<U0;`5XB'Eh^_1L:%_QYK]rO!7p?S))Nl4F@C-pi^BU)*l)9:I67Gb;1jTFG\jfV3*kgL4g:3!WG$!qAN$8LG8g&O`<CM9I6dj,6/RlonF)`7j1l:Z&O3%aO_b%@;A0)7lO[fULJ%3aO,)qLiC7fP;p'%:p'L<-47;5#:kZs"]G/Ui<HsM!C[D)D$6%:h++RQjQ$(7-*AM$.U[6B(?>H,&(6"?%PB4hj3)hheTJ-KMT:GQi4rOH-j3(L/J-sW_Ocd*YF(%PiNU3h(bPWOqN0<OC(IeU+DuCdl6,\<4r2MP**CRbT;7$h?92_G7*j$26%Wg8F>bSX@l#jU2Xlm[m1h5H\JE=>%!:8%b#)TOb3YUG&p)cbsD:i[BHqe6:m&fsSFNKF6Z%r'hiB);+9&JRf5+tMXdYe%gXNjoB]%5%S#/>j(,/5Li?Gg@_f\ZS7hU+Y44G]#:C)"t%c2[GgWsO"2q+'I"k^/sYHFh'ZO3`3[*SYS_*o/33FdZMq^o2XUe-4<0-a0S7C5%E3WZ(2BHAF*s774U*"'uM&V^%77meNR]>Zth1UE*GcQ@Rl*)W<D;;2[krJrm0$Bg5Lb9:4:J##FR&k8V5WbfI0;aM1\rad1IJVZo%gF%A)"<CE0ON%C*4me:Q5-u21#okhXU[;3J(b@L*rBOka&7c@S65tXu6$sFjZ?=5OkZabo5c]\iM(6?WJJSLp$r%9q)p8f:Y9:nT%3\a1P?4-5(lO.3G>nSpBc=FqohUG8>e;RFfME1LN#',cAYmV+GH^qA$C?$*i(bGd8%L]I#7AtV:Ug+]4);q%E:7+N.S@oLcS3^eN%NuO8669F$0F"g20c4.?5#i\0Bnph8`fGOi@j='P\1r?f#As?tP>VfkcMTGD[>s^Vt=\e1QBa._=^O(DLbH^NH.d$5#$)f9sN>t:g%d5f%aHR(>@/VVQn`85I:OV_GdX]>aA;aIW5cW?5a_?9f(`d5_WTWp?0$q!SqO&ZV>IX>[#bjm!3$c-Mge>?C,Sf!Y+[Ab01C!fLN%8]>,2p2HX1;hgi8BS]^jjD+6>&XAC98!2(?IN?Z0d]Pg67*LG]UeFWi\.1kGQb6i3.YD`6&Y9(k&BHLfM-":;T0NtC#mMikn"URP%0Kj0NgfY\7jgY_Pd<t)*+W+Z]D'1ledaFh@eVmfc(r.`l.KM^'S$2lY@Iajn%TT<6m=MNM</R+-4>)5EQU"`E;I^!.K5sA,]VL((%ZNRBFUF5X*E<(qqQlig>NGAtcd^j[>^a8Es%c;->5Xe6Zgo%WhV9%A9Q=UW#PT0g7C83U!LZ-f;;%2/WJI30<GYBm2(rkQ;D51s*%.B/k*JV'UJ)OEs5#b_SO:$Y!)iqnYXW!4ZT5S"pT>&('oU+-f2JH=Sa"^s<Q_@`"G5p0j0Ld%a^n3f>YnO*r=!0T-(-R>W'`2@i%%+&u9S.e0AD4FW.o6:lr(^pJ&ISNmZ6+kP]t1%\S4\HGFN/i9:/Zg<jL,.t#[2f<;H9PZ1f1YNac<H0H_FAS=^;Xk`sD0'@,6e7t&%U8/:'W(jN\i'X;("+<jN,=j5?&m`_bJfIt4bc\dO<jY[S,]F/E@J,er3[o@dE38Y&0LeP,*9MW2`gZ._Z9XGR@T-Zro_YMC5V<t5%Q@s^dWuN"[>N:fe8OOYH9\R@ETb5`hI&fYgC]kXRoS>h!O&?0*n[Q(8GN]Km"oH=iA/N2kP[n3.(pXQENc$:#N9(UAd<R!L5aS(\%RQ8tj.\/Q8$@?s3Lmq7Q`'G!ea+6]@*(luP0bL,eI^7Zj8Y]<M1UrQ<3a*+/g?A9-Y[[YLpQMNd8VRpYKSAT6#injW"-X7k9^1?#%,b*Z>3ODT$L-F*^%('ioNG1*S_d"BjW9Z-BUO205.M6*T&8k0a@[s>_p*BTo&Dll3oWX2'"=I,M@IlU[+KMEl0nL&sVcSiJ7hC$c%OcdHIJDWM!%4n4eKI-cr&P/bTE''Q?V<QP;%e[nrZ4RbeiTSUoN2:UcCg2bE>+W]F'">hrCkn?>8`NB%k\q]dp19WV6)Dkf8tVB[%cZ'LtY`jU3*VN`eF<GL&1;tSfg;Z#a;KTAlSS#,o4)<mPEf)=!ib>cq(j>dbW'Jmp2I5<o11NsP%,n=%,Tq??`%bu2JQOW.TdGt*%VW.?X_ib+FFtBZ47ifbX$u&P\ohYeTGp[kba?2nhn7VtBPu@])eT".&.r_;;&YO<kUVq'VnngJ2`S#(4.!\81O>\+V`uuEL#G!o]%0O'E5!Q*d)U_\mqi0"/a3+H";[DETj#bjql%>o?M.Z0.7LaG<,8];3lX@Ef^o;+YkA]K<npgH6C"C67MF(BV0=L\@L!,)An?A/*N%4,9be=a2Wgk"//p@rUGfTd6p+aFd--@`YB/--@VqS=;=M!WcTQ$Y(AQmIIY#%M.O0%\#&amj3]%!]nK^cG;jO%S`2BBg*:uqf$YB%AH^^0CVt@?1<!)Kd^`CSa66,V*k*tnr`Y%K=OCPf@TZ'qb]FKC@c]s(c(g5YEblt/^.la_:_6Jl?)mXl<0"deND,d2p,rHm#jC7_%/HD$FT?/FC![WL*]X7oeKmh5Hg.'#BBH$=sMno`WXO`V^$_KkL_bk#*^r=E(l5g28BK)"C+Q8j\]K.G)aMZV_;\2Qj5o/0p4q,I<%3RsT@?7G!J0q]+8>FRGlE15iUOO@"+%K/m]4\DD51mO'Dk#W[!q^1amnhW(=4NHR&JHZ+\Nh^]K72*^)8&qERPpU"!ViqEoR!ZZe%7I1j^i<thYE6/9X9.VBA>YIs*C\a"6TEl"j8[r(8=<O9BD:>+M;$*^\D*V9']#HM7XQ!2em9tLW-V@=WWZD:W)5;Xda@ibS1e-"D%8MF.h[ZWCh2Wo0lKVILC,j\'5Ebu!J@L*26\5eG0hktU!0g^0LK?+n65X:g=IHb1p-5fi:2a^?k/CjpPj&tDS46gfL/S&I1UZ.=:%$O#O"=#uP)LK;b;=]E=3a.>#ejDn#<^5A:%6_BOo<Q%uDUGS-/J_TVZ1b2<'$Y0cg68)#nBC/)9\JVImR]"@u">%c9[%U/d)Zq34%DP4?1=NgiLRS?--OF#q:Qq/Wi);C)8'M6jap\]E_Yd$8a8Ml"m<k9Jtao#i+R)LcD:lNV(S+c-#\TJ^"<!r1j"K%n].*7i^`f2gq%pI!3@=`)kOdj>Ce@mYd)Ph8*+#*X3[a?Xf1&#1kc)+4d<_EOiQaW5T0J<C<uedtCGl>0OkoT7,&r/pF@3FsPII"`<H6eBc6_g$e=%T8[>s@,mQF9*tYQl5H.CM'pTn$_%2\]Q8lK@T)A'55CR)nX1&Dits!gHn%6&+C3rXQ;jPZ9cQOB"Ig5DK*C<d9o7BhE\EHcCs;^<%4HM)2D!K/>N]]lUM_5saI9P7"F3f6(K;LuedV@+H=].'Ad_Tg1*sua3=6n50YZ,L.7t`,,+?escc4i:]nH_e)nkHu(nobch4f4(o%?4^G,^o,;BY3(THZF,Q-bSXa]LI"M#<3V/B!8:UU%!$n20mL@PRquo9/IX"=!dos@]GT"hl_8&W^_)qZ=!Rp_c/prs\M/PEP8P$3%4Ffe^(-YF(,S$fHE/7/a68M#W-kU><@7n,N5doUE(a-om/3>10PWa&4P:7+o"Bmr=MYZNcDbLcNer;pQ>r]^RP+KcWnI;m^<<X;!%'7b1&Li_gJ?R=%O1,P`Z%X,G"Ih<+-au".VD./es5o@f53c0#g&I!$XU[+[DF.%FjAhV4e?iu*DcQc3hQ'KVBDCJm?eLWaN<D/hZ%"k3^!W,C9EF[Fi>R3nOm)Es<O8A^Ajq9lcIc:/8lZ'+]9as'94)(E`8P;B@LOYoQ7#]a_`Td-E?U$GV`,W$m.8Y0XGM/L[]2'm6i%AJs["Ep=&W`j*mq0Y&G1RW`eCetm*r8g0i<N3#M'@DXd^MRK<9Pi8,*8;eWpl!-SOe^4R%fP1n&bfq/uRFMd[i#PRWF&lIh@5&ts%#Rp))-uEdS^hhsU/Bs]Ff8"U8HuX0#bpKKH\Rna)#fQ4b.uU2(.D0W:[6dWL5UH,EV<W!^L+*=\;5N:%)>d@"=clfBZU(s[>d0kL%n"QbO`@3HON-62jb@/D@=MIJ]3@BbP'])B=4)C:*jRfpES696[[DI;'D0/X(OgF9XU7=<NT23:7#V$_Lf]d=0)rd*(KR$[e?b6HW%)l*Qj$<R/,Kr$<>Z/\7i.mm0>ZnCHB?6>!S+%<%=Sikff`6KpZlJh>MAn&L/&ee9*m=\/L;gG\0UR6Ye\XIU2GV=frGtlWDQjLq[%]MN^ca#4fTLUQi:X@eq7Q&F7U\U62e0Wf.9FUk"A1$rdV*=.8$b-[@WE1XBK_@0gi'dV=<qSUuHgl?0g&>\jU*F_$e;P9I46VjH0%%@c%b_l?:k1-q"48'])km&$&PkV`tT\rtJ]R.J4DCXQs>UFh(&9LBC>\ZTdGm`I4dXXqbej#sfG,G`L6JsU7Eet][q1-0ZWa7,BB%F<hut`D'Lt5sRP&%6j6H@4P=")b,(sp42NIg%>LpY7u9TL/H4@$Kf$$W:iB8aG8r'L#rt((#MgpPf3_,+7gbr'#*&k(G7*2n>mJo%n=]@5bm_8?`HD#B]fhE9bS)$j$ls2[9IScU8@.u6.goWFK3@*E>D!DCg6O0YTNheoNfcH"V3sp>*1ARDY0.[&o0&$VNM.:SWjpWO%&k\#p=UK#<2GA&;iL&Hla@Ka)[><6@rHU=BeOF#P,a8rIP.rEX0NUa#1&?I0D/u3hn&A9iJPLFKKRnn=KQi+2R>'Un+,Y_gBj(hu%:u.eWUT]ouP)jm;^,:Z:G^qc3goBjaPo,,;AgGN.7"h6!JRYF4r>oR^%D\'qqCi4B_\ddqO`L=9L]V`MjEKT>C+$mb4)lK>PG<dP%f+QI%7E"$!Zu[E/OCj3R;b*#1KS*I^E&)9'd)AJg)i5R>5BJcF+1?3;'tW1B]TI_JE]^C632WM$Q,ICX:pR'J"+di8@cZDLHT%3!%.ZY#l<K#9kHI=)t(WZ>n/ihEAW*[^tn8L;f/%lLiSP[W?O44"DF1@eR:keY=+@p0XGuUu7%ED\LFL^:;]3NZN[o%E?q0S!NC5l5)%2YZ@m2@a^cStG1CQ(]Z?c8J.JNj(Qd[;3:":NO+/mjoWqL>+_Y<eOl4lt<oPiJaSM4)bOf(O-%DE+:7"6rs"@F.k0I19?_%`+1mo%271-@27ZSG:r4m9`H,55ZUlhVK_tBX/2q2PJ;.+g7\DEM#t-(bbK9gAY$U0[0V:G:hdBW5I)@d=JhF.nGqXQD,$Yu\3,qb'!Bm+G%R>?N<7=+#tOm5dUo<SZkd?Wn8*&Z/,Rab3ucLJF[7S2\7;6J3rKC'f*2'?o`8NXFmjEnTPT4VN*2Ehe2(\:]JEW,Ya?!4m8pYXF]%4QnaC*j2Qgi&/7bQOQat2mAtG,eZ/f77dQ;AP<@BFN]G6nKZRO.*?<rPPD$00<,09$bnFdXmu/rhDjlL4hO`!O(ZZKA@l8rS6dFk%r@,Cmg/Mg]FetQd[;Q*O#@H?(QZ7aA$Zrc`5)HF!7pMW['eYA]r1Fl5/*Tn/+V:D+D(6Q??PqO#Q4jIcGR^2fcc%d#\]%Vi,#J/F%81Uq&;oL5%9mhpC8LHhK&C)o@%P?7,n<nMB!lHJjfn/PW0J]FK4%b90]OATBpSLmrBPU[*d)2Y%?0^c)PE/XeRg+F7UJPKY8J`_A%<dn-oMo:8IOLUNNiS3e.J_?>EBgg_h6q2/ZY1L#LV?#Za(MhMpjDS1Cd2TMmK'V4=4le&=TtJaoH`X9D&aU)!g-Mm74]*j`3`WPZ%Wi1f0ia5AJBI4uKbGNLI'4\^(Ds*MZ*\e4D^S;Eu4mMT21.p&elUb#;.e%0h"S)GC;<]LC)2(d\`(E]8kgI$"^34lD+kE.-:35<c%U%i#LWJrh@ZhSJoZ"*2,TZamf919DHA-Cl0QK)pA:Pja/0Ua8)f(juA`>@;B%''p>L@,/7*5Hl#%kEq[>"4kL>n6#;@!E^8rtnRH%#%(=P%=Y'q\CXM)$%(-Gf+qZa(CgdJU0J=WUUb(Vj^#bm(a/W*iEEVtn"0FVI(_PG*'k&cGQQ`Q([/<[(\t%+ramD(Ca;oLo1uqZ%J;C4Or?[WPXB]4#@!0D<b];k&`pJ$Q''*.mkQ?dU9j^XZ%tL+]Bg,aO<5`q(l7DH'EtP&1QC(qG]>Y2uXFc*eCG:1U?')85l^,>7%nPb[%\^*tX*H^,GQ@)=2*,JLa>A(5kL9;BN@$;'LY$g.CQjK.IBjP!ZpHojMmUoanO'n@([Qe,0ep^2I5FaC'1g]/EPj+'\\D/g?%[nAga)%'NW&-FcNG0WAd`K=?lkbD8X95p*;0>o4B\X$G8".@lG7hu3^k5=i:.XY<s>`p+(.m:Y;!0d>8UL#=e7+8TAb\T@:E7Hd@%Z(3t$._'BW3/eN.h!B,P`CXZLOaG8H4@"sm^Ws+*Yp5D!Fa=,5>Lb3Hb$o[Ons92)5+<qFlp"ZaMQ6I9Y!k7Fd('pBFgBth4h:]?%d)hCc3e\?;113"gJQY=5.+&je&i,d9UF,,8cG$;H?\"P4m's2B$NX)g8k_KppA%KN10""1:729Y2lMd6>GhH%[B-YYXG)hFfXkc+%1VBlE7n&YS,:W<bC3Qju(AF73!pIg-b`Y@k!e/hU/!:+r=<UPc#d5Y2fT\KJ*FM?I_nFtT/p7g5O7cptT_0B>(&3P!H$S:5VJItI%\)`QF"#!?U=tInfK]eU7\V9t#oM8,?X$-tNolCX/i$$]p#tEN77A0RNpuu89"n&ja`6:\U>S9E>^kD5jbL4e">!2IG86DbZ@DhT?%q-WsB+=6P5lFoV-+^+Vq*CAbD/l'PZJpu:-1M759DKVT<\lU1Vf4:jB=!_kg6$U5k6]KYB3Vfo4E%_P-]^'&Il/9G]R,8;`&HKK1%:pOY&WnJ[5-5g^sAt<f)\=hNkNeV3hE)u2'Alf`skTDCKcA%k5#i)QYLW];Z@%\BM"'MI1G@XcVI<f7!"JE$Q%Y\2-/9MEd;c@%'%4V'M<&?BGVZMZW/(Y^14V8cMa&i00mjj-X\,UXi-o&_+<;AR"[pF'W3[a%C's2njnTTnSPj#`ElOhJ_UZ=PK$qWpAYX:k(!;iWbn%@@H<;[Ri!<hq;PR605%F6_liqJahE8?[bpuO-pT"Ijd!A<.%[pk-Ij>G6"YtmI*mtT3+BoLAN2noZQ%%GoATH`@r4";("C>(;%?`%Cap*0A$`hXL)0F`60P-rJf8\Qe6Mr6e$)N^#-Z:Xe^7lYF@l+a9I?"!ab>**fn\aq!_AhAc0?l/MAY^8eBK_dnsi3uKON]+AM(@8%SB=-<U[5/dH4>F^nLaQu$QamjX*^+/T`ZlfX^_;$M/E2[eT4@BHZ-('g(!j6i/W;Q$!X>;pC%R3NTm?@)2&+`$0)+X;"#/%84X_t%+tKENVA^Q-1eq-b"[D@F!fqJ&#E^20&H^,(J%"I5J]rEm+(R?tgFB8-(SKQ!ITb*4pm+nA_Y%+l#H5sHI"+uW#%`3$^5p@>K^2$d%Y5QrDe?RI`S!*4`1]D2r]W]`s@Z0h>3uo_%#Pauqq`3^@5`lP2>iA'3N2,lfo^B&[QM/BJI]@cP'P/71PTajq2DR-Mn*IJJ_$DFK%(RJ"]lugMB(lVn8kfmd-KNH?V)6l>[-'#,Pp/;*sQVFG/.4ErWIbH&tiWpB`@A&6^/3[#j3BU$G,c_O/SO7%_kCX*$,4UFhN(#&6%8D/aU!]7tWJOR0%.e_>uS,!O1,QLQC2;D>p9T$Zh;q$ck3_=(Z9pD`:#2,7=V&WMuVD5UITFnrgEK5fTdOk6nO*=eXQuUZ,YIddO%A1E86GEi59H3LD%U,$aj9E*B/SL`"aAg[,@Fr<@J!brX:UC+gchheDW1a\[Uk-[.U$GS-X]PQlb+*f/3=Q,.+Hjaa`FVMD1-0FsL%qSr(-l:Y^,#Y]:'>Ugu7[Of4!:nQ(M;d<($.?Ua6CauW!)Q(&.<V'fp/j(E&*c&%O+1uQa%#t;P9D-J&gsQ-S&:/SVFj+Hk$Gh6J%!ZP1>hUHVYFFJXEd?`Tl-t4;D#8k*hgZsnF2;#?Z?KQoN:)5dYP.cqeKVXoRC3#GXMp77S)IT*s6b^*eGGel(1:b6/(nZWd-'0;J%nDtLO8RdJPX8^MVBMBpQ#Z3gU(`I$c8Ap;I5h?GuclXg8NQqZV]m2)WrA20:?(c]:2c&R6k;=lUA3P9EUIUT#7(:br6S2B[SAJAE%I[]5OAQTc!+J>_1r-Sp1jF=K#.X%\8<XFXfC9m4nDG?Ym"5tVcB4]AW>'Z2mFX2C'[teCF!g<>JT?H"a]<W3("XIIPglU?t'\jiV%[&I9Yp\%"'Nc^nbZ\:$\BGs#.F1+Z9g4hk7:T7BJ=g>ls\P&c?/s20<lBY]!;.$e$KL'<M&Jd@WLJG9(%;q<;Y1g.]"seT25.,>o%LA@=6+2nQQVOADns+&EUW.P7r-5+.6o.MOSng]aCA'mR"-JZeI,IobBTIM?dNJ$d/6;4B[`&[b52mhRDYZF]VS#AIiQU&1&lEZ[D%gK7gc6^d4u]+q=7C)N]=@&GQ,@`e\\A.k8QcL9J>:s7V'4V2aumbFqQ',k!%09po`<1$Qj+<+ZD:Be&1ZDm"SX<=!0f<+d$Z&%o,%Ybbu4I#S):=g:TQfG=:Z/S`6-?*,Bsd$ta=LdGKdQiBZZ78ONZ\bG##KP<`HAA>=c9XW=>\JLR%SX&B#>_cj[YZE?fcK_\0reQ)d%1X/.Wj!ZhiR;OAk%P9VDPT$q&qhN/f^V`JJ.NK6IA>A["rC=(eV)B7uW9rs`g\,g1abiBY0j)eD<B6cDZ#;s0-4aQ41l$c;58BiY%Wf7!HAV*`M>YL&1m2?*Xb\^V/Rd'JI9PC0<,h3(k(B&Y/.s?kXYe<;XG#l#(%M4?Z3+!KOQoQ^WnPR9P9cC!"9^f)[T"+3-h:h`1%^BkZ:@ffo2jX5Y!k9H**94@X--pH8QZU/5L"Jo-87^%YSk5h^?>G+k]l+VH22r*k!]b`t>du=Iq%t>qh!l-sGj],M21%#-n%O63G%Da"X.'EkT7rOPQI.mdpM$B;PB6aG^OMm3r+qj/c`^Bs=#a)G8L-aH);XGn.l&4FfA5R$R,goacg*G9Zh0kVDHGm,@U6q>Y9CA4ht%@PPXr@\[Dn#C0!oOBOoLa$bI(2))JnFgkY\*Ns+)rRrB5Y-7<!iU7H9LOY&0F99JFDPYM)6M3(d$tLb9A4-)RU13_iHk#X*_8=DM%T8QE-XF1=4!*R2,RFmK?U[7;q?.[&uJ!S2'+Td)HB/sfW;bCs#7<`&#99Tl_`j[U/N0F-;YGI9*26meN'EUp+Q&oi(NZAS$fO9;N%@U/SBcfb;-RCfpUYO'B[Og2Ck10)H/-35a_8;\?CM6[`l.Z04Qg]>no\V1eG/L(pH^'H;#egQm+'=R:_-5nV_`l;Q['1c'Weth[(%KN:6eg84<u_/;X^-FElR91?qqc0Xnj0Bi5ak/@_[Fmaim:I5neJ@7emd'9"%^RI(e?qF'[R3R3lMgZ?;,OT0WL%nN!%\Wd!il\u7%$T7W,hpph&@:SH6%CDYWD/G8VKh*5-9M[6N6l":_TJ%prXm4OZ<@@jtV$+hUgK[W^V__-"L@]eV3QY:G3Ks/H:^F:OA8jc=2qKgu%G=*k\QphW3]bc]%5XtPMj6j21Sk66_1KDC\;]jr=gVAId+$e!-@?h/M@`s(\q#`*R%Z5Zh0*LUk1jI\u25!?]NE!+!$Nnd2E*"F]%.aFfI_#s;?*nmsO(]o#h9(?#6J==WFiR:&GjCV8V2!'>[*3M#Hnui/VA_=;p3g.&s-:/816k&O8:>X+!*Dpgk;(GV#3FiN]%6(T6%b;R*`;\u'uB"$I#*2Z`g]mM8\7DIQFln^c*fFAt*:'^P`5,^JtRM7:-Ce8^6emFOM(%hi#AZ+^6,FC@"1FV2+[mFS!:e%lTI`c'(%-j]%jgo+)3'>d*[J<IS$\.#?/Ho8#E1)7#;#GCjP#U4$m?#,YRb21Xo'YUbERHoIS+Zq8kH!cp"70A2`a_pP;GkS#pm#/QOP=h?+%R_5os1>97ea46Z"A^@V#OBS9W$M1ih\Y7jJ<\k\tcb=E^Q$VVR,^"Su6DN>n8r/I3Y&?aajJff4Eue6DEfV1`);8_V(RoR@Em;NH%/Q"C(K4/GeP`';(RFVO[PB%Ifp&R=26+thTY;2E'=A&Y'1Ji&4l.pOQKpeq(9P%^Jq,.lYX&8,:>3;$P2D$'kh=R<;`b-d1)gd<R%eI,&m-4<W[pP9'S>cagP%`I*g7uiR4g"0)IZgVN`V^@Skg*&9^8q)n5_]kS$KI*-g;`Zn]KLPJ85)]Y35=q-;-D[jaU(G9If/GuA%8kHh7iYYFe6RauBTiRM$,]k*/$a+Z@Ls(,O4^Vn\2^*SMeWn-#U&c_-j:^Ra?"T]^QhWhq>YN2T1X$6_Kh@rgnY,D,/+FT9cRbf[%S/KpgR/sUX!6iC"D!$Hb<7srZ!(,iA\;rp=JdV6p1]gS_=+G'SQDL4fJ>ACJ.?3'sKZ!Z0H+pl%n`/[HW9u72+=o'TB8!#qJW#\\%WmWd"]Ad!$<KblqEq!PN^)=KLNKppF@M8Ze!O8tE9d8"./VNK0g&MII@dU/*(Mo,bS[1-`DU)_i#2r3H8;UWrh<=;(.8>fU&V_mW%0po9U]aFrpd?=9/e-6j+O0$(aF?*6e:86*<fHOP>,^KG$RC2`ki'sc^J,"8Ib5u#h$/pgG"Ptfe:OSE/r20C-6_%>o&2sF&d9?ln%$*+q@)E+O'P-aqsq&.^2BJpinpstnFPs@JoZeq[66TCQ3Ktb\5ilp)5Re(FCZJ"RE].E20D:/T+#6#k>g7[RRe8((PXKk36Z/\,I%$^=,g!V%.B;il`%'!QZma[U^d8Q#Z-:D)%pok!=ec8pqa"\t);3lt]e(+ir$DpgF"PEhQlO.eM"pDNOXFs>.mWF&h&O!D\'CP#[2%6a4cR'ND.VH,.=;%D"q#dhMP7l]Mpu%D1<I:4>.ue>\)GDlto,LlJg0a(Hm^"QT=[m@2Lq'NHer%HDt[C1#b+O_VF=+15a?ITW_n%8]RQp13O`A44C=Nb^K=r)Am=9d)2YhXWZu.`t%hUakA^cFK'_&$oPV'<sR>^+X*NHf!XWQ]5-r)#j4i&)KMakda+EJ:f1C=(>>f&%_BEV\6i<kF3WseC7d==QpW%L;j1-;Dh@1)@K8a0,7#i+-cL$"CI#42&%WBG,ckj/rIMGu2$ARrIEc`+6E0;L?R$7;\926*7Z5kY+%6`Q$iMUF?'K(!;V-e\&LF;a$<6AQ@kreQUEPB;VIrp]k+Q;#SMC'I%sQ"O4%/ScJP-bF6^$\WQ'Ae'c",'l]^gR.n8KKHP?:f#!"%!d\AoH-#_n?@UCr<o=.*+!qWt)U0gsRB=hR6MoRe/tU67V2CN;O)NBc5Pk#f9+B0+aYi5bEmbY`):hr$CN-sT29X/GDgAKd%T,'Y%F%Y_l)8ML#C^Mc2("ho/hE4Tl)S3'fqrn5Z&YZe66S_[KNcou*RfBa9pAjd4MV68<!:QicPeCV3Ap:CYDc,DQ'8-9\.N"H&\IL'&%Fnsjd<BtK6h?%^,m\mNGd%IlY=q%*-0$&NGA)L7klV_!>KrbkWRjLhXnF,-\&mF$<?Stc!aW;;![UUls6\*NNE]l4N,s.EW2I@Oj%X<X_JLc;\L"^W3HDobio^X_>!%'\0)W;!a2onHSPYU?LRl0Pqa>#EJA7-Z.ZP@Vd<fFY[mro$#!aku+rbAsYJjB@GSB2VTZK,@id%$3Z,_ZC,as)/hK5s89IEXQ"tU2hY6jqFS[o"8P<4WHUcpj0GHj$eNWUkWJJ=rT3$Vk7^%n1j%Gr*S*ffWh#GjRe6aP+iD#'AQB(0%>gP>4#II=Z\JmV=]Y0=KIlO4XaEli$,YbB:EjGjR@rO\_\[^DiKT@ebo=>j%ootCV#q6np/dV:"S$k).3Z,(E#P@[<qR=-IXNS,,%/Y[$qDf[%JfUlM0L-e3ZlF7R,db"FW"#T*48q,1`'#2ik[s^q7=i2&"!#X_E"YFmfdYi71)W"<'s1uM;JWToB'f,Vm#)iN\6T7AL%Xe/7jBf4t#P<dEg%cf9bmLsO;p1:G6%F)D\Sq#XeJ!7M<A`rD&4cfPa6a6i6d.Ze9>O:YHe8+g=pmg=jNU&jF+N$G3G!Y;j([,cR%GItTJj'-s2Y897s+.Ck\\uLDXQ=Z\$>O7*I@5sosflOXTf_5c-!2._-^\,,iL&WCcG!X_6*&-6pmrj,sa1)&o25-T<:Noj-QCptK%"icaR1LEt[cl9;SGhpO9l1M^Abnr]L7<&nHE0f+RkY;p.%m3t,=5:r)rVc=O(Vu48;"WBY,Hr2A-*ccRk^7Y`^4WV9Bp7Fm@Y+U6%CSr[*Y$jY&^@--9o=,2"[lV"h=9&'2s%?)Qph8skO84e?QL53<#Q!DXds&&lhghfWpF5HfY0hFoB_P9ZpN>'O]3(tL5h=Gs$u\Ci%l:5HfiLroTP-AeX&9]ZHVqlH/hL6=;P:E&\&,TE'B69#(3(@5i6FMI="sRPlr#VLh@o=W,&Yu[3.(iYSK"anE@J-H(7eJo^:"=-m%h6?%n>m5YhN^XJ/(@t%k21(6^k=Ag)leq_9n?%=%TXPEf@n/&PX'S_PL[4?=[gq7g]6Wf%Xn3TmI'\VX0B;EG;dZjDg,4`Ld)RME%pt:ElUk0!@Rq\FW"A%`2YR6kg1XDGs&,V$2;[f($Mtmb.Q@$E6P2Ot%883I*NElYaB!PHLV1!m84D^g5MFSd@Z63rK]F)f-Q3o53%QY'Efc-S5$2`%PbFkm:Rq0qVRmN]]O[&)&uZ?AQ=ap4M0@bO^WGaX&K`^ue,2":5)CeOSu!+`FpMs'oAEi*OFMIN-UqN,JIZ;Ai8%cJ+6<2.R&OQ2SZ/Zcr@5fE9IUcs@mgFmTp09"o,?)mOhcp$2\*%Rob%$U_,"N2f.0;7>]mg;(=>i,tJ0QQVJVaQ5k;!44?>!XXs*%WDcakK6RK3>O&rJ[Zh0C=cSa3hWgX8PQJ$aX1lo#Zdi!&T:rQP9<?,YArgVHIP_e]H@1-^[Pp`lrZf-/r"^XgPm*okh5kF/CqWA3%?Erbc)(_!qfa3rL?DQ&T.3A"rAYra-AIIdKoI;fp#ZC*1=0Q^FCj9+bC/'dn<0@Et=k2f=hE?1L4mb$"S=8Zj<<>6b:C)cpLfP?e%b1DA/"aFKY(sEuPerZ&_-Ukgk,cX0spl._t5`X0BkDXPE1Z/GZR9]m_T6_hUMi-["7:#Q]kp`5o/esih;Bg&hWg34t8fV6hjQk0A%rH\QC\LbhAB;%u*+Z?X,ll*VI&@%&CS#s9Z+1ak[UA@Ri%?\u3Cq;Ub4R(9?Q;GK9#3-)*4&]$e=EO`#)D@9m".T`n4cGdj%>^$F%63Y'8EPGZ,?$iQ*cfU)oEl^h5Du`@J71XJ/gFI>O+5piG:5Cs\,J'i<Yu7neBrTKZ/D$`j@!+-_FgD@r6Tq0++u5EX?G/?HLd7':%nnmX2>O@ZIPG9q!2C5b\T?(0i=5#fAYmntD!J`OUs*b!2gRj^dX%$I_1WXQ#rC'4Q=H7&7(>u/qLqDK)4nYsqi;7e_3#J6RI2Z&V%!*,,Il>%nc]nXr7@o18.pSIfY@KY>L'@47jdcr^4XLm3OM=&i.aAesc^dTB?K9"p5UX/<d0i_$F$5a2ue9*>V5\70fmTE;;iU#C'%AOfpbm@DP53!$!F3Yq7P87oql(s?4Mhd6.3/C`'8P/2:HPa0=9U95:59fP^WW=q(5&c9>[AW3g]%!#35/F%[:]ahTmniZ"F2]!2#%+R;tmNV+Ig3,Gd-O)u?0@ZP$;!(dGs&qA8/%Im)OQt91,1P>r_7*0[9<`kkJBLT<gHo0].W0;BE;GbOaP7-A(K-$RCbAlT?fiDls%58q:-Bk)HSp@JOB6W+`uW9)2oWUTNS#HR+4CRC-&lE+t(EUT"C-897m0'sI6AOV<5W^$a+HLieU[4HE!@)ph"m;=Tk82inE/1SrU%e`Taf>W+,hd=F*8fB(5&nd6<%Tt=;M6Eog-M2Qar?7s/WaU\,iD+Zi@qX<GX/rdJ4R`#`/c`3,(ro3:7Rkl!<""P@+2GcnqVTP`M%[TTM6cQ_/E<k2W=\/#k,QR\tA_/GX3f>0hi5o*3t>@2^[Ck??gbnp1bKi4Dsn=$OsqZ$-3gS@p1'9]g4[t-PX;U<.+JDVh1hJ/](%iqOp-p5%&2qdOEpZ":%Qj1cNq[d4Hti3,fH.)"7Wb0<P^(UBae#rpmOe"AlCE7&g?Zf!o%F:a$LQCT*l50f)PPhP0A`u0R5AhRO#%n9SZmWZe4tL[X=Yi0.n69k#lJ9:_+`YABh`3\IXhYYFb>8@4.->>i9O.OI]UX3sY&>XoMAq/D`O86*p;3cK!e'$)\mp;1qes/G6/%a>r#"LOQQT#7T;o/VBbE9p1=25>>:q5JQ08Pu]j\ldVVj_);"K-Y-ZJ*l*d+VkGa$#-m\Dc=#bWZ[8tZp"5^o/Ne0-e\s).6-f(1%kGE.+_5(hDk"]LCWe<`hBQ,csr-Fpf8bpUX]3MTWp141+/LpMdoBiQGed,4>#d@DU#no.ipf<IX@ZcP_Lgr2>P*M/!Z+:VN0Go9Y%'aTk/3'<j`CAVn[b.ou<Hd\p4N5;p05.9o`5A]5bmd8abp\n?/qkg@gYt(bb=R41;7CBFl=oRTTJ!b2t:<'clZIOL,q+&ChhC,KM%.L+85W<74D<L)GW;G"fqe>"hs3lL=^-HNigZc]6e1s'Cb$R@j@;=uLsQm,)'I?VFefY1J=UomgHr;PY"\Am,TpHsaBTPo:<Th&rc%7,.i$.,Q[(ouNI%L3S"FX&3l##_;7A&9]'??*)J@B*`8KcDG>OEnjT:Je[9lj'q'^2\b,.+$TF'Y$#XOqr[+%6+pD.8rBASD6%cL%[I8NtXF9O<8XV$0hXB%hV1lF<%RO?"eG&WV*Ks+gLaGLTJoZ+4?GYHT'Lc.ESSm[Cg,sGN3$bn1(<go,N6/Wb%E28lfNF;(21cA[%f>rB!0MAKGN>3-')Qbu%'0E!VGotB8>m(*6Ee;TmilUA_f?:+A'ACF9/t_Irdk9hm_(3U#ipl_'n?A'?#+fp*Y6.Sdr;CLt%/^;*%Z66bW/$C2l0u=e&++b(f]O?f"3@c_e4WhL+d)`p$WM*(^DI2!>fM)2$H0"7R/9>1`]ipH=l.uus(g65@jI1"glL*pt.Mk90W`N'$%Z8Ju\7PG.)@\<<]?)!C^hYsOQ=g*;F^rGC_c>#8r,FL?]7Y3YAqUUgn?8&a%a.Y36j+I:FW`0j*aG)Relt2cnOA(&]KgeB($Mn*/%WdE9XgT7@`nghXXMZ4nBF)n@t,V,jN@=Kl/^J<Cu[V:o@@/:`t;",K^c,:M;>M/h@'nW[2BE^:PG&Z>OCGrG,:Uc0t5-aJ,OfKUF%OKpaAAhbb<pi<Y[guZg^%lD_']A3&c4CXApSZO.#k9P8oed*XH.`N9h8r?g!oufu0lJ\SJA11'DBnGY/fn.$CPO36uL1?EA&f^>6%h,oSj;S;[CeYm\5R*,'^ZPdE--hs$kH++7#qO2/AP*s5E]Wcu>CmNu&L6j#5Ht"#H-&9-Y0j3.lKaGHEV"3Vlm)A&GWK#-t=s@7#%BNCCRd8lSsQ.@D"!ST`*2T_VO>h'eY/idihX2a5h0@O.:f)Ot#=G.k/lKG<c5SGf8OVCaRb%U)$M&aoL[9k;:%NBWXA-95rZ&,C7%mk'KQ7F684^!kr:;=#MqJj@:G6?M_.4>-HH`_#<\W]mO@0G@O6bqT,J2jR9-O3FkWW[[e9+11N"KSY"n(ESH'2YBSXCuND7`3;`N%7il7QHU(G0Qj_e/.etstU6:#L4@K<aWi"H)JXTCm`Kl5`OA5!Ep#i)d_GDKn.Zm4AX)>@B0oSbibCsf<3&eAOT6cgDVorN=QgIRQ%kV4u?1I=.%?<CgqPBr",4[`i$ll?;n76@dBeF!?[s,MY[Y>Jp+mFP2>oJXkY^LEs#,$p`j\-0m)9@9;E7\DD)E2h*<fA>+^E%,"1%8Mg2U8&A&!F'c;>#<(,Nkgdk^:.Q"H!Af)Gp=D%DB:LJ-6?sa"Su+q1=G+eolBT8G/nM7XU&3D/g+)o+jcA-\mq"#oU5V/<H:AUP%qf88?`Tt7.cg17>3Oeau34J$c@(`$UKbI;ep_F\OoG/9^-eI8r.baNPmMfgKH.f&&?if.L+VsKR#W=-Vl2@_B.V#O:1,D/,fa\*!%mB:TLSFZ1W<YM8^@&p6_/F$9_?G?1kUUULo*E_TQ\IQ9eFB.<?J^gFb_VWh!+Ig_gZh^aiW9@<7^/CXH<`X"[(FUR/"eJNUCgtr<%b94#PQ<':^Q[p]WMd[p]k.1b(Mc`X>VunE)ggfIX:jreq"*t?up[Z3G!r*Os#P8dtB)q]a/<?ELVMhYI?9H]U[m<55j@bP#UqZL"%ZEY7'f"1E(.'V,PO0&bF28Wun?Z29l/q%=["N1Hb;1ap&K>-OoFF*cPQNN35#8^m#Cm\M\;:g:6M?%L\n*=eW?,ZFe7NS;6T2<*j%m!ch=-J&&/Q#C<&A*d-a$&\/3H6"D+1W\1IEt)f_0q],^MF1(^I2%?qduMU!]\5A"2mVfFjGT7FN`]'CQ<P\2@]kUI-S\D56@4[W%=Qc#CfC@m.X%Z)IQ_JFg3)kdMB7rYDL_1-ij9J=23ar=7A,+!m11THXC)ZF/^Sr5iEp-Cs:eM=o8)gSUE>5,+cD[$HV.9,OXmd9u%$!LDrm9sa-s&8+*MV:cuV,WV\?5W1D%>5MD1M!i0FBdd2[K`P!>"RSp\BL@Uj(:-eegN2tAG<auDd1_!g'FhJX0R%,V:k6Y>A7iD%k*:!+&@6T%Z)LUTC*['>2pT8<i^of,oSQ`J0K7n?E]BQE>#>:VD9BGS=7jsT7BK1NH,DjATm!mh7nS8[]ab>udiu[5V(M&6=5Akk%7eIftH"u``d\GWU#hsHBTaFXa;F#TkD8/bB5aR0cfY(:)ld^*QdZR>Jm`#g9://!AZ*,UQ!#qjo)j:$rW=b64iaF//!GMe%#VYU8%X(oi**)G[Jc1\l44k-Q-[Kd%8Xm2E^Ma"QG_Jf.FXfA:VH)I"nG!AZu>1nSu5X$PfJ,cJUd$CY50P^!aFnb-P8G%1U\jLu"eul1O%EZ(fPX+c9o)VWYW.'iJ>%0>A%mh]rDjPQDSY%63&CNJ$V!8[f!mh><HQ:lqQ!OD0-M>RtZetQ*J\1]1k\+GH,i\"@UWmAF!7&XWO%h[M*/OETUR@^ht7gB[)(bdVG0EO$hEUC3_;G5o8te&4?F_qTQA)fFb6+ib*]ZN&Rh;4SeJ^QaMb.(8DTSlL2u_mdll=__pU6P'en%SuJhnnFC\@5[7\+ci";*"h3F#XS14Ye2,Vome&sHG7lb-CfGMr@r+l@Cm*T#MZj/><5Ir7hJtA9Vg$53faAc*k)r@UlpWQf)Lk<k%op2@m6(XikIWuJWJA(&XJALM&7q:-mE\pU"l:GX93G+W<.YI=7gf,TndfYT7b70Hs@h/k1JI+c/71dZE^d_)WR1Ldg%'5O$#(.]e%T7@ekF?rV%6SR"`QF.r]Y":62V#XRq2BHQrG%.1h5&!lMIjHDpkA)]o5e95O:e]E?/nGlOhAJbad)O]A$A`O1elah\T`1JCIV]6F%poZ9s)5mWq$R"AFQF585QRS)G!tngtASoD/.AT8bm6K9%0+]qE<HFW6'6&9j]1"9Qa3h9f#PaXn8=P#s!aPV6!/B$`I13mpqCAlj%o5t&ara>e'<;/9NU1\bbg\P=YDU>6cG?a..MFkau[3d:KS(o_jnDft9oApRmE\;&'oMf1UIp%3NS,6C"As\sX[qfQ--_lb_p"BEL%V>pBe+_7!q[\!g[,:Bo?$LNj1M@FlaYq7TT\,6SW7gK=GI4Rl^W.<^n<CZp5p*QQMW;%^7!.Dp::c?%acX)^Vb3Psfp'062q(?tH%E*aW5K,!I+Ctu.",(J!s4l'b^fL1[@]5<tj2h@jf0C'b2pmp:2g`,PsMkh<?cp3PqaD"ZXFX:c7bfME:^5@^cVK,E;2:4KZnh/Ai%JeM'OLss4?,I_Mk/\_Y*3eFAG9*5K@U5p]qIVQ0]D\d%&f`_cB23c[tdFPaNP\%?+>]Z:dST=&/DKYmlc-K5"$`M-1Bd.Q6]S6Z;%\^A%Qj5(PPUV4=7,on*\k]P\;/*o^1V[D5<4=&+MS;54F9jT41@5<b*FIs.J2qJ%rVjrOa4>hZ5H0?F)28\g'6FS3EQ1OLZcCB[3%]LZE3EYh'PTL`p'Q/7e]@BuX*Lh<;b.i6;+"G9h)T)Oep59&(Fg_dUZ##$'n,gj2Sb7"#-a[[6EJCd5L?EbjsgZ$)U06!T_rH6+$%rhUHDd!M*j4u]jE">lOq9a;W3!1[;3;*_ia!t.hZ`P@*tSDIHYcli.6Gg`g05<Nf`.p8HMY#@RRF17D[T_]68#i88NKjCDm.-+/$%n.JO\Q<1B&2;.=g_UIYUL*mR@<@o%M<]k)nB5:r.B3Ko:%$<?nGkSA>!5AR+`Ie1$De9s)93ODq[Oc,"8oZU![&_9M.])b*$eULK%4GbfT.)pgKNoK?A)1"P5.`Hf<s,%_JFBnq8X2r=&EC%,W2=c:fdKGmQ\a]4i;D7Ks/ntk`&KAklAPE?]rqn@%Q?fgX$n.p3#<:@@%$fF>i)7<Q:VT"-O\o:=gI_&uu`0@#&g/n#GV=V!F.b;rMKq=po2hBLY^MX*<Djp`lY906a9JWf@!79II!;*]+G)bU3X:jY)mqWjE%WoPajc+]6s["^gm!KCrT&0GHJ9p_7C.pgT/-GYV!:i]a+^]L8^Qi.M4pF809nA:3a,TeVOd$ISj;_6E7>EhU?][/:.8Hp_!ZjUq1%otCf^JEDR"Y;7i=+!IEgNpIiLC.MSkkB.u2\5o5;`tkk@m^:@P+33UQ@D&?k?Q>H'fT`R<FWXuX$3nblg&lOVq<#>O#Q"IF=jl8u%rnEAF_"+-q$\CJMQGV,H.%No;k(d7@m7#Zo`A'L4D2UK#?6G1AddBEYcF(bHP@SKC#dfOnW'%7L0,@O=/352B"UC.>iU$O]$0]H^%)n-'3%-`Yp45>QeA/bI:!T.F?\a@X3KbGC6ZARo57T0$n>?0[u%'l[\=m_I>)"^>2<.dBVEuhPA8&&qbfm*M?YM8Qad18,%RkH@2%=Od368Wl#u=oLSg62RRs+]8>8]h-k)%;cmHFgLu2m@dlO%>dQs]DFhoY@p*O5+:&W)(QXdgmB>;JJ.5RjT-8[=XI$4q_[ijO@^LS%ISTIU5pgN!)mPjWVi>b^S\1i0%Q%3C<'^=/4p+>l<B>^*S1Ls+):)`$?h>L[^bBUE22GYu""RYpQA:3(54`GieIf5-h%sakag>=D%\<AlRICHg9B2%UJG\A\OY^u8Qk]LYj<l=PnM8uO9)'`onJ?XaJoE$Z%%9B:WGH[nGbUSIEj[.B5dOaeCQ?$$E?C.O%s7B=1"H-5Y%)M6m66GX##R]A!+XPN]W(s&g9LK\ODlO`H]77$b%]b[0na<6+)2EH!6CqU8oS]]&F!N)=4/Ztc"'GYKK?;Cj),O_N'!6B+'Y<!<e%fP^]S7JYfGn%N]DMNo>onbde!Dki>?;g\MWJ<:Cj^pa+Ni;+#gbC,T=BLS/i`DViKfig-ecFI-qH_^RPLkXP1bgi^A'265:W$6ZE%f%S>N7%U1rYtDM0_EZIb<Yb5bW1ZZB=>8=N9LPJTE#oeFUL.>8,^]iAN>9%hU'0n>0dW5.P->f8p\F^,1U<^JSE:\^KM\[OX$Nir%$=ZUOH%7lB@cYRd_c=V)79+)i[3'/qH=N[>18b$9<bp"_\[@f,8tYSM9j57eMQphIn>q]L=W[/ArcFutj,OJ:)!su4G=Z8"jaI+<%(c2-8UO3Irl.Lq:+aBT`CdbVYQ&iuI`B"o6S.&%SKO_2`J$*A;]e[!lN*NH$X#uAJN(h_n1k"WGj(B=lLESOH[!ec@8*"r&C".Ss%?HLdC4h:66TI&Z[Gt#ai-$=,19k9Q-Fs:Lt8r;So'Wl(c#=g,9pgGGI):\;3MQmRdZAP:PJ--BchCSuA_>Ek2-_Z7%Y3SiC#OTm&%Ds72O4$gg)j<U&3aF0$:+!W%*8Zs*9cbkX?5Rc1HpWIM@0Bg'm%6!qiJ%X!/5J53D+4IpSa)p4cp!e?"3E/gf'J5=G]qo!C4M\5Y%XrF[>c8<7%2Vm\`2>FK8h6q?RD"7EW_Z)+k^P,D:BbC@A"kI@o!G(s9S=\qR\LFT5;K'$q&t4+IW9M8V*#HWGL:i=JH[gY`Ao4T"%[8pumn_HYL6__Th?h;1ZI]s>5H[Zgb+-*3_^HVTi5Id,1nhPVSR6H$mDq6f@dG;=`:kCFWh"ZC\HEA:i^a*Y;$1XlM5$:og-`7A3%YbP5J+4#'ZiC%\p_^T7YC+^pK08'.lFX3/IO[0$,>4-ll3uGEIPf(C&/t^q7j7:;CgQT`$f7?bg'@3.B5Y/\`HUc>7Gg/42R%V\_%6Wj&e/4$Mnm.F5iQbi\U>._K]5HUQ"8t"s#CScI/!)5$N)qgb=QSS"&^*^RN]e,->l$(66q-EQhh^*dK?1OoN-'o/*is#7A5!S[n%O"V?inTsSaS=--T@k/^ISdSQlko4M)08G9:D;H3h,;XDg0mr]_A$*NKIrF2&Ha'o297bmTQ8a9%XNN#55`oZ@OYk3q&8#B8$\QMs%:%9?54FVO^n>1`\>bW."I6&HIJoBNr3JBK!D*U/33?s>^cl<$_&lN.?cjm8selYd>6]-8A'TZ-`YU]^5[S0>fDO.V-YWsec8IPC2%fMS/a+)$8sc.0U=M>ntsG\dI`T,*PT+#6N3&qRrQ9Ot0a?ri0MK'+"!%<'l;q'OaY@#kp1Lh/iN-\E&%(qE'$%IG]%>9mip['Hh2%P'R6ZeS`)8&qoE\\c7)ipqcfQN,c2i9E\kGWNdB---E.jY*LWm`,ZX]b`StRiYg2?>??Z'#&T`NpRSH4-\NfNKg\lM^qrH^.Nkip%=GjGQOMGtB/=>K2D"`r^lXf`'$1u_4e=72b-L;V5=U8Ao3/-%7J+P'E7L.Z4m)9ddV42[`4<+o?V)BP6C2*hB)"Nad:b@YLi>]K;%>.RjLa1>oJiTUuU$%&t:6DtY7'4D>f]3S2>eUnm<8\QORV[tj9BAaCs-b&#=G=UatR[ATI<61]"$McJV+ode+O;"*Ph-`u/qMCB9%B.!`&g7Q&f*tNfNW26qN`C;U.=?_u.('l52GkiMP>46jpT7!X(-*?1)Uk0\/$9hAqI`a(K0TP/';g@2LQk<l0[eb$pZf8E6.;X/n%D*qA(ZNbBr>3/p:0XaDcUZDV#1D1Gj<<n9_g:t"1GuFTCo48ZC(0o]a>O'D!_mLZ7S`BNVVs<eh6h3DFD1->rMK(IGd:'mToq,+:%WAB<7-D%.%)gXq>V=/^Qnh`e!?Kb*8HZ6YnBh?3rBLhq<pn$^1TJU+V$_![T;KL);UoMVI#;b*-,6h"OmrGZX/U0bM_NCcFL?Y[C%Jer@,Uhc=BVj,>Xpt)_F;-lkKG3:`d6\34I*k-op"bVCQ9\T$R+`??5(]pL@4KqDD'K#8tp7M^8N_7L!Kdqf%'-LNuAep`Y6GPU@%Y?t-@jsQp/bg,Hc`HEG!bWVja+BBQ[OoI!-0uO`>C;G[n&JWK`"kAWHh'/m+`ni9P'WQ>PWc-p+bda[.1=A9[gY(qK5:_feSk+aJ%VIutO6#e*1lg<kIWr%:Tr&@I.\@g%fW];S-)Q"@MXP`^f`C[0IK3@sgG3/:P[Y-]h.tnXRD(E:8G>S<B6O[=Ihe$Ji<t]Er-tdNG%[KjeNAss:Z1YF`,U#3m!;\07'RKt`$CT7jDe)L?:%6-il&0#O%1N;=P_M8o[[n,m'P\:Ld`lH;f,YW!q)jCmt@UjRB)JWjhqTnDj%?WY&Pl!7MaKpKn9$o^R9P%l+WN$U&/;K4pYH$/$:J@?;N#gGNs<!P[RS<qbF[*`t$Q.6AOGk>"TIe^f5]e544S$tmn%$9&+A]d-`%C_KuhRCdl)VG9AsBVQK$b6A-k?\3'(UFN$C)k'0+HU`7U&iM^l&13f%ojquP19%)bCW=b^.[,M1#sJP[)_fd=C=8gM;^rq`Gp\I@%:#o<<8>t0@oQY7l[tpN[XXDH4A9A-fZY(.N.4\/lS,K*9jS#0^0(m28F5QTE$X3pI)-cZ\7g/@']&@Y@N(eFBrqf-]3*E>3F>oHI%GI^0Io5I"#-b<"tm#8"pInlVJEXD%NQ.+f?JKlPkJS#N=SRgA`UjfBN8F1O+ld^/T@Yuf_fec=;oMd4^^sU('Go$%Fp"^tT&6"]F%&c"2UOlZGQ]@93HO^,V?fgZrj?+0k\X5nRN5h:7R(X$X\7JZ(aT2TRoo9#FT?Ru;eOiYi!E(15(VG+%+:q>MS[[BLD%nLuKCOU`"%7VqVMNeB?Jr9jXugZI*cDGQXFBOj8DiLWiZKF86W+JXa*f"c4hrN1oG%J#6KKP^<T&kYN$gtCACZE#f$cNbDLeRk/U)URY#$]SCl%Kd<j[mF9siFnH.LR^4ZV&@6VhbqbCm`Xi\DFcOD;?,6s59<dHSZhAO`InW:4.^C-/q9$.TZUB+^\IP05bTtlT>+PB*6gtB)_HTQ*%Ks<J:87m2=+0=-Y7$WL_4,+2%!L3jQU*K4D+N*tVpfbLn7$h6EMShB*IlMHJq$I#;ZJfPm>\<%0=t*'+s%u1%l1rC178<iUVO407%W@p?pKX3CAQGsorV3;O-C!8MXXJ9lMaYku'TJ`WhGNb*$0MIt>>.+I>BSgg]Ii>O34,q/%R.qFf,*I=52$SXO<Cb?hpIg/tKWAc+%TZ(=@Y9'er1RjK\=Z4lhgFP<hdgL8IgAt1IZh,ESh\#I,5f[_Zc6\q8EQh/=cOWEtl&e?6f-NN<Z,:_DJjYHa)["&*(s^@6%858@%J`7#m]S9#[8BZIMA2"Op>l<_N&W7Y?qUMsW="76KOLSX0V;KtN&DZ?)j&TqNU7&qpbh_nl+jr9?[2qP3=3UnIe8@Kq9f>TI^&lSE%OnSB8XnNdH!Eh%"KTi+fDu4DV35J?Z24]@%"UJ(Ic%hBiHBCM!q*8R2UrkGV#n9,[4^a$-97"NZmPat>LCJ2V?V?lR[+BWY_2R^'%ndB3S(/H+nfJ]7#8B=m+9gBd.RK6\NQ=FC4mj80Z+[k%lk72utDp80t)S[sZLaZR?EDg1nb(,$S]WpRXg.hLl?"!T.g817.h.6P*%0@NRdRs'[sY$QS"KO"<KiKM#@l^)'1l:EG70Fu*Ikc7/mc=9]D7)$)7^<T_B;Wgd[ko\qgMn:jZ")K)M7gMZUKVk')EETsO&(#U_%%GI:;<I+J_S::6*DXuE*4@8MJgCGBPK;&/VETQ"QHtj.6Lh(>gna>$e9:na;o)F\e9qJmt<Y/aq]Of>s[M$?M^7mr^b[^blm\He[%2MRE)\<?t"SJ8u4'PKsOHrp+!nclL$>ECX*eVMd:pgSnTLm83DJ*?bZ;CDnRB7#kt!:d(H'U[thrr#8D9_NQoRr$^\YcWZ:$@_YC%$W@@ooua9.PY8Bt)+Y59bIEmB1@?;@HeR.ESaFfu)JPCK`kp$")tXc287sLU?K#$Ib9UJbei.<I+![5ZFH(W[O&`]hZ6=$Qb8lnX%7L!@lBP&nWD)=1Bs$69d;28KQ(p]=Di%<3jel]<<.qp"Y2iGrBd/OK+!-8m(Uh:68bK\UU)*Ibq$paPH[@Jbt7lH8oPl$#Wf.9G>%muV4jQrBTY&L=SNYMns"/f^?-4mrkkk2uVc@'J'&;205kU!ES&c7a2Lf4GmT`4Gf!G4[M8A2u/4i#r<A:3uDYd5%eZX5TFV3*/g$%JWUp\\sZM^_R]=cS?%[hpJm\q5G#?hb-A,-BI(Ge,+\i3);63l72H+_Js'OG[DkJ1dds4q)l/+9aq3^7dA:RcKP>(7bM=oI):P)b%;bpn`.NC\=&m#19og8M1Qb#X9#EfDF"l*#O-uu--0)`L:iW280Q[l_6MkUeud=_g#N!-+SR]W)EN7G/mp,*ab.19@%`iocnfmCYW%F:"3qXsr:)#=mBYl45I;>BrAH_[u',86n@l&'12BI0P2eC[bE>JsYepA_jKmae0b.k%id.hFGke=PeSH&JoeE=(r!;<fs#2XY]B.%Khj3lqqq+=^rc_S(hc6g,09L5+QdLrgDqEI-]V/N9JPXR*mp*QJ"`L'K[Cu?2dht?R^BnU&*;>_-,WiCN^3uZ/o.L^2(T9k#;DnR%r=P/PGQU<n!bug`9AIZ7#6p+>DlK6O2_$(3TXOOB&Ff>@9^(;P%KP5D"-:?Ofaj8U62a@M@kJ'9,1kM3K6sPgaoa90R]iIp86L:F%k8c>jlq!0=`*CVK5Q%ScpoMJT*OC81oT$7;f,p#hJA%3CEZMpY3rOUXE,mB6!#:M(?%Th%3'%b6>gI\&:H08AOjRMMR%1kPTq(ZX%7ei04,DlULU.@PRW31-$ncgYN_QY`k$822+!Hp5-'MgaooUM0>e-Sk^VQoJ*&'2qieC&\g[ESTd8Hf;Y;W.UU3bD]k&=3DAj>.0V%0t;hX@FWCo%98oq-Ta1bECQK=oL.dplJrR&kM3%e`1>%/YpeGLd1<2ZH0R8W6(Z54Hrb#d<6?sT_KB<QCdWD6f?nQQ3;)6`TsaKN%$>>YLO:ac[X(UpPO/cT5B/1b/A1r0QB`V<L8N^'G)-lpD#YYUfMR9<c'kh#?"m$6+([]`,fH.NJ#!F'`m4(7!2H_c12'HZa4qBk?%+c'n0;;j^f>bUWqT"k_cf52>uk8K/Nm3_jCRZQm'q?;<qN"F#7o)\srXhhU!C`47u=5+mmN$2:?[m8O$1l-UDZ[>7gm!/J1M-A,.%4_.J82<dAgRM7tKFcjJHc&7p45Nf=DWY\2I^AFg2NnNUGO?0q]Xb=oW,IV>.KjU9N=26>GF;.2HB*qpibicq]%a?=C`C3n\(>)*A%#@"M2]qCHG]n\b6`l)8Dja+E3rq1s$5(7m,qtT.!LHE+XC_%/\>N0k)I+A1k5+-m$.?u2kHoWiW/.6WA.J6k-%0*`CIJZC5!$SOc%/A2"8X6N`(nRX"^#k';X9;L2aTbL6($EpI-2l+5e[Z\0$ooR:bVP4;*PW@)UYj3$Wc'UkH@P,9J)e:_-<UIaHKFD,n8s88<OH?@i%M&G\DZ8NgMgN%Y13(Ba5q6_Zjd6aEl;!FCe7W->"9PQ3k]*<E+A@C;@,SC_EkbVEbEZM6k>!VPlA9J<18,"d"$)>k38bd3":tXVD%JnqqNMs]aXhio#)9TX("&7*Ej@HM=$W9gI9ID1\Xa!jl@Wp\o7$.6BQUW9Ed%q_Q+>o3(EjS^g7K?H0aG*\f,SPEA4,6jF)dlE>/%%\_ofGVm]c'tg/YWWhd&S:'pu9;cb/5&op34d_kOD\s#IbHGBQpXrX6'^#C]%>LYb1i_1khe]g>J?iStj/ImFI`H$>[7T2,ARB*F%%f\i$9Es;nR4[hROL>8#ieR9K]+%%qVOHn^H/=0n&[j@A6%U?_B^a&a\1pAR=V9/Okqaa3ZY@n6_3+MtV!+q5B2DTTA9(Pkp&a2@%bM,?5%\b6p`@sZq>>Ri0KHP$\W&Mn"#<+uoV/%/;1>h)RdLDQq,NS5j?_b\RQs0?IY/NGE,T)>ij4W(.R&2o=Ir?$g'O[tDbd7&T%IE<cQ*-i9O#4)CpaVm6sXu+AZ&Ed_hhgasc-(1?*#:$2"iP*BKZ]HAE1].Of4B<3.k[(b?hkY^EI'HP\q+q;X5@HX<:2L<^k)/Pf%M$"I=/<Yhnjh:ZB9cf@iMVZ+HQ<%k&<uuCB17O]\<TmPZaTN6'c;!%M^n)iOo`=!-OhJ]^&F$VGjSI<J(72\[@B#&ogTEa7o&>o?%kRWheHLcJV%(2Y4f'?Wf=\o"XOmq54',Y&*@p6]Ma!=c(KZ#sKS[8"jUE7o"10$`N@KW;(qFEI__8j@:6u:+[\S1cEb)0+(Vp#.`%-9WF5&]%OllfkkA.et+DTMNNB:?e89_js^AdQnZMpZ8!$n;p]!"2\BjP"(*2B,#ZsXEuc$YWr,k6nTNp3pFC\CnbC(mA[+"XpNB:%*&&X<02,!=G'NH:#6tSsfUu#m`T(d^*BL5An;hQKX:V(DRtuos,;@.j'+HpJ2b\,V*pe-Ogj#ZemE"`E^:dhlDY?)>It$1F=%Rt3%Z,1/\(8+5+#H:KS9+jbgcF1A[4b3:'GV7$Q[/M5Re%27X5k]L1]U&4X+G&]6r$FEE&W]VO<@g_-?ckDBHY>bJaYIfOa`6u^.LS6V%/LqYni_Voh=e6=is5J^s9T!I73H[,+5`>>/S:A/A%$IDS3;Ph][U#mO,IXdW<j*kc_,W5aP5g7s5i%qkD+h;PoBMOJL_"WH3RTt;%2K?k[9<b,mS._Kp`=3_j:\)><$TI^Gr?S,5XN7'5ZL?&-JK8LP,:/h,<t)^aS=@3]H`Uhnm-SZ7E/`Z#25eLPHH2Z1o&t[ca7TqT%D8qV=gW/4JJ_VPqQa`5u`hisR?*=e4:Zg>3L=qh4#O5Oi."*ejqO2Ve(IKLZh.+UIS7>kMNu2>IG8$le+",hda!;lUdi;P[C8>sT%IB<_KIem;&MhXqukmd?o[D?<6pU("1gTkI[P%B3bP-=$8eF^$,R2;&]\Y>FW^Ji%VfKctB'On\5O'DKm1[a<"Ys#^[S&[G\$h>?(%VjQ-1Zg<j.lmEoe:1e9(7s@l3^$]]'BVT/@'W"Jm\7F3HN;MM>Qbub1dBAH_Wdfua1#!]#A#1mEpLpS[O_:(MP```(9n^Z?=aK`7%YI6"QaG-4("JUYX,EG*gO#Bdf*\7'Ne@$*gYbN(XRYIjd++Q2D8p7\Pa"k-f(S[NI(jbUf.h[!cO@d)$oK&l)+S>e3q@B("OXoA#%4d<(b9W-Z`A17bSZ)iR@H;*F#9EQOA'n?R;7,tY7Me3'BID\D2>n8iAnH,C_)qj?>9;@5H9JT);"#4tC!qm(^ocTIS8Y8?_Bc2#7%YZ3I"U:m6:)E+:-iLaJ*)d,Be/3dnVq<DM5S^+/tHn!<-]T,kkG4)uG>%D[3]og8fnpck[#J3=98<M=1[:GfYS/=$BYeOR.jtVKZ%8]LVb^;UAq+GMrX`fue9V@a52!erli_>g_uC/V6"QPdNjee\LaRfLkg?sG=j]%P61GbLsBh6:f%h[<s!YR)pP'F?Sp3[9+;7GRKl%14k,r$g(]J';7J(P%N5-2?-rlV[Q*5kS(li+rJL;`$W)1+:di=cY#gA<jCAP2SKn-$B#T"OEZ>8#bj;`1`lbpb/jY(!n0N8(LX%R%,qrd%E26ZH\.TVkFEm6T<=BkdKrYWa@84iobZ\)_lY2-=F96PaAC);X&m7.(Z;fV%&;CC1;u"eFnr,TA>4@!&ct@rg$Y;+afEENX%ViqGN>_fsb2O08k?-mlZ"o>:Y=P*'Wmn\q\L'!U#Xh3sZp$FXU9K>W?eh^iiBFS2kbD[,V;B5_BoMa2$C5S29ILh*-D'H+SEW(*o%9t3=Q>f"-0XBq3tRohqWN^`R'ZcZAp8R;*pMuYen3+C,FU7e'T[*7jZk?W[/qrHio">Y/8[M#>X>0/pN+X3N_VV$VSOA.h@Hj;GJ%Q&9;BEe[uD:(kE/MVYU8<_*[s$6o/3\RlI,7HpS"gc?d4'X"TTO;2g$MkuXACuVqnb4Q$QPC*?hl;RC&*s'd:F+bt5U>KN6^f'$l%UA$$g2@q`t30O6FdL]Cr8,NI'EGG!!!0mE.Yd9%+Ug/"jhPc02(.'!6J=`SlYHoaGO!@EaR=u-;leE^UO0jqkU!uhdhDnYE+Zk-k%cq\:eKeiM'P<:AS_"7\oT5sY+$fXf6a@B`C_+g5BZ;`,!)G%4&SoGIu8FBfdHRUNH'aY?*#*:%&T`F2L\%&$*pN*RMncVdG%aquI%YsUJe$i28aJ=&3CF>t#?Zm8ABU:X(,`7UT*r[i-mCUL4,4?j:O[t&5D<QK&kT(K^`H9Xlc.oSe]?fpi!2W#JW"tGE&Yi2hU/%gWH%YG'Z4:(J<!9kW>P?@]S5Xh\Tcib_F4401`>$Mk2NhSYmmFHUD?gW7Z;h*7.e!S62IP#b*^l=r\X#g%otI],OK"9g967nSUE4p.8*%;^q<A:WVs7h(.M8K=[(CHQ[ZZErOggC+oHufqpjo@a7r.:_K`uo*b?;8lmQ_:!W_oDr?<r"9CUJ2mP!sX]5)qYXs7C,m'!b+(X@f%<fr%r4Q+uGfREb#8UVVEObHpV_g&S\iP`SMb0m5r$+``&2Ud%CY868Q>G@2X!eIS+`l7mTYGD=\5`-q&nu(i,;sgL<,!BD%Ca6_M%l7=F@%&"I-A.6gLQY"`oecJ,X^DlL07lV:VA6Co"!]p&kLeBl-J()MtE>s=O8^&BH)h(sgGWMh"@_$(HA6b]27'gh(g+H&jJp+?)%Pd"E#WLcTqZe(1_R;Z,mXSUcFQ&dKQ2#J(c_`'J$c$+F9V&crgY[JKiOcPhJd:Z:bpE,3b#;TWJLVMhT3n(U0kqQdsLR!*-E\6+^%6]L4\^;.hRo9`?aBGE^C1?3hKIAl[Y"1_%H`b'o2V[Mf2EBf;<!?X\'pTgRnog,5WZ&9tRS'9A%X95Q:Wm##.C9u/P!3mV!bdK*A%?I.ITZF3G>M?&!.B#Xs!"ZmE<=uZd9-\Pkn!RAtO&[K"#7,9Uee"Y6I9jCtS_:sV'=9_hPjcF*l,2$KM)K7ZH+qs?0XO!^'.f)hb%Rn3on1tV>HV+X9:DgrUu]Qs7h&GJ[]qk6:@/.[UQS0#bUUS6;l\d-8LLK[!&1p9$$.dBG6s'fAcO@c"YUR0a@gXcsBN:.%425;31%1eh/^d*U3L$\)0NeB#_`Ugc@'O$Y60WL>]@DQ_2Rbq^<S@`md^VAY@Q8Lg(nRLiW4Hc;A^gF)udMBl1X>@Zu,^7`Xr\\P=V7>N(k%r(hJXHaAA6P$<i58V,9VQD%ma\r_0t_>MQL9j1)t(p=G^5b8d@AWkXTh/TBag/t;]m(UJT,H5GNQXL&`lS\Bl]h!,;"Q@[)Hlh#X%jmdheg]2"kXn'a]pWPP0K7b-qo"qETFA`"Ajgj*f!eY-L<UW'?OZ1@j9R5<7+-h+>#j[fM!]ALOh7r$mP,-pe"'"5.<S$$dL5sE'%5lW/\)O9m25Q$:JrYk3TLnrMd+%$R8pgMUV`=Ii*%@fEqe-iifOoln:V"kn#9h-eI9e3e';koMg";+Z6)OH?@ika"eb5q&i?7TUi%ij]flGfLBD)nfMNg?s<u*_A-urn;TQd)2:X\(ABV,No7$_19'Zq*AZ35">6q4'<FDY)8dc5%O$n6[q],lm9C^dNGu]3AqmXRuk:9%J6(b>!\><Nh@CJ.#\\.VAB7g5ra;/u4[r+Q'oS.DQ^22c=#Gmc_8K/CE+G4$h)59(k;Qpk`;?I856)@b(37AcIg&AR>*2!TH=W_@%b]A:YdsAQ"A6RU@9P<m.ik$2QcEjAV.)oS\#PT2g8qH8+&7%]HJJr]sO`PKY.&7E:=J-LUmY>V7;*5;UrW@g/T:[Zg9aYQ6b<.(;%kgB9$q[Gssi!*%6[WpJ;JM0Wf2Hk1^RG?&WKO*:.9M#>FNI[saYE?W(R4VSFKc"UD17oFLiYpKBIj@F;Nn.)PKcH\GOB]YW1Gn*5%*H"4/\]VmqD9T'DD`:q!;<jaN<Y&,9l(61$4i-N;4N$R_Br&6>ZaJjnC4L+P\PK2`+*-rRg02(kZaCKk)j\M,cb.k-HWa!X6jmg_%MOFp.3M_1OWKWD^Xo`(M<R$hUJ7/>=btMneO:Jo=O>"u._Xn19ZIai:og]rgKW<!!o,DH@iEMFXhat%oXt)rD3o(6R&+3Vi&U<Rc%&>;29ihY.M^O`\mmpEJKpZD5`JLIBY*t2\d1,t#b7`2JLN-htH:[C$F[tt:\2R0[goWddn@KF/:Ci+)(M][6TCTP&Sns+KLGSp0)%'&RO,a&6QLM5K#dKtn[;ZQaA),)t[80tdV7UQXC"A<2B+p!>AnqRO$co(Xq"='um%4[=ECg[!q3_^&^d[6M9nNR+Z@R5Ysn0.<rP%A:9HGFK@KU:[<a%38G^ipET:@e1G4ddE)ZT)J^)p6j?#cS1<o&LsA^Z()N!G$ZhCM&S0ukaC6bLp)49pI4_?:bGi1I3T%S./MC`H%TXQ]^9Ch,ei<k&tEr`nE3OQPk3V]9eb&JEX;"Nc_5A^(78rVe:V_D0^:SKhP"fB+H?(C4\X(ej[!Y9eA=B:Se]8hCVTuE8]0_Jnj%[u%(]VE,D$\Fqpc8hjfaISF$>cV\45*07bl=t`Wo=P1'4$`=nY7tJhbhFX;C`ImQ#OSBJ"H&g7Q/4bL0^'X5GoVuaO"[^ACF,,($%`m4\Mb8q>#^0S3G\"BP;@Ie=!Kam/_[n-sH)PQRX5uh1kbg71,Pqak]WM98=--Xq?f#1%@.$nDRYfq-a>\cr5`?rlTQ";OeGdg'V%%1`=dQ;Ykh)Pc;'Sjh.(`'Edt4e3EBrsDOK8JIO<"hp4i=f\2cN6F+J?qI[*Fn\bTIohA7R\c*G1l\Mo#;f)2A3LENg;OHC['C0/%]Ui"9pn1I:IR?VI>[USN,uRT.1OrDrek?MSM1D1iU/kn_HR#\G[E5EWeFPmt&P462lcg&GLuOA)-40QOn^'dA4;<!6C28?%6\+9'%1e>t0():;0banqCk?JJ)'LE'9]g;@g#OJ!FDnMV.'aN4\S_%TC9T%GEk?c.Vp^5"(#3bu<fA50DkdG8KOaaXgI3#]L*\Ya8T'R%C%$[*-p5WZ+UG$KcdRgPe4\QRTM4L>5Eijg\a;WAECk^;YGa<A+^(+S/>@=[lkX"_B`>^,V5ah!QiVf*^?Srcj"I>%slojoF(/W&1]%XLLStN-e^ec'X!1042fHZMLuO+i^B/-Mlopp1no4RH7[s'&7p4h9[l@0$q$_167=@eU>n&A#YO_+rgqg+$B._63MMe;t@ss%A;79%#TFtE$2%RQh,@;daQoXeVRihkLMAHO,m9R5;Nt\9HqjkT8c=;qFE)2Mop]^rBR=%e(o+)4D2N&W]@!cX4kUG1*(1O&\_&RkbL5Ei%!9E.PqoM2%>G*&shmBMejM?m'g@Ir8otu^-g\W-aYiYP,*A^4Fa98<gOZ6N!<6/q>C4aL)aZouSQ[AgIe'VTgG.?+Kfat,A^A@Y+%9>mmPj7rJmH/['!1-\aYIi#$lfLH#p,a_LRAQCeWg1TX,0q$44^j90I?Q]koXL?B&3G)c[KmDC2Gk3C+M-=b(M.:f_/J^<7c7;u+%g@P+<_cOX=;d\h1\ipV8mp\%MJB4`QFTsC\j`tM'pW.s>4D:BY>LGaIEDl]ep$bmL3N-76g!om16uN&N2d4_"8l8GN,i*dWQLS]+%"se2SHFY_'G1PsJRrLES8i5OqaIaHLg(\CTZFro-8dO@IJ3[]p/0G8eo3$5W*5g#bX$W_[kc1\t$kcX!(:4T!?6h%N5DK)WC+s/!%GI$tL)"g,MECt5AeqB9N<#\CLM?$Z"qSc7rU^CBu.*.`@1^AF:+QMXJG3?<N2=AM^8?B);0A"#[m.7e-/$55@HTh$^hot0AgEC*-%adJuo$tS_s7BK;/mG_?HH;tSu5R'?N,*W1W^1s(?c^nDPbHFO9Jooo2=5oD!gF?uHYMeNndK3OC9C*Wa-pYtV?Qc7)ja:s#LQA`V%4HnM?!e7Qmn!864N3*-tqgoo%Q'8m!EZ9%;1g!5nA>B-V@7_;F'1?<:Id"D?M$WRM5(b<@/Mft$C1%d'6=Z,hPW<7aO(('&g73T4%$a<T1q8LT=$b^:'nJog(Wc$2<d+(cLJm.hf=^fbI*-&=XqhG^\U3L.+e--oir'<GRZ.5jU:0[dmUuGl%]=K+$ZX:0slN6me4WrL6%Wi8^3f5_379Y;J2`Ie^E"Do`t(,f^2V"(eXIeX+rg<j5^SULP5.UqTKYb$I;!P)4r$ZoMs2cudBP5:nul0MOK-2V<$eV=p@?b`u:%X>W$_%A9`URhZJFR.)q9(:Vca@KX.t?_!\+q?DHZA]<<R<<hOZ1_*!Fr;SF8\i6t\h[=*>$dlDb@es"B*g\dTO<_JHY(Np/[Xc+7%<R/6a4p0fXX&@8.=7VT0Kg$o0[:Y%/@oq=5]U](Pr@6+0%j1Xt$)2C"0F3;a=WClM"K'Du1c53ML.BBrDOuu]WPl'b$q&9DL8$,D%$u_mX!oa25d8AB9\D$-P^S$?CBc$r(DH>+Vl0U6!-K23i#,.;_GDJk-2[4+g6d)3=MY^hM<f!L4`.5mZE%8q'It<^)OK&#Tc?*nS%62IC(5tn^:DTc'^MQ+sB2j"5r(cO<S-6OGl42@><q41NbL057;J*71,j=(QMH7o*^.U!8@7b*@K*\\rF1_fo12@Fc?MDs_PAFVLj%^4TXTb"*RRPHYG\W<)^oZu%X&QN@OmXI:\V4=BaR$M/ga<f1S5[*7HmW_3p$YU)7=J[!8n(JbS'b[HI`B)S4Wk^)D8SIR,7SdnIN%l.?Y%&1IsEjN@3s>Hr1$%]NkF]qHQ;BE8Shi$->oG:FH?puHA7ne->kbWh[t(-1q6L4(G=_0j]5I3s1eCq^-Q4`JIVV;,n`L^)2D%"pQ,8cY'FS*s^:.4'<PB+qHQ;F58@V':!Jpb9p82R#pLD$g8+$C3_;3lhoCl]=gOYl?te6qgB.EKrKCt*NUAmqcNaL8l&8](*uI^%:@f=!_K>W1IPmLPA#-l=at45oa,JrfWpG,&2R*h4WmL*iXXKJ=<WO4@I@Z'iR3<Wp@eoKFC>iENQE;H?$PSV"?=EqbnbB"@+BJ=t%YlSto2M;FKB"N3q$bGK.\"qT^<I>H8OdUC6C;mYte+i93M3s=QkasDBhl"_+ja6D@C6al/PFc%J`uDkurr0p)7>Rh]>'U$B\^C[2%PbUe;\ZW3#C0uQ&C.0;F"Qa'#E\u8og'j.6fG]_@=N1iHlZb]^#i?aK^h)dlnddOm,sssbG"-JfY8.QIl^._@c0P5/EO7"iF;6,F%3eTeN\#%rJ_)nc_&=I(TP5Hn[Pdu#$KHl?+lK^J;))*9M7@]]t=L'"2.Xmhg-O@"V$:</8;RttQRl-iAiMi6EkKKQiX9>]._Ojbl%l`uV^JJh._1]gWQApAn/!GPK8_0R4/^Br2r/33,q_mO3UAVm'bJm5O+r=9l@i.R<9^"D8-ajR_R:>:OMO#/]Y@:A6JFbQ,>OJY]<%*;1d0s.WiRPhKs,_V`;!Fj#.o`oXEJ3g7Mf(rV4]cYsk(7\DcRCGN,(1XWg2/BP/i`#=HclnM(U2Q>s\M.p6KQc'go^9hURLH$!%%,p`o']n'u<m1FaDJGVi5Zh3e9boH#k`70U9MNK3V/Cm:j9LXQW"X2Wn;9?@7P_lPW;TM.K@Lu<\QUC>.::*6_I8u/;d98L:4:]Uk%Os`p[$%BkMT69o[e1I#g,mlh460]bV_ni?drcE$>ptK8D1*0le5+ItkHPEpHn_@Ndm1%`Ma`$L<IK0$N:?sMU`BoJ'=s8!"Vus&Y%^o4`V9_1hdEYrU:"*L)'<jc24;Pp,MG\B:i8["<VS+h53'(DEiK3KlJJZSK(Mi=,)oLri!7+qkpf9[4FG9RnS@V(c"UjMAiQTo>A%7HG_6l<uMkH8B%mI1pEgeIC5To_osHqeT"%P&cNpLb*0h16"jt':\r)@*6ZH6IJDiU8`[\SuN,Jho:T0Tc:E-><]lK>>SCC9;p:t%#@PZ7M`*!Bl2r4BBVn5(]'']j0N8mI%XIo'4lcKZi$9'm(sc"?XMW[h/(@/d;PD+*91L"SW!tHRMG_?LI&*/jDb/X:c'8t'mfBFs%:?4/Mb,5)u[IK/>D7pgCarj0-)#1pua6kbE:s7>;Jl15Yk>#735pRu0T@U.,QAdPPM<2k\L;0V(m#j2S0`,DiT3ZoH5WFK('e:nO%W9>"]r26Y,g[Zm.<DaD2JD[_M7A9dQLC&SY$"D,BMB5ZF5:7X;_jSW4k^`ebks(')XNCj4Hh/[cGg.kJg/S7Jo1d!fVREQIDb/b2%U$,@H"2YQ'eh&F<lJ?=FlY_C$6at%3Q6faR'cDN$oH!Gf_f[e&ok=_,4+np/8]bA_<!S_4a/YjmSs5XJI=o)6O5`ckaqcGT'qE-,%9,Rh^5l^7i/ln.C6B,Mrj-^IUeBK_OBrf'u_<H*/go/b<_?Oc.V7]Q%IE;GokT&u&M*<EZs2.5;k))d%L#8m>UT]4!\$A<'6U\[h%F,FmPo"Ndu*'07g,adbQ"AX:?(hO[/p-KLV*.Y&\6Y:O[VPpMRPOjD_\mG@GW9eJt[;!hoJ/6#J:`?V9X(;`]2,`=BNZau(+TYAX%CVD:@l>h4(r\@:[j2Ph#]?G_,bB8qr=P'o#:nZUk5hjDDS/E!M$opjFE(.EAG@4T1`UBa](Ke_-fu#6mX=q-Fa7:@qk=!C&N69V9%1]6,LQkg37d.7ZE<b?*P_;"0[DDN"47@F_b"Ts4]AV[Ee5GR@qV%2-jR8Fee8M4\="S8P'9O"s=8c@m-^1,dX3j+gC)&=,+?hkFO%XuRLVe<:8.n9/q'KoK+GTS;6$J?f;,M5HTNLm+VlIqmj5[D]P)#^;K-_tXb\;)R.,1Xe1b-!b-cYIjHH3r7nJZhDYcKP"I`iFccu%5Pc_l1<laQoF'6K>Wa_\9:"Fq*VFWO:7KEZKkFFDrkKL2$NCKc]s[1L:C51f,)K?a=+a#7?A*$>LtIh`(@PI-X\[Qe8d91/^+aSl%VV*j0JKS^CL"bs3/"KB0UU*5GSY+Qi'H(YH/LT"j9o7tj5E$p7g8,Y^G5HJDJ?F<GK@FPGK8a^T[%*&?gobHfdkOS.>ad@^1``Cl%(_o(]98+5n58KsH*R[eT0TN^nV\M)5AP<c9?BH&;/W%Asid5oGld5#cP*X:#2Mk'T#Xp/.Q"KS6^BnX9>g<FL)oFWEn5Q:L8leN5%S/+6rObR-,gg:3A&!QT2mlC<SIO*odB(u?2C^oH0*njV<5_[u*FpSJB/d+M%DV[Pr/ZS\#YYT^T&)t@=?J^F`2jN&SbOmBO6i&[Q%nV-bU0?E&?\rf29rR2KXnmoWT%sV)Bp_*a-aacNE5g7Y]ILVon6hXP>UfY<L`36cpAqP-=Oq!;]B&i_*W?(mThYBM9nJC7>H/2"5%o)AUCgY`rQdhGJR.JtEhIPq22(RPN8S!A81`;n\s'T`t#gD1T]?\^=&p$2gn&DkbKgGn+fORKp<nArLmlA,_boL>bA3Y_O^s37Yd%KTLO:Is4Vg3`X[e8g4[Y0P.paFACUUD)e)O44UHi(VnPq;^\"]KV"#b$o"dg7.)#=+MZsO?]%%iPAO*EL%p,k:ZFM:[^!!]AZdZ\%/^C"3.oem?C[dG!9#foW3[DcV^Q)646^K1mJ2Xh0h/!,I:Q:(FXDrEA4P/\TU836=*L"1Co[apA-BFL?Lb!h$bD0gGn\aj*eF.o3%>9u$.AnL'sq=b8Vp,;.A!=g)&4h21g4UI_IpngKp*dn5SYTpE*rN8F<dm.`*#(8Lq/dNofM!&lMf4:oee/?2=e=Liq/o0O!Ud*ON%L+[hBa8bg/[bdbm8FO!/>lqdI^&V`$kk8)urLs!4nd`3kn4Vi:!KspQ:OjGcLr93WchZ)_bH,`'ZAOm02IC[MC%,g%jHT+7*NDCD%UKeZ34P,_+XB]u8Zk2?spP/fKeUP4N+>_FC$\"JkX)h1beqRKdZ=JbPJ<QPE#.m>h$O+m8>7HFYcb\IjgRi"#kh>P!Wu"QbJpOob%Vu$DCCQquJ+N$H;8pQAd],4([*L[_m]LIrA1ru4*m/i8!)3@tt#?gpG):?W9^2PuhIb6?OZXEjWH^c7I\M&J2&uS/s/THg]'s)$a%a"WrbW]:CrU%F^&]O(kM]q7[7`^H$6,TRt1$d9D\9AS&:B"aD8c"$b&KAdP6L&(hP/^$(#8B_4SMh\Cf(rk+],Ma=N$(YEHbAXpV%:GMj_5u0qh;\c&ISs7]F:tqMq*B*^e]=qP5Gp_/!!p\C<*73?JT3";qYK._J7FV%VD)47J$fju,Y&lKi2#js)qa*,JYLcU->s776%&:9[&d;cA0`'=3`cQnG+3Wg+8GCqVr([0b7VSI,Ff@CJ-LVCfIUY");kZuOQ]aGh3X5"h!5mt^!==YtZ]mWI<#0/CCd^qg=\*4%K%m`NbX%aP7rV=#Ph]u^#s%X/)c#.Y]lF4fOnN(qfrCKYI4JB:6ADbE>Gj_O=n6h2q%j8jZUSbO@1*_+L=%+47Fa@HfGdRNU",C\>P%U'DK5]WO6CN0k[+&N)lIJH!j:9Y?&=2&S#9^UXVD"M)#G<0B>L.$O`i0qGiD`djMgbW+`o2?9sAg`JY@:!(]3,1/ZK,*?\^U=Tou%2l)ZKXXOfd.Nnj@$MZ=E-<3)5!b=qWQUHeNVP%_rF+`L`+4a*/h,5A>.@[ZkrBSmGmbn0l`af=Nqj@o)95RPECuBD^RggE`YHos)%d,G-I-/7rm:`0[Tj[e@hhMW*?JGsLV[6E0rFfK"aL`PoB2LQ;BZ3(`1e(*%T:=Q(-!UeA&XDE$]l/:464Lh>sS@qVRG.Sop/0pE&%#OI>k@#"OO/>b$;1(]Hm]`fV:/CeF_$W?.:G\87FEr>t`K+=PE#Mt%J-sG8kT$BVuC06HK?DXtjGTt8:daQdA9u/s)/()RKP&R70%/d%SJZEcU(_-%YMl:[Dk_>H"In$B9SL0JT9]bX;:(C;0K0tP)(=6K.HEa;'LLO"\[>-ofIB[eT8#%O*h#;T03Le8KWL[X%AH9F7Y%oNYj%XC`G=Y;-EK_mc*'ga)mGX[8XuWi:sn!&V[sO!+ueq&3kQV!:V+XH@mi;cEDYFWH'sRTk*XE&9qa<k=+[pVP<O7adX4j)M1=%Dc,ZOZdT9%pB'&BArBONq(.*U6e\<c;N15A06LOGl^A>L[SM>&HMLum!ST`NYHrZBCSaO>W,#+MD]oigYBub<=J*9s'l\7gG[g@=%Z/0itEp2-n!c)ECa*/)fXDk!(ZX0`oHCc$X%f;RQil96?'/h2(BS/OIn^6;h%'16n`5SS=;64:WpSDJsNdP0YTFauTVCRS#-U\j+%b1d,CTa,Q6#0emdgGc'hcsD25[/b&rhUgEbFhrJWN(^sAKb<K5=;Z$[*"*u$Q*4P-6,`<bc*_(ULOMnt;?PK0bBaK#69k(U3&U+Q%_<EpaLS'j7At5TgAYV.h[ukC1-TJQ/c&?X\icZ`N)&>pbBFG+/3KiEQT7Tt0c1QU3P;dR//!aRV,\\g&oBKVY5N:M@P_jtt9P5\[%2uiK]R_:=2RlTm%!hiTfS_A3FW0:GsR6O]/k?+$=SDd4\b[$J`;4oHS6Fl_ZOC^lu'[](5V(O^R3'^[85$`Y`6kiYM7FQ<^`8unD%<OHfd)'nZ0[0q#q13>/forEDW@'Oj)JMY)Mf<lNY,B6SMAr7"T&M\DG&)Bi[-M/Y,a1NZXEWrGDSa2Ab]gplFfs>WM-m<pUD9a7"%F%Z,DN!TtS*!3N\?PfZuUs1@r[iI%XE*]Km`g<3_0P&iX`J/aN)R=.m9hf9/ARF%'!igP?CSH;\L%*0,G(?!CF.!@O-TiQi^kPA_%]M"=<ZB5+`inW/F"NA7s(PoVH[RRsuL*^)+Xk-Ld\?>"2(2QQ5UhG^_\SD+-BBu!BKYuTK@b4WG],Z%liEJ/B2m&7.IUEF\q@R+2%a53;cL:En%9^N3ueLq(`L9u&HI6d8!_p3;&5)46o%&mu?"6>P=H$"#7WZ`tG;f0;,4q>&+&*Vo%ql-UUqV%!-JTpGT&`T2TpB#O/%f0MkYnhTd[Uk8dt$8iP<XgN9*0Zqim;\gq)BehWXILJh6g>L+)#dBH`:hlTX9noq.PB^c9<*:>iS)q<;E@Ub\hoMYlT@81eU6[:-%\2s.HHYl*O0t+S:^SimcKAm=A=%5:6YhP11i6fF-(-f<bi1\?b^0`KkK3^gb\H^QJSOR;7"0em:+2L[C`+5,9K?\Gp:LJ3L[I?hg%7Dml=\pl,RNCtNk<ChKiOaV(8Wjq*N\o)?3IP]9]-.0ahl!eM+a1F3db!,b3Eh`#^'du7^D+N!q,$d)<%U27]^I+cdX!i3!qTPa)%!M.2tFJ/Y$h&rbi#9ZRNZ0Y,T7L$@7C]hVAAt&Y2Z>#THKo8B?\`8&drNNX-G@;+Dk/D3?L!.&g!Sl?[jU'XL=<>"qf+3uJ1<YHp%rq1'X",=o$d-^TOF`>oAa4ot+T/aai\fH9+kB;6>WeuZB\)Y*T#;">c.bS>Sn1pu4:%eVUj]\WFULnZ>;Xm8o@R>mg(peF-HCGe"%j&gZ,Uk%jjOWW(PoKfG#AS]7G3s3^O:U4VK5AsGO\8N<lp'b/`5LmqgnkNB,9Sn'OA*1,bZ%WCSOAb53l0RCh=hiTP2@9rJ0E+dI%I,#H-@Di&M;L;8D<ed7j+5Vk^McijUP2Ycf*'*PC0:),*#%Ajl81bY]S9hh.YMV4KA"V.[]o2^d2KggJ15<a_kd['-4BQ*=BBBM(%.Q))]``iqo3k#N-2kS'GSX@;>niZVN.*87?R?aS(AlV\^,PeZf_q+C/5tb^,TUMU!+@B?QG3&W[o7+&c*JWB["#Kj6>dnQsW\>'C%\82oTB(k^0e3q+]08j#t9f>N1c<0lZ+BZh#%=\G(*rmT[Cgr_=IVcI*:3f9*Gm7s+DZ#V+<C@+*/Hq)fV<Md[,UHBJN%0SFV^9b^%]"(%D-q)Gd]!!*+q;uspdBW]A]PI2TGi%s7Dk?\2\t45!9gk82:eEq<832"8"HmRO]820:bl:T%Ed:\*N&X'sWI0Ng:]3&8lB)=M%WH]iF4"/X/X)a`hc/bl'$QLaKR*/6<%Ws(/SHQX1!2#JM2sjtK`-8!*P_9tK!-:?&Y%q-Shlm7gs$B_7T$\#jKO'>B<!0.dKBBqe%S)=::2G=e5KX8[=0+[^Fcp,8fI:a4HF]"KOa\&\4JDMCEonsU1C=dZX'C5PpI--2Z6V%P2&_6iSbhc^NXd'"kLlFu35$.W[$km*3%Xk@@6K'uCP?HWC)"kk:G--0IOJ7fZh9%CZsU6QToh']'^?go#3>e*mCW\72Me-km`%?ftbr@uk6qZF*o\,F/&J[`89+83_aZBok"%g[.l)ZYFqQ$snK9FcNbXN;\CbIC@<-'Va'&)V$,Aq!fan'<O#^+Qc2bVj:Ej%l&k6)!5AY>D0(($N!KKb^`W6(o@%qSCD/]j7GY3%:;j$_jY)(>6[r90"A69\D3ZOcL8m(R_,*]-Kg+:+L_QgIcZM:aPdf,bcOk`R?>o!9+?LVB<+:HU:=4-/iD$kKm?F*-`9&)ZGSX>m%EL^>[#]`G>k/QZ^:!enaS\_m-C?Ls*j7Es%d>\RJ6"FkC;^k'Ni&69.5"s6s[[,=j+so2k>.8eR58uWBFtaH(d:0G2?Th#e5niL_%>j9G<KTJWR;0OCjlTsFC<':q<!]V/S8?5hDTTJCnfEg35),n8ZdO_fJPdGF6Q+8AgNULcZphhu]5,odF]kP.LG5VQR9[b![KY^>&%Pq\@G2RHMB,BLelFt7PX*Sm3NrRfk@*(T@<SNC:To4DJ=;gH9_5N[`FpA:0hWnY1.IVaPAgeCJcJC.<'B$-f:Z%ISl"(AnP]$o=e%`]KX>.[`Jg[3>kKdNnPK[66?rl%Z.U38S_OLR!ilP'+_.2A9n=1(7\C34IjS![&KW#d=AVf#/-L2Ur[^!2Vt]*?3l=T+cV[A<Ud]%!%-AbnRP@sp7)?o=:k%Y$Y?P,$,C3FC"Ff+Qk9O!'T_2.!b>hH/-'2&1MrpWD%j*^0u$(Lb_M:^FZTKe"Z]0@p!_i^"X_+6l&;qg%!>]rL+D..Zl3Z*>`fY64jZ4!6T"@^XM$,R'=:R47LgcnY"YF0F+Zl;-l'qMAO-Cn8U,5-T5`&L=(*Xa00dUohEr<C@=D&('X52hU%W_erMG3[SmTU:32.Nd/V^`b+(aVtsSphaELIk4,&V&+s<pasK\+Eul3F`B3NY<m-J'M40fJo+=KcE([.B*!SPJ;r%UlXeD<mNG4B%-g8FUmX.D+Nlj6<,>UkH/tX6>LUIbBB'C7Z=^g4+hGtJd[hUge%kEU9jm*6UoX;U:]r\G&1dArd)iO`JI#FL:*en2rJs"\@ip=2n%,cn74"Vu,q`@g:/dTY7/Q^-m1GEW?=Nb>t7#Ms$Pi<pD67Y\<k-qt>&d@b%eg^mWG`&_[g6aQklhs(c'KXR$I9Mj_l-rjXAP,P[q%>PIL;7b7g.Veh2$$dNu\8dZnU32g;/]/&2jB>XWQa-+KJTXF)!@05LUT9H;-L/jgHaTq=4A1tSJ8>`%\Ye7R#+Kq9>+2[HuT9`4J%["$pSM(MoeZGHJq0,ng/*9cdP?aSF>]KuIoX?B!u!^:%KWKjVqj[MRQ+uG>]C=O8Clp[`h0/=6K_1@;f*Idl6JQ)u^Y!ujpjk)=O%:5MeFgJTo5Eu-se*.O=XKJ9?=O).U/0^peSi5)YI1&QaKJZO#_:b)[FAi(7fi.nDsQpLBa*H;'*2(1jW54`J&90TPRBU%S#O)Qdb%ioRhVVe%BG6Fs'rbiCBlahjM!/PlO55DrmL_J3!d^h`J$B?8.8JR2n>dk'(?QM/!(!9UOA[RK91<>_"JQ@P%=?mujB/S[at6].7L%Jm/Rf"i6\8(XQCqk#4JeX/p$qM4=jYd55N#?5Xgdd9hlE`*W;4r%*-SF6PVrA1R8H;S0CAaiVJB'6J!5D`dDh];>^omsKuiU7%en%_nVTG#(2r[&Zp0g`)&)(b"t%kd-!K?ICcC2.NXmS=&phQ,;!tqrOU++"V%,g3GusLn/j'GSIO7&;m30:6JWuP)QK[6/RbTr7a+qK%EncGW\/(VOO8alC3,l;7SbDt=!0ZjL#GdSVhlce9M4e05Mg^T@`CVhS`O2t.1?`lQl5c.o;3Y?^RSC)?K5(G:1SE93jB.)kbF0q:%?BD4cM<C?2dcBD")C(%$*48-4M"Gmg,rLWl&)<+m-VuF;2M$peJR<uK@D#L3[mm9S?CR/hP?(P.)p&hPHK+r(FIbFTjN+WC=&=7B%%J1D1lqS@doG)XnZ<cf1q7H[RUZMP#,9GCg<X9*tR+n:2G)h+<F68Hco-i#:]W_;S9.2fYiE6T!8]R7eQkQD\F)'$hPAJW-3+b*J%4MX(ur+F[2C4<;u;.*'nGcW3K6938njn<am54JEFm=1q8O\:l\%E&[eK`Amm&'pQU:Q/<i2$N1C!@+V=BphN!DhLp]L`Qn6Pj&WP%UF!G%BaMMH(=K<adB%IHnM4C4FeGHdHjW:>0;P(;H<GH17s6mco(0Ft\0+%<r:-Bc12PG+-S/c%0]sPX,&;rXiW>o*5sr*^5ck_;%Fn]Z2QsPJ]Z7BFB#fm!(84R4HWa-u]2UB=VYkf>L=k:MY,tV[SoH\=FNl67:bH@6XLkMM#e_rD2P!ltUOPs03#P*uM_]??_>njS0%!rm$s,I?54+(<0e"$.p(n*U7./l96"&FIY)l3stu,o;c?OL!BR'N<Q?UK%gM-J<n2i@<'@NF%]G@A+d+6j)6mA\EK+$6r@TX0O6Z%-RFq!2[MN!RO(O]^C45VR0?!AUZISnCK-ZI8"tN(r=2jP#6=G*_=V%hL6'DAAn]SPNL$+crr]#CkS6NR[4/Md\V;P+Al2Z)F&"79%ZoPQ%gd@O9a`^5'"m7#-;kHBhZqhgJ?'hUjFu'cM?UU6gQMWJJ-4ak>_^&"<\,QI[#l/C9icB4bZKem+Z)AfFVb-1i;dj:l(5eJ`%\8Th#%G".H7qQdE3j#Mg[52qUN@cl=?3<s2A[&.8#3ri71tg0]O8V2MGaaM:2ntXU8's)-qd(qY!a?2urHXQOLGB-P_@bcCUll_@%I?rYh>JmEhqu11'oK$L/ks_GlA]?GZh08F/hU>!@-FDX$A.]/M(rX)tZ8FS7o5*IIcS)>C!fpM^W_f9`pb/h^-9>dC9K9A!IckWj%FtORKC\8_qm3GWQk,FS4g9J;7!OVC98O2a0Rp1@1Vd"1Y\q_\W-=rHYr4RIMdM^YPmr=\A8m>PX!7F^YimnqG;KKKYL('m[$`Vkj%L>J%<'P&U>'DI/2Ph:8^Wq=N?<LpW4lW)mTl4A+\%_Q"[9%N,s[q_1=APs)5Ie0Zu6V2c+)kGc&pJU/A%*$AAcMs4H;@*kKT+$l^%mF:IoOCX3,s#OYamM-36cD&dDqNlfbo3OVcRP[16K6)+:P+lGYKKdbYlKiR-5h4da9Bi))[o7\#,.%&7>b?Z>@2\O>O'n1jS(lep%]MIF7=m%'/3MZK1ApBT<':e*0J&%tl:ODi)F*5RA.`h)PKBLX=SP,>'eeM@(Y2F$*7:UAN5)%^<YW(B^UE@eZrHr@9Jpd5kpoh<b%OVW3>GSa->&T\s.@GB.[fsHMk>eg^\P#DcGs$F6ah!-AdrfSg$24<)]21+t;C]!FQ,m/6*c(P<FFVXY%/kI@iH#hU`7gXDicu$$5%2(#,Eeaji)a,8It-A`3>(-F^coXf&2!U4K6i0'29Dfte6<%iTD=c]6bM>*lANosF),=>@al#`I7QKY9PUFr5KOr0mA6mlLO76![o%$%4N@nsL,]hlJ25Pk;)@F&m`HWPK&O%oL)1mIu+d3!#J(UeY=]*4Z2^G]XIMRFj2S9,Y*[=ES;dqKB8-jcQ`qcgI[EbRc'V=+[LV%SXl,PgmYtK2H^?RE\A=P\3cW`Y3nIl0QM:R>(GW)*^`oo1,KA-;+WK#gb]aATI5m`4fMH5[p(lg467Bi_u5rP%3NkobRG3R[T+@m%f<,plb1n*!q_,f4L7NZ4BHThFi&t5M=c,'SF)$0L&FS6O(L[COIBAZa9%OZdQW!X`i+t]_nTkpD%t!DI:p9`$^+lTYK^EUV_^<dU%CTE\HSaJ)kH@3VQ*h/3;F'8!@ok'!)cb`)Z:O3JnO`s;[fm2LGQYG,Ir!RPJjHuuSckVoH&EB&+lD8/Fh"iVp&cL3eTY%S^h,!F3%o#eQcZobSdg]$`^R<!#lVs)RCY<oVgo5:8F5PU1e,$50slX[m?&X-V-.F^S/eIJ5)Ki2u_?:i8W"W-]Of.A`g@Nh1a$+!!4f?L>k%^NH.DR:\c_`hgTuF-\sHLjO)j3<KH,H#r\9ZG"ZU;fR:u4k-n]`!_\-XglE%*Zkk7@O?([md%Ytjn-'PXS1LDH$QEC%FR1ANYYg@%KdaFr:Cs,V_s"tJU/X``V9Z'6<I-YBFI=+0QBKs.0'Gf:QSo%?k'A,qn(8gS9\_Yl&jif'M,rD+m9PGdo_s+#T3o$YHJG]I)X#m?%/VYRp`p/Da<EQ@+Pu'gK-4TZj9Vs0f[]-D/\jSmG(mHh<pN6cZb_WmQR?`MLo%oGo3'ot&!=RAW-.T*Fqt9dcnJ].QY'Fnacf?lV%!S%5PSRBrDQV#`;D32g@@61c/\adZ^6?E+T*0(\OUD-cF$s+r6dE"Zn]-eL'"i:'b9'WJF*`8YiCs.Th9u3*g:un1rc\W.Z2_B1q%eULi%F?b<S\66hNm+Jt5LH;4THaI<6cqY-NR'gJ\$^l26rF(r7LJpM_W0Tn:MOQ6V!3.?P9_!LQT3&>)fB?gi3%WU=iUO]L$7sGF%\qKK5AB$lO_s.Cq.3qMZjC?)C<V3C5r@7FU"hcBmZ4:ir+).56o1e$P"Kme,$?-T7LPW$O-4K9'Ra;=R.<E--.g.f9.P`^V(X9Ca%1D]>+1B%I/<Z#<YBa+X2@SYGB>df-p4O*,`2]$/?GK4>lPI*&NZjGo@fr?V"LBM6DQ(8NtG[0/FBB$i`,F$W30DtFiW(F5gFqMPV%gJ<b&ji/d@,@@TGDC51M^j5#HV/EFrH,BEK?p6*^im,_[GYmcF\_Ih,q`1St]<@B[<?1Nb-(O2_PoE[0Ad#*HqIVX@0@rhDH;L&5%n,:`fqpSZHb3(0"oUKX);Foh&?8)u3>)H12f,)/ea6;"($,Fo>=NtV"k788'a"pM_BnO\F4#g2a`d4;goV@OipR5f*=OXTICl!c9%=?-SqPA8PB95"Lb5fQ$([$`0,a6-U9M288up=We`<?W0e,K,:n[$%t'E.iF+52?EJ&U'N:@N(p?72RPa#kJA.8aX,WE>d%iT?Z)^%/fp_N.DZM_j6d[U[$d!"5(C>^Wi,7$IF7Yo1M^.VQ/dR0dUZ!J09_?QNj_8h];pE4ESBAbcEZf<VYt,_IF\2DY)38)\qr=D4mMVg%d2Y5*lT=@Hq"[$u#+0c%\n].q`1+[2\_Ziu4`*nn?3uXk_96*7#cD:CA0'.6$acW8F!;O$1hlOTXhI,?R%i95@Bqr9]^TMa[/[Ie%CXgi?_*jRnDnq(sgeo;7#gp@dLibg%fd1IK%JcIWr:5:RleBrT_d&:*#MIVq!dcffE$G65kYgcU;H!_;O5Zm,>9Q#hF;pk(V.)kP%$k6$$M'L=UktlJmr[EbN)6<Y/eZ4m>dh#k0Zd"GYW6IkQ-=A\ZLfGpO3!S2fXFlU:d7&'/Fk$Z'%HR%2;1Pt*0>0cZ1T+qpX!5<A%*:>b_'4%M>)b+C@6*<O&=*`>6b5'L):#*CD>Bq0Qn'I3[l."a24jJ_h1sJ.'4aN^d[sCU=X$;Clj87JU%bel=4EfpG;B.?"Q02.m%(Q<+QX!M)ga_W;R9[E-Q1/2,bfjsPK&iV)\MDg.K(g"k>'G0;&JmlCZ:5n#5MKg#&5;19Y+u9%32+>k?R2Bj\X4jF4][=Y"M&W."%82JM2ke(E>Wr#O_OEg2l]->.,[s=MpIPtoO,HP^5AmH#:maa[972*UW"W+V0ZN#kn2[Ug:&\6;UXZeY4(sL@0En],e<Va$!2E'As%+h+(4&;AErqi+-A+6K!`>EdVE:+WlKpnlZ]N"R42S*GBADkdX(7K9!d]5Mp:SQ9cOILl2/_/.H=/U:m3/eMd^`[fF;p)dBtolt1f%MYYe9cWfbC:E7:&ns!i?_fIA%l49(+hqClJ*"nGYPL^_\90=NdJDrNb5kNP%Ls-"$+2-)Pl-TWmf2c/FkE=W]c')*,E@_:Ss$i2E%N,NibRF.-P;'/R"N'QZePNERM>%^Z5,2jfTNDT82L]A)Z<"s\EM"%#>G&5)D^Bd2)J%+4A+p#m%7>VMNq>!\*d^Wi!4X)B-r=[q3%`l"CC?Zti08*tF3gIPJucH?5og&`=-Oj@fuqH=6@=l\J=:@3B%`E:X=`D94Jr*sjKmt/S*ZP>,7\#@@\POEG^o=SfR,o`YDPXSIc%7Zp2SR"efCJe^d46?$9#h/mdRD\m(@>ts$W[,F_\O7j@&HILE=]j34<$/O!*[#&DXSBFl`*PY&)<k@"k\#VU&>]cDUrA0G"38Ztb%8dRSb(-(DS$6USt(CeLSo")R`!Fo7<Wd'XPaPe!^r2,-;3m%7Fi2)T!EjV`*:P;KMY%ss98N>99M=2]W'rS#eA6hLI,X=M)+^t+F%OUOi[e0luV1l2=rAH/JQTOR.HZP@dE%GWP)=+B(^XL^A<?#@;6-UtZ^aAk*HoaKTLl_*).\HQ'$b"Hik'-<-LY5?a^%-RUT,W:#D%-qp'OB+L4DlK@RP^.7e@0>^B&\jp"/m*=R]f??CB0lcApAk6BO^OCa[8aW+!q0Mg-Ys@H+rl--C^Tt?kmUN*@2gaW+HG"Q2\#]1E%hq]Wd[+4Q2^=QQ-/_XN<?*E];EqR*%gZ[pI]m&2\n%)e/FDT@;@D/uGf=\RN']bp"@eYphjY<s5$$kVC4n>F(5Nq>T-a54gnF+kr%!h!L]]*.rG#&q\I@tSo6'pO&rH<Z4m]'(FPg<eli[2;kseIMPQYQ,Z1P),c!Fs)0S>9IJCH()*E_J7iq:RW9*>tU[97C=DN,pOb7%G"N>Q&lfq0;#fS'[,<HB@I:$C]FZSW3?]cP.uQcs4:"Q!VpeG(Um$3r7u>o]Kc&-/(I!98Or>O+b+-_'FI..CHlHBFlF+TP_$G=O%7&3=1`NG_%=#%Z?\S<Rrhqb+C)s<fqg4p,Y:D\EWMA/6NmMk6d]ZM)clV>'J,$dVO].,S$%CEmJWru;\\hXaAfHafL>8^^%9t^6*%^U0ZiiDWp/eh4lhPeJZe>#_4pZ'qm?'OX#KA19D\5oR>B@$QpLN(1HBK_&Qc0#h9_.%^]raIBI?1qAe\g,A-l&4si6kduQ<$XqA.%T]=))[?dE2e,UBrmhasE!:(rbWQ[m?(RYq?O)@CM?o'mj)SGMYUJZi?kc>XdL[?8?j82cr1iQ9"j'QkmY56s;UZXH(cW0[mm)LkS%q/)\!nmS5go!ZtEH!>$_r)db2iNA`]f)J+E2p)$9]:8pIiTHeZ$L^j'KmO>?Ef?Q'cp#K$WV`E,jG6D7!YXaW4N#CbC.>TuZ0DgZ%2BjWNq9/mn8^o02\#O1L@RWk?9;Ca<S*1,`24sJaX%$;=<n<s1e("tBCKVNqVJEn'EN3/1qYb\>%D2"*l*?Zq9g*F6cdG"YZf?:$%GF!6@+]$L.e3&D(+NY*tZiJinf"6LG;j$\Jr(Y-'pQs$mCWm3("8X?je-f216jI)mR_k+'hRDk&7EQSZp#g[MIg)T3^&I'Z_]Dj<%0(`*g*5jsh)d1QNl"P?9pZ4ck%1npX?@2''4B`A'h;7#'<_gVN$u5c,dJhYu8oC>TWKUT7`/Sa;I@%+Nm>ARmE=)W\r9OQ6\PDZO%Mt4TME6B>pW@?58=k*g<&+&Q&#YR79k;)s0Q?M.HOZCji9%TbVJ"'cfI64ST?r,:!O<.Hqg`6kHZE%2pVT`/,4Y,c*$#Nc+P:`#*%N?KkV3QK[amTqL6?iGQPHi6^An"SIL#gFi?#ph@-9Y0P-Dc>ko:KM\OU$h+L;_"6Df]J:"nPQP_d*EP^TgC&V_@A\K_1,H0UC&"Q%a9Ir@!rOOM\#l(Hk$FnC,Q+)*m]$Ui2iB&pZa>D,CnE+#o=Im68e3+.r)Q>C0:$gq#S_!*M#ShC"8a:og$EH>dJ.t"9`b+84.G4W%D$j,92Q$C7NI#O3#8I-24;lK2@PThFW%+-C1>51IgFrP4C"T)aPgCF_--XM4,,/fVnB:/N>;kH<6p^>--;?)CA/B="bFh@B0ceM&%RJBpCL+4[0G1k864aWY>EaVnsL64ab,Imn<,^bA!P3+#'+s<$ac"%F2gCXn]BaZZl&OQLbaa1h&(No''IRD84kAJkHLD%/NQ"8lb%&(PgYD?oUA_)jus^j`:=2l:'+<'0WXo(\mJEUm=D,$6s=TLUV]lqeQD=u5+kUDu.jGuGA`o+=;]R'(^%7*"2#G/m$bHE@65,_YPg%)Ch#3dqQ!9M-O;8)rfts.[AB"oe4q-\Gf\'&il-IfGc%*[7.F2O<bMX?Mf[sd^Gp&jcmp9gidMZ3u;(.0AO7]/Mr*bFb,GBb2t^m%`our9S^0g2ZsC@,ZS=Pd.@)W%E#\.5W%,V+.:4YU*&TMGPdq:D7-ufEfi=1"VL;V28!EDqEk3+;WPA+:gcSo4l/:"5j'@/,,MG')%_96sU)&L=qgL7e&R1Al<bIhXG)(g*M,k5D-'`Z]V_Bd2Y>h@>i,"jiU/6Fe7\SfPm*M60R8n=A$M1Tc68n+?'3aN?g7O*Q7=#S7\%6K7=L/`K'E8;:80^4/:V@bY\?PJq2dg`P-@&!!RpFd>6`$V6![CtF]#e0?sHTV#NP89:13.6gqa%erF+5LBV&CG##%;3hPU!`f1g%'u7Nf;8e+_WsGK[#+On(fj[X!1OtBLY/V7BHdZZqTYBUUR\!ip8HY6cCMe3OM$?Y@58r3oeEK.5a4ef<G)>qWCLn-8fM`l_2_$m*%,=6_,kAcIhSo6Nl!a!%.n!iQ7n5:)ULa9f6TKRNP3bKNE`>k]&)Sgb)Su>[*HA\/'ot?h\F9Wq_:odV0p"jht7gq\mP%as@75@ge%(?OuU3*\%:i@2[6NH2u`c^<F9J@;,Z]8=^C(a052M1<plSosEGZ)Fp,rFtC=+i(*,\rIaV#=[o_a+sMS/uMM\aAsU$!@H>@7h->:%-d13Y#'NG?@%e8;C&V*'Y$a'BnthX*k-0X7^'MaHX0/Pl@G:DkaW"=74&srq;q[A59VAlG+'6Qq'W9GF9glR]WWV&Liqo%?<*Vk@%*j@9s=c.G4J-jpQP)'YX#t9csA9>!!/XRUBB[Tf(4;Dc/hP-$!e[TJaPd)^[.BY"=_XE$=csW-k8D@BnLaYgImpO"@mEtm(P(3su%Y;*YQR*_Ygpu]If:<,!)qS?\7M8nhO`Tj#4l4\s'T%!R3QYAJ;=,6R.3h4Ul<D!iRMTn1TB)Oc(d\PFGbaKa[M"[a7opd]X<IdJs%:;G$u>&NnT/UhHTCV=ot4^"N43L^<"P@\cYf=q/;>=s(bic@W8*onY2B=K>EGuJ52iaB&@&r:H@k"b=D\J^Ynl!C_"jm3>mVmJ<Q%JcI5eQuM@1)9nFogt#(QNjJ5qQfaHtdot),IZn%hB.ikT*lO^1DpZateTVdVCK6l&rDpQf[J/pi$2rtKL$0jkWi"7LSeibS'+n/<%E>HWVBib\+lbr"(HU.I5i@9&3M5-uXl[65<PI_#\dX%Kp-D2mL54:$A7p5ScLh&m?YhbSLE,"NY]YY^Licruk/:hMXpF.]9\J3M@%QCHD1lFH6)\#[)Ze@&og1!tpPn;pm5`^;),]hEeVM%3.2W=e\R!X?[j3N'\KZe/jcG]qkNjt`&EU;P2d8);X8fj!Y,*er`eK_;pU%[4ViIlQTQ;Vld,FX1kZ$$,^Vnpp'*rVL=:1]\/sIb=$e4!LKfo$-5;d3[fGYT!o*JJu27&geFfAUlJN@*%:jnPS`;o!_0-aOiXf,%o'X_eLGL:\qtPFS=I\VgL`Bp;+3O*S,FVt7#(bJg4,1X#%"!_?\F_-%gA7^B9\!S_7:2MA4L$<\h]E'EA0Y!aDTV'fbeLAiA9qd.%*Vp1CN=tp`p@\CSnL>T+>U-_3AiffQ(^dG3(P%'+KVHQl5UQ07e0"b#f$jcGa];*15&Fg&@U^`kj_fcLVN6]=-2\=#Ter?"5`c=q%IOlF7Z?i2)O<.Nd+O-![O(iRY+:qN3hVt=.L.CCuqr(X5I>PZs3\hc-')/>@aZ$9LC2h?Q^2DE5n"a)gPZ6pnlIkA'dDW88.h*$p%)js(Mr+JVV4c'&b1QJD&nC")ij*$BI@\cETV'F/o'cKll3j-UU#$m"?:6QTL&o/i/_!>J*AdMaqV1h!>E1+A"fceoX]qL=`nU8p^%qSuutj;Zh&J[W4o8ccN:mNhZc#"o3ZdDOO.jIH%OBiDI]//ZPi<CpBBM6GpsA0PYtr5kHNEh0WBX<fCV76uBq`lS74.W+rp=]m:_%[D[10;CDH";_/)./fEN1?!oAe9g[P7L2!m2'>-e]iZFq90*QoB9VWW6DCFGSmmN?Qn<!D9fZ<B--S^At1lpM^%@n%.1%)6_U;Cj)%@mJ3p\oN%c`c&>`)ga.5AVa&V_1GfgM1"#N?m.E!O1m4]/YN!)B65^'92r"?.!<_?gD4oqZGFI61r,j-^t1JXflV5@Qo1<W$cY.9%,1Ze1=5J;:!:X2N9<MI+VK'e\0MB"G6q<7Do^$mq43;O(a'3QQW0HN9k!-VAYBGsOKX?(($O=/_-PZFh/!\8?L-H6,!4eoYn2k'!%'8e5W\e`,4*V$c."HdKFVr/%e>V]2mS]=GJ&X"A6kOU0AO>HY8d?Ja=^GsWmLpZFY$;mf^N?-fVEgd`JXOB&*.R]-8=Z#n!):s^\%hKa*<I%@&0'O@^/>H$fe'deF(/5Vro\(9d"L<1tg1tp*6Ii%CW<)GGQ\kX5s+>U^#?11CX"*l4[gHCpdQ?EAkET1sg+eu7TAiYsc%EZPE0rF8mCj,c-a63q)oao0D+EK>%C2c"+N<C'Fj0:lGV?P<df8>bP5S'3@gkW9q2nf19\]<dB8n'aq"XJ@/>P<+,k'L1oQ0$WMW%qt=Bq[KB@JIL277=s[H-b3<"1dELcu9H03R1@7e@-lfc.s#ca"2PrKRQ1m-4]j@b/b+q^YD)i6e@KY1=Sn/2^4-`*`$+4?mFib'(%\eEF&`@5OeN0b8g(1V<r</9*]rs,/LfF$K5M@"rmBsd&8L&KRBPTgpH$^+J=%.-4J.H*9=\)c:+AnGVeXr7>]elk.mrPbAg>jnZo%[DRk<FfeL_ct2"u(rkO#dW;f`WEns5!MNj2hiM-mDk()!Xj*:-"&JG$6CM@5ET=1RdcA>7kX5E9NF0oG-3n^ZW!"Bej;a<RN()n(%;tP$TDOHbm+$3?+opmAXqED:GBe:hcfl#UpB=bki^=DQH[/SrCbU0.O!`KOmRB2oZ"_%b[,%TujQgIU>m%KQan%AU@DR$`eX1HGJ%L?BAYKCFZ+^(c!i:DF'+9=@8.oGE1q&%Br/(m:F:Tg,6n<c4FXc0S_/'u=Xti^8/fggm7)H@fL*.<lD*d<#+,abkcKG7PQr&W]#q%5^n,f8A8f#eu&?4`DuJ4d^#.q<C#'*..QD.(\LEnPX4c=eBOj;\*3ITe/H@SgAO/,ctT==0=olDa,@]'iq"4s(khcU0i!e-?)(Q-%'jsPd=/kP)`O&VD=#!o+Y.JhgW`5gVR9oPF'(h+C5>.YQdP9NkogT&k)$J,6W+_-iFN7^19$15S&ej@AYqg).c.]`4k?A$LSW>(&%/#AUc.*7?W8<S4O*Xq)ln*5jjV6]"A[adfYIQQ(p(JV9.(3Y(Gm>rAj<0-=DS:#<d:;bf:*e-]p`&kbHhQl'ZQ%\a$.dXP5',"J1%^b'&fT;i/%h=-^2$@2`nj]A8Hc^"$m]Q7_r'u/o+ca6i>'m/'fepe)34_._T2:'MS*g1Q,+d3d=SKX5086Ai>Fj<q4aFbQH"+>k@%8I+S`lE;Z(@XfZWTi5,aJ`\U--?qPc/6*5*(b<BUZf`1RJB'MP2YGJc&Hm>b$:h:LDHYnMbpJ'L2Ch`8Hm>ATl3KL5&Ku..aH8[4%I<Wb"CL[Nq]0CB%@I"pb2sJXk6:C&ZI9MF%2+",+`K7f=<j(.p$H(\1HS]^kc^]1AX?l_"T`pXkn#4i<0/\Wp'>8]X9"N;RFm4&C%:%Kuh'r/<@YHma["f4kTb?-2=FY'I/0%h:#Se/Fs?'"L"F^<i-&c6HHnn*?mG5)$`=LOU4@DC\9IFDY%oGMPL2HP0O.QumGmGf)t%FW.+ToK@:JadoX&0u,WAc#(,;6VGV0`fKFb=^aSPT%2<-&\W=5RJfU$oGEWhd`T"*Y-lcDYI$N5YIR,(>N1`kD4Xp+d'r^N_5A"s%O/"nj\IR>uf!QOJ<E?<QED5"A3Zg6Q,Kc*F0^"7-MV>H=eT4D=[m2!LS"?L]4s7Ber7]C)!gj]&.X\C?&f&u9>;Z]O?FAs/HdNu4%.-#HZT$`mc,O4!ZMY*#=K(3&P8_.sm1MAX;8rFl+1uCZ@l,SQ1[&@<(RNXmPXfRkF^0LNE[3/Z/9)E^?eQH<eHG'=kDY:",-)5S@%3[,JB')>r=]pVJS;QI6s$%#bW&rUEJXZRbcQXMAq6P>__/P+XM@ioTF>C2gpoQc]`h<[3p13#YQ4<kH-M00J>\QRa!R-U[h(]mtR%IT^>B\:U.9nI?cCTfQ=pg*)Ye_1TT@&s39-Y82_i)T>4ro6S^P]@V$60=T5X!?7h`+sZCnST^"3;D6#NUReoJhBST/ePu:gX"O/,%d)")R.g5`7)4Yf?>ENTTaAkH?6n]o=/T%,.qd=9qO@]9<`Hur&*_5jg.B@Xe4>u.GmDRQR;["Bs'1'/ur%.jQ7]5k=U%G*tI\\UI%F0u!d6"ePsMF]tcTS?2fjO:IB_>j'm6)1tDU45dX.H1)0pYAN).FUs+J!ANBCgGa0SN!L_dF*iDX/m)eX09FG\$S9S3p:d<H7g5i%I)<6b"s"fZ6&rI]%!7sImW>=NR(P4Hgb<&)WW656&U^KYP/LTOC*RnL'329NY)u*fLfSNA$E[kM/9T4ZlV@'dA",7=Qm#=u>E:CC%SRsBa#"n_CSuIMu5p)pi'M$^$h8K`o&"TY0(+D@;b@QW:+8H"+A$Pql#W/:3S-qYRBjcCmHg(po^)b4aWK.S$@T'DrP7\aADC.VS%FD=A"/5"1a4RM.u`-`-h@]Mfo1DB(]p!k#US""U;Sq.48@VPS`Oudle(XW)l,#H<KQ#<P]Ec"@%87+QGa*A$bre<<P&>j4%R^q%/%>0Z"%1tDm_Lu@3F^r=s*!(^*K+hgidY*P"(KX`6)@/K*#=K5ub3mW)j-PR"=VTod:U!Dli9M9#2A?6n"/90?s7k?eJ]#bEEb2K%2%=KugVH!jrQpZ!K7=ObS6Mefa<mj^/P^*&i+WL+sM9/JXtR-BBpHs$cOn^34Y4_7AtM>FTMQ^r=]KsKdD9/WKQLZI_n>J;\imq<[,%K*#LFOb`l5Fe:%c!=9*P+$($oT/L/7^44s/fHn2V\a+,s#+.\>[B::*TiohX/O\NUk7BB):p8Ju8-Y3J+IL2s^5+I0,.[Tg2foue%pN:N/CO=i1p8^3`Y@mk11aY8[A;e!Vjg@b\@e(dKRB`.u9g!`Mlo7[4>JKpXCiEOb8=:+jCbT1l+IkJlINi"*Y$.I(-9KoR*.)R7%8Il@ef*Z1*bE\EJJuk=4=AXe^;r"D`;-j(!*9!27jYn6==MrgDPV&2I]-GsT9A&[R071`:T@D,f"q6n`iVhEM`M@KkOB7-[fHrG&%Xb_D@>^\tU19K>:1NW\\)>5sc/G4(ac@`+O#Ou.paJ0E`LuVZ'SrS0m7)&n$bO^mNEI`nYD-.2P8LiuNgWYc0li=m\7O0_9k;HH7%]*qj#D:K29KBZU;:C]T6N5.-.1_=qci>.3*I$W&D'd6csSIe6id!M8U^T%KJ\S@%h[$qoQ;5/<H2pY;$;cFV[BeMeWjq,<AM4Y.'%N,p=,+?C9r3[0r@W13@lS,Lus?3cn1a#?b(2'SoH[]$G:\O<"_GUuha\#34KR1$[:koa%T\[,/#(L0=)b\`#(7S1a6WT\VFi.s68%:IM?cMr065F&'CA]^;@UEBeS:Q,'te%g=VR)LJ;41>l\(1=(J$XWD9=Qk>)90t7e$QWs$9#j_P5]k-@2]!u.W`Rr,hd"6QKU[iiL%8!I'[`mJBP+MoN*(UIW"Qk-DpkB%LOD8b+#X^iGR3Lk+nR:Z[ZbAsUKMn%9Y8uBk?HX#<['P#1nS((,0r>cKC[Lpoe"lkrE"l?'^%C0"bk?3-;D_76X?\K9?sFlju2Q1DXabI58)ZgpHtegLCaO6b)>=H>^ddrRi_Q1>-%+#BM"f7RjN0T-)Fp>$4"]?'\-U-a-3p:DGd%V$Go6&lsiF\SVDq=tpISO4#trSXE>$*7`pDWKdf&+17IpXF%KOY@7Qobt^8AoVqKY5(WbjQQ@L(ZJ.T['7<mo[LP^P[BGOCdSs+D%pU0p(U/l+c`C%.mK)*I1k^LQ[o_(r,7,@0#?`$G9j\O'e0-d,T&0M7>Pfg`TV("A+JGho%hm1D40Gd-;\U[gs]://Fq2pE\c4<T2%Zac+HZr\:0O&cf(IG0UR;:r*->D*8.1.^=9l)3?uHG+3b4dZCW$,7Grq=-QkcD8tarZrT?-!J*SY?`?7IG`(_ihm6ae)#4p.=>7L%endsJ+"=s@@1D?Q4mChg`87@oCI97m=:\R^+0nA"`hP!B>=?(%rgKiUa7I#u'"PV(T;Jo1M0a'oLla:dIK!3$cGnAU_gb9.WTWFT%bALuSRp%;D#_W5u4&>:#$ps0-Y-09#lM^h7m2jRq$G-JT?5)t=qSaB&I2)@EH?%)BE+]J+Xf9cX.MtTbYA#,KVud[:KMP4.iH(<_%f`;J!0\u<[+eugBqY`d%0'iQ9EKr:/'6;I;`;iJ$[0\io'Fa%'RI+8$9c)`"P"@/qE\f)3]]aQ0=HT>G?`_7-757jfaX')*nV<H.%^NEGU3ocS=&SsZo$?.RR\;@NJ?!"k9$=mpIDD\$A<i<#jdfpj`n6"$X-<6%I^]L*jTb*2io.\3s1@^Tp7upss_L<s6o^@(/Ukku`%j'A=,bCU@#eBR/8$P;B&N`c#!hi,HRiKA-1D4tK+iLU.Sm0V6n()ptOEt(fo>NJgL)l=hA$&M"Ub^67<>-alu-:DQ?*D"V)FioU>%p7r-e1fGgQl[K++;3)1jk:6tKPn2g#Tk4IoeI^-rJ;Z>VW6;`5UsEUDE"Y]"l14rJ8RF8s4h+0=)5_Ik*Y>a$4ijnS[?DV?JN9pb%&;u2g\^m[W$]3_4U$Wn0b[\Ec_Xp^L;QHA>o?5_oRF8aH^n2mf0kg"fQ*l*tE9,osO:i'8q;FK6dW&7i4nkW/kM+@S0PG:S,Vt?>%F%VtN;L]3W()!eV)^P<TRm?!>dY^U$gJ)9OB-@/W&\F8r?8^XZ0UhA\&u&*Iq^G0[b%^HY'GJ$:\gMkFRkL283n=<0C%9_CpJ;'$%M`,oTZ)$A!3*k+/G&k<fa8@Cj['9<uG0(lY*P4k.Q7J$J]?:^f1rlpp;3JB-P<)#S>!,#b*]6ig>T]<s5Ut(]8r;+rim!&i_0``s%1o"f2L,Kl!Wc`$/3e9Yo?/V[`KR'tPV%>JKcn2dL&P8YYe*@-Zq`Z[MX:?M^^C'5U.FegUDJ.3dcAaWs**M@:WXle"P87:Qb#5)6%;Dni9+C?q"mNX*k76XG3H1(.ep0jd0TPr"YgJ;:S9)Nd#5AJV^9&lFOo:KOR(C;@HrT0A=k/#\M\``D[^!s41l!0MIM5_k>3%PKl%J6sUD_dWj2%P>8gF$="O(ZNJE#O8pqR=7lNM^V*E(Z"NmhNP96=5I:2EF#\[pM=%L4>D1[E*5)n5*jJ,#<pC8XsJ6T<\6rf&A8k>%^Bb5&Nn:"jB],jq9DdN'!k1=<;KT[N:3GgAF`!E;fM<,KH\d%'/Tm^gBg&ofK)GRLO%mhu"`7Er.Y^BYf2Z/,K!('`$sS9bfSmr0%H:FXA802YcoQ\-Q[9dM0dVlVa<eMBl/4Rj=_Ha=7mjKfGe\WH.fa:iUH/sb??>@a8el.bc.O)q!2;LD&p6i/Knhnn>dBQ<*+5TMH%7)>h,&#'5Ac,bqJ.qXQVO+Y\e8U&ePoTS?d!&kD/HQ_>[rFV,#]>8pHY%-Y.Y9TH8"-Lbj\Le1qZoHt9^iSP]gBQS!;kWp&;ICf\%$[pY@/-C+]%@_ucNmr!b`62o2#Bh%?pUGsKoC$0g[kVt8l8G$t0tkg]aUSf.).,/\Fn:cJZZTrG[3!>)_eJnQlYF+L]mkNWB9.0S%K\HFnf+U%eqI#>*)j]Ap(\]2e%FB7!5lG/jSf8^W%GeJWqVUmq@c7S8FVgQNP*#j;2fqAZ!mS6,?5['FC"?7X7e_#H'"YO$C.rMG%P9``b3c#OT;Y1TQ'H"_AEs1nHXi[``3h([>cp<op1u!t(EhPKoLeqraE@=q]U-`%GeZ=baObYJ-SU]&\"WM-e6d.p@\&Y:M&+Je+%X#,+PDH/Z'949f#YM2?)($"`AGI_^op97B&ZZj./C#C*3i=VeH`XgC8_<`jns7.>;$i9eSjf(iXM=']X0$kbWZQ/0ZDG@Ja<^glL%p#E?I(reKJmm54ioq<`(fWfJM(@,Eh;#42VrhYuJAp=BrTkDqi<_^W6[<PjKP-1f?cs\:BXGSO\)oqU%&NQVE<Y$ieH%XB&LO.UX%Gp:eu\\L815QPF`\<E/u;F$W73>ESB;mYmeKcuRI6<rOoP:b5iJ*9XB>B1e<g3;#lX'f>>T>9sf:0:h!ML&hS$Hck?[qK(b+,@V?%Un@Ambhf(FpE$2W4sge,#1m8.MoKB?q,D,u6acX#a>L6'oaGd2-QRoY+<p0oWBZ"]mm33J0NjWn'Q;?tnb^L$O@f2FRT=r&8K,,g%S?4"\)47.u_(F-b6oBWJO,>X:])-2&(*lJ%qfQ_dPn?HLhb7s*c';$uKj.5(T0K(&pn$=oM<SUADOIB2E@UE=ae#'rkg/F#ppTTo%X/+F245-.hO,K`^''->jHqK*VnKPGN&9s_^X50sN%%Rr%b%A7,'D1kV*0(q$ic6fH:N^L)"miqCkM?'$Wp!S]R0F3!L-#\np-*o)%;:I:a;U%3rpT)'A7>F`5+F&,!f)&6>\2,VpjX/1eRc!F2'%hOOe;o0:\;_\r7%BKdi=cA8PZ+Kc>i&F#[[RA!>K`%_J853&M0>5/%^J&]>1_)Nt^\:_im'c@.X^U8UIbl:*>V,43I5G-W;[ggd]SO]&L>\OY4Ak\$2=sh8(*"*chL+gP$2jk03h5S?Z4(iI7!0V7Z=9I@%;eRcWpfjp^\@1SblbhM+`JbksdAa&!n<@PJ3<GH/aI&CWi:,+cc-7gj([2pH*FpZ$"BC0:3@AlS*aOV5`'^oF;Q7Yf>WR])B!7QE%+F[;;[Qie<-2]+-=3]!*:oGj&RSuZ.o_']aF@D4kiXkS90+G?4=j5h)ikt['o>rB`\k,[E5(bbf!KihZC$\p(rT0'nEkT%3;`n3`%YEh&LpT&PHq=u'#of\/#j+A.B@-2j!V<n9?"*i!ABCnV@MmSPf=ddhQJE%g@Kb#ED^t^5$,!Qp4EIktWh(jD]bL^k0@?V'L_a=U%%;SD$2#/qih^%ut@ZE5q1DZ0=]6PO4G0/d^g%1j>j*)aI:iQtQ,nQ#*rM$"'T`d1jd78dgcWZ,LS+S$,-Rc+oG(<d&sqA5mR>J37?%\g9dn%`6PcMJT2>Hk^>UVNDaG=mA/=1=9AmHL>$D^'N%+bt"1VTlD%Q.Y/GaKVtC[$YnVUKjiA2/$i=%G.dr@nfk&*A,Z4GbCgST%;X%OQKKf%3Z4#V_Rbj0oGk+iXdV*!I&[1Na,P6;k(D0I96"$BI6O8olA`-+3MN+'-OB2rG5\p@,5Dq=M@\]k1Hlm4/j5tBbCG>c4%47(M9OCKA1:9g]cbAiO)^"D&#H,KfA7'SfI94<Sqj*l'=1_Wpbq[7>q@fftj[_\$*2s)/`q."mH`rrKEqWDkSDA[i[m6q^&E!uF:%pj/41MUp<<A$7_9ML"%Dn]uuarq_bO,>9JEooF8n2A4$-Cq$L&H:O.V9bHGYAq`VU%M>fYAtQ/&K)=hh0sb4$\f1QBFp.Xn\Yr/N%dAr(Q,nS'LA:aOlAcK-CU/jZTrV5Z*edCcQ?aGGUE.d'9J1.&A8La/NUP-&>ig=5e)>1X7XdFN7I;A`X2@1?U3-M-K`k<AJG$B.E%B!otMdZ*hJi@qo4p7M4cmH(oq-A[-k&k+M=?g5=;M?m"@VW=.QJG=aN\C>Ij=rFsu"pclRa#8LA+lNNW"m2#DmBf@!-gHc#JD,)\%GEpu[A5_5UP8f0dL%'3Bj]QaCF]bGla&c+I/l@968ro]]K]h>aEk$rI/HIUN=LR?tp8Wo]"\]RbHI`p,Iur=d:Xa^nbaZmLBk"Tk%0%m=MeL1C**[9LZ^V#7_X4a%rfB=<kOBf)3<Li[7=NGlIK6d=+]!(EK6t/m]<?lr"5t_%h`\!6#ft\5KW@Urj"_NB>I5_=f;DQ:7%;ZOf6jOgssK'meNODcuU1X[hO%@61"h8OT^5H;0i+hC2.(A_GHR.5E!LV/f$m/',\4kFK#p9W(&#15hba9\5%^2naaN/0e#W+@X#%C,8J^<'`Q4YuHhgM^j'O?$-'C2MS*'(/fm7$FBW*99cd[X/dI)LPbTJ4BI8bcSJ7o7c,-T2WJIZ-=O`)+IYXE$^,`Q3N.s,gf5V$%(1kTEd[5m_(Cm-T@9WH<Ju%N'N2_\XD;!l'?9"MPrZtuKID[4%RI0T@M`ZVS-?e!>dW2bDCYaCE7@sk.PJ`k8)%#93='R(u/<t")%!s!F.E=iJO-$%:.F0S]s`qp7]H^^N1G##nBNO4B6pit2C+?#qPSX3OH=tsoc$>TIqD@iQGk>CVi7)%E4bJTHo91%.qq89-lM,/j'%=PjX(`^WaHX%@k*>8cseP'`.-9>tn*A!RtXeUU*0@l3!VQ-$K)9FO=h2.K[(#mom,rXe0b?EtHUG`!1N8/2`eFbmWbpMm=Z*fZu0%&6>FMC2p-0<UA=GrJ)XeGG2&feJpXV,N2P<TVk?2?<T4IT2n<Os,c43eqPc<f@ZgklC7&lQd<IkO)@!#??V!4WmTP\rYq'c"RIZj%2guk_>IU7_H/*TAp7jaD"ZihO^\gQrhD-sqWR7*oHGl0#/eC[*Zl[%;jI`1)h0?S<hu2Y"dTX?qOf"o!Q_,o%)=$lQb6cX%h1:>F%A"b$&Pb8fsko5qG-*=;)jH%dcmR.aEO85M8Ol^:&42PDN+L$SOCmb-&likb!2?5?BS"b-jZW/:"m\0$!pQR8Mk`taNF@U%b6UrKU%T]jt)W;?#@5LlFnfUoQ:M`I8b5s\X-T[h9f0kHLY<2ga75H8Ak5ZN2>Kb]h`KBW[hVaN0Rn00X6.5om(,JXS<5;'iW=Wrq_d<E4%%\]`h.(mEq=CB\b._sRSklUhOV^A3L8+:.Rb'-U5Sg5idog"\3Z7PU%OL$Yeh=jc8Q8Y"".%/KD>9jnkTU5&On/,D4pNr(hccD`*W%CgQHu*,RsaFPM""2K/fEf`$_Z<1fG\nqmelrpcE!A&Y=!dDF!uBM,1B$.4^9Us<g"]0=DHmILWkY_uK@kTRnXY`0jm5g[6WobJ=]%HAWcPh/0PJk,aG.s1pt6gIh(GPoQopFDG$`bs6'N5\=1ZX`Ph?W"objOJ5Z7^p*t>20to;>^l)_oO0g%()q/GM?>D(7D\akF-RbS%.0jtrK(1?al:nT*W-huGa:R>\FU13ph*h7l)Q5!2s8(hagfpu7e*V$Jlt>"`qsjL>KJp/GF3AIZl<o<s*@_e\Y_oGhdPDb"%=YgI%"?J>,7-T[6FNf`+PZg*[#q7Eu,Co:Tl4LI<qH[0uI1g@\2S^$Q5=H&N8OVgS6jkT^1ah"ml$d3s*EjM&4k7=LM39XZHK!lDT2=`f%Oc;=#/4g+UVM=fKJu9=MW(pU.eK]RO&OoVmeku:_[!>,_q&eM'3TN&dmrg\U@R&MD2SUW-0YKL"!5<'c`dE@FQarWl4uSWr6D/ND%S:+[E.0Xd?JA9k`s)_.1oscUX/qALQ)\U#B5(&Xd.O-M-<#sCiY2o*MU/Yd8r*BVQ&F3d8Zd>^Q_MB#A8H.dRXK$!f&kPeK^#fF#%4#+\ep#tO5g"1u_9ZUNp?^fhY*r'*nM9C=gEs`?6i*GIjPYdJb8LfgODJ:f/c4\/e'S=(8HVQ)#(IP:_#2X[F%P9aE?e^]P+-5Dp%W<2mh;?XRg2gKa_5/e:IR(#M`pV0p70;7d=gZL$V4oZVt`Tf&!i$tg<M"mqf1$QolJ%G"e"7kTA@<*rfPeP1*jMRWeQ4Pu0rg4M3%KYkq#GM8e]qnN-iYoP!$!.>gs$=J)u;'OCmPoSCQJe[r0f)U%bPZr6_(fSGpE"-lj_ALCi*$HO]d*ccs56ol0+,]d/T#qt=^Vjrp%#=`8C-/d<0m$bi]&MJ#-q-oaRg:R3;I6U_(`\#F/\(h&*:BHEse#1Ze2);.7n9!!?W(*RRk$N/?FkHE8?PfTdHW$1D-)1U@>;V24%]RQe7R;+hEiD^cc9K<*TfPu<R!RA2iSY!$4<R5>7_,C&QZ=7m/.p,E'gGS=;IBtp:+a]G.E,@K472:j_[D_k&:5#0bgt(r>^s2;2%n9k4okeE7MnXB1JNa+ogT2&bim12=r0J-eCE!4Xs2-iXc3WO^HQib(ZpM=)J)>7fukFt36;^dsMa^ntH#T#=\'t8\&?&<J]QE<Wl%?mlBE>=;GaN+j"A>lqIUX)#(P?ftl$]lsq#,V>%c[n6NcXFHSTHJ%1F[JocV;;TcN>=l77AJO`>RJ*#QPb"%-L%T\2=4?'1?WM=]%2P:&*o5mlg.8Is]eh7f9RH&N(2-f@t*bURVhhQE)9u!eN4o?6LLg\mN;A<0""SA]d:B3?21sA94jY_3D!&X$DQeJpO*\;8\AeAI>%]9Us)Z=4'-*$#gVJ`lSdlc1T6eP4fmq^Q_FYRqe]T+[\9dCrU%4.!VFMI4fpNhpaJ3`g-G=`f<3Wp:Ztd6k8)fgq>g0Ve.2$Ep,p%jeS%p1I)dWR>WH-^d<.8?aZbJkT""ipDI,M9;lUjDD1#nN!'Ce2TYJ9U/oXO!l\)=N`:m70$R6n:g>^.@fQaTQH4*nh&lr-I&fU$%$6DZS4XVs1=%@S4KI!!,neZ\G1n'+kC4t)&?1CiAQ6iQ[9BBVg-;ANFnT(2YHuU$36dc;uJs,=7:jFUjpit]/r:hpuoO]599;%70%-n:I;Je_OQlDmlkG._G*2=an?Y?t)!9$QGKJ$I*Y.Oo(He[[JK8+cW"n"e3.E/D;S3?Ss\lZSge&h?5I+MIZ[H2:r:<%t]AoS@<L%q+_6DB=F-oUGuS";?qW'+*W/L+&efKo*b+AV"[\NOs?YlY'<h69khOt;2sb9BlkKfQV6DTqJ(2+YNs,&5Jk)c.V/*4Gn4TV+?0%R%Nb*tV*qq=@VreLC;"]%5gcJEq>DI3IdtTE3P0+Xq<2[d&WC+=g98F&eOI(BV?(2X]=)SX_WjHJp#=Vk=Tb)(E`N#T?bDL,a;@b-n%b]NYQK^uO%F+/rE\-;plA':t7CJ>E7\MC@k"19aq#4`I\C6^qFNkGaR@uG#uj@pbf7ApPV2LL\'p(9$b,5N*k^pSS.'h)>*p:)2D%L;janjc4C^>mpJm1r!%3Y1.4"Kp=V1h2cp`[#!9RZ-YHZ0V16eBJA?XKn'`4N,Y\=#"p$c3gK@eKCoe5MIHclgI8(,4`.Xq[+YK4%_>ZU"pXd9KZsJ&Sl_P,+^%@WA9CHT.oI6p:QIU=Xl?sS5pQXN=7dj8Bmld<;T$I4tc$N7K^$"rMV=Hf\o%k")ku/cZ]dNC!HQk+k%$AkVR6sb18jJ>Y/]_%d-:@B(Z%ngQu!7Rhc@!]usVY;'<qNM)XFXY1`^j:YSE-pGtn>`SPW:"iOh,Yc]Wn1?CNVI\('8B6&Ga;gg%NUF4/b"bKNL\gjbA/gYPdBXq<KP5#2d(/[*QpHGJ/)-F#*]]'4IApN/U9C@mQBH#>"KNA^0l5Y7,D?+P`r.Ed;3E3l5R"S(_*h4$%WiC<gi_sF-nOQt:gZl=[1[lMOA,pcEk3MTrKXDCX$-aEF1f^)Wj?>^qA(+7(`bRp?*o/%%/47cMiO.$P;^LZaEaIi]pbYL5=NLbU%jfCP+4e1qM7$_`WKTru@rb/fV]Xi'TqNsp]+Hbaf2g:*ROtg"YNlZjCcW9Y>'kllf,f`*`I]&rJX@'s%,nTs/UjDi!ITKfYroY)9%e&%l]ZeE]ia71A=])^)I8N.\ghhu#B;Tu:^^qV*/U6'O%+p*AAC9AdZSfRgWX>2(Z!ZgNUZ<D+1W[06,(G`b^51'C3I`mEudE3SZ%\u1hDK+Ak[SP)::p`o7bXn_)m1_>=`'qbI$`Bp0@,LHu`%5%=G67/uj2FIoXI&bo4mG@E0WF<@(438Z\Y^_n<n$:19aSsuHJ9C_[%Mg]E2Yo2]DHP-^j9K!,ohBFq(-n$[=%g#UpjBKB?:B#O(e*=Yo7Y97M@/0kZNbSpW^"h9IrKV3@G*0D>B)K7s2tDm.#a8c]H&tDi%PZ)j#WOukC5+Nb`q3:Vqap0MZP7<:fNd%T.,o7gi`S[47,LkGm&Ipr>]u"@9*n+`c<%H(/laIVcDGbRC@J8gS<J;jLP_\"DiL(@k%Q2>o7<T?3>j0JgABmY8_qsROlBQTdO-co\u0n_Q>.ZWq/Z8S2P<YQE$42!AkX?Hi;I.S3a^3,"oB3D>Zr_pBdhhjlaM2,6)klj$P%ohLN9?AAZ"p"cTtiPKjiCgCqu2`H3MbS%n6$2tPcH&H1p)SgDGWQ<PRXDCEr;A')Xa"eP-4:*]FM&ZkA$aGD%B43ib$RHl'bEqF^%mnZH%]rjch1m4,U-?G@!`!=nhd*pskd!`U79RfNNh?#\*nXE>5)eBN]TEeJ_oC_Bb]'LEGTgYVWT$2<gjC/I`NU>U:/PlXl7stME%f*BHPJ6>F+=UES+o917/(@!)UHHAR1!>iKr1pEgMF,:G1YQjHJ:1HsL<;KgD#4/ROfQD@uCb+IcK$r/Eh"uN@j\"s[5.Agi'@QPJ%#%WnCbeMu+I6"U,</ieO\o@GCZsJkg^PB[U^"A!R._t;`,?-QnQsK@C6RX`oP&(Lf.HsnpU.V(V,'_>XgM+NnVs,\#GmMCP<cA;9%_X&mccit)?W5W)<epT]/;2Drk<t@g6md"m)niUf5MrLF[IQ`@P@9gIe;i#oL;9NRoa&Ho3!eIqpL26EN1s@.nh!s%9Oq^p:KEViM%,]0BD@O8'K]4PY'/&$MI9VV/=%EF/ViVqcJ'aHk,9EA;p!^=N3IYn&jleM6pELeF,LPR:M'#i;J?NqfJBNe^KTdW>tD&t"PWkah>%KYE[AUP&4$UIOIQnk:HtHo.e2lgVh6h$5>"$`mKl=KHZd\`YBg.XVCVpN/>`#gGN;d[o56XM'P&dik!/q"0`>:LN1/IL+93eSAp'%hm/47Fmu(h79Y:2)4s6t<;lC%g#5!*k<hW/LLG3peg:7R]I?#1&fT2&()+]Je$6_)S=p";Ubg]@#(jb;jGduY@;YU<LpBIt[S?tQ%PGi_VO!&@om^3W@7(%tX/M,)\M/0(,,HE+gn2]<,F7^?l&FC._9(=+"qc0ce(q(jp'ag@pouRt`1$tDH$Pgj`-=jtj*"kfiP4Vu+%g.l;E](.[%p09Y,B=*9;.1J%'5;b9K`/88<;Rqkk*%+a%9BQ["/^Bkg^Sr&JV5&mAfCUMJPhq$`krjie5(u\YHOqX>#E_3?Zelb;%h+W%4mS@N31_n+9"&q*jr3UR3W?7Rm@;N..W;Y[aH#LuLb;ZIPaAinm"sl0&lE$klVuHKV,?j2-7'!sh[*!_`X*f_:Q+)QMH&lX(%:D'`,(=L@o0s1@fL@T[j/&-eGnu&uuILg8VpW-D7'\^^uZ*!pFgrc7`>PUFpQ/CV+j\pQ-]Z7M(H[MlAnkdJUI&jp#\&tWD<dBaE%Q1t()LP<+q>NJe2X1ZE\b'SN:]Z7M,pIQj,F.H9LU&B=%KC6Ig!EA-ZH'9%U\>J2a@[+rqT&Z)Qd5`9]QMo:B0(6l4=u)]\a=7r`%eq89O^.uOC!l3Pi'E%;PrNo?b<IbD.=h#OgNtS%rU&,EBT0TLrP]5]]7LZ7M3mjTScca'>K;_Z\s!"Na+VK[d,a6mc6UdcZF-1'6%/;PjbCae@1[*ks/$ZM0HicCEGU41)T1JR.RS-/q[$a-\`)/04pBH"S+En)V-2*m1b7>TP]FcIq'FUfM4=P8iekcQ1de(UQXFQecK%$F-W4$JXJ"5`ZcWjMLEnL5:Ya^k8EiG^mC,@HSJ>_,Umn'0hrS,r:;:aVJSL[R^KmGWHQ%m.2O:D:*&3rqF(.MQJ#<ED?6TM0bkZ%JrUaLjm/gf.OYaF3Ne%uHUYV5;LuY_<8lSYrj%ojnsbE[jbFW!2GG6-We?-uVd!k"IOZCMU1R\dHIX6*jp/-iFQt,L]O8a@X9Hrq%O!Dp\(`/2`h%kJok"G\Wp(*VTW\*M9ZYpgE>7PK3l!=dE,O7b-$@tSmClHTIn@!`%\JnmEe3uKLg>&c75Lfb>Ho7jTT=/EPocf:(%J,WErAos<81.u,tj<A?ugW:uJ6D,k<>S[^,eCOa_Dk`k!,J;"ZW6D;smBl.':m%V&7KmfqZ=Zfq'Yg0SW(O3!or6J\j;Fm*34D#H%.5H>*MA]F0#0i9M_u$[b&-q^NMA,02C072k&ELpUd>rjbaiu-La:bL6UL4.)KJAnB6T%9,>>:fr2INjAMXiF;c7r"#=N.6P9uD6%%;MnbPALmZk`U`\RHX:=u(=?jq,,uX@4EYfXP<*(g=X6T^X(AOHV\[UT5H.%\Q45njg+!VrkDoD77!V;"KAh]\9Mt=XVDE9#Y]Do&%7(4/T7\'T!J4fBZK^jGR[h*%uO"ocm7sKKD1?S<bj+kNQkAX;4T5p_r"2:khg'?TgH+[%IP3aY<ZF`jX(IfAf<Y]us_3,pUef0WA%F#sc7@h:PPLl1CG8re`%:h[EGDcGHpX$0>!69&TS'Ju6/rR@!Fa6T!(06qmmjJ0($MR]kP%.MlsP=jMa$KjJVoToVK12qn@mFl-X%Pgs8DUnbV\7*PoL_,E<uGV<">7NARu7c\tOATmD2,Eg2V;ZKu15V]q5TJGUcFlWYY6PUS,K\hCu`X\Psa+PVe"McRHdk5Nn!g8u@%KU=aK86!#nG)T4N$B5N/Kg04/H<-;jAk,(BBhYgXGW0gggs;.'24(SanOgB`?Ls%l$%o,@QFdq&JUGAikA*(M&#AI<*5rMqn=U$r%-^7F=ABpp[_@o%r"[djpaaiA/G%i(<NQ'F45H[ogPG2dkj0NT#9I-<\Tr/rIKa@7[a4lTSZY7'Tc)GdtW9b\UrboP9I$VNJ2!cj+%&q(&j0`(,sc.I"q6&DNo8'T6OWt.6G"^RC7%7=sS&^UHoa)2Z30QXcn3jG).>;iP_T!ShPNH[JXWX'\&n!N.V-JW@<\r77B6&1H.%CglJR9J25)YJ#a&S/iQ(H!MdQj(>Ca^=g_"q7JhSL7g>=N%VbK<Y"EYn\//[7&"E4;l@e?k:>L\@V;N5J'1BQa,2OC[-7Nu3Nb?s%"6h?5no2Zu5gWHI7%PQrA,IF_/&;t$8PP2nXh1:^oY38\+nl]7c(+]L\o6F2<b_i8aChr.-7TLr!@FoX'IorT?A'h_5u@f?Af:9$%<aQ]1N'^&hC&drn*Kg-B**E^7euhXt-G</iA5%>W,E0u(O)VS$,'o&7T`%&*ENabu?7\GVXabg`%.PqI69&"l?CBL(?Mks-GOUN0%a`,>P(7tQ%SUok;RV#(D%bDc(4nd.2_D=hEWq+fbE_P-UfKf;t$?H?p&5+P\>+;WY[RiTdrnfn?-U=QAJ_J`gm/d4G9pn_H$@kEk%(PgED*h>C"\4N1AVuW1ddq-A&,L_(.cg@60_;Dke%G?;M4h&=Y#X1mVBr:9*&&^dk+N2<@MmO@tQJ-Qc8m2Y(g_`m118)R4/7^V0%Y@6?8q.UJ<A!cH(MH634e-uQ6.1'gh$eV%?&HJ'sX=M)"QrjtAoW/+lSsV>P#i7'5>*>?"oH;nd!cbfq+.`u@,L5AW0?l*$`8\kU%rR6CDh775U>ktCpjF%6#==f+Cj]=l'b$TfR%d4HrAC=hA\2Vl:?1O_9<#bTdP0GCAX@epn3`EO8/T;U@?&4H:d*!M?(aG;"Q`2G_%1`nL\8@Mm1Z$)m4MBs08Gm^`32c=.+SR-]q_[>r1.bRkM6O:\CEF!?3ntq0l6RD"%du.-pQkR5QRlS@5]hu;3rKH,9bgs2s\aPTQ%r%[92)44]B^f_Xij[:!@Ra6nRaA?\$L8gO%9ld&.Tc,gN,LYP5>HYfmFea_uOAnW5.I67R>8-I;d:#/=Y"m.e-8i>G</la2.lD>/%[XgJVq7CCLd3[U0]f>*VQ,*<\7(8`rqNIW3N4;?A>V*iim#J`=LY(jh.fu`P^U.=B0%^nAPncdL5+XKe/7n2D*2SsDd<5LoZu6Ej%=CjAE[YXRuEb,Wu0_n'EA<MWZB%)OgNn0lEZ>L7)Kc9).fj")C/Bs!Ka*"]NO+8QrlnYWSL0T:PN/2nm*#uOplU0(h]B<)@_/;VN%\@nTK&*\g5T185VgKnqYU4>h^g:oPENS@p2ch"#YiaX@YlG=5orPFGho\Y<nk7Q'oWCU6*Xd(:?)Ig;!/BJcP1J'[K$[)XrK9u0G%j&Dmul#9EN2HW-E\(=IB=rt5/_:h5Db\20SCgu$-e^TA1:R7JpC]kOG3e'>PLI^S2#U-sX&Fqmk+b.?PGeLFG1JCH0D4rSJcBM3Z%.*M$t!_ofl)Ni;NYP_n1>c<jC@(L/OPm.KZ?f5t.-TO@TQ=>ZW'\11c66e#c8d&An;^0X*Ydo;LfEl+e[X[cRUC\QsQZRqZ]S.h]%3.;3'D4N#[@ItdLi(@RI@s9`=7,N6&#*1mL>9<.oh/6(Pe^!!\hX;<3YAt#W9/%W3<t'ok$JR5h<@Ot7pP*m-oqCq]<2sId!%%SK%HSp/O(-]*M",k`u(seqt41W%e?.iQ]]S(91e0Lt.[o>bJT%01k)qXtCh"Z$J1^MPJjA(@p5kZTN0@OV?)5t.mFU8[X\:^'`&qg][%aal6`GrU\T]s-K!35fW5'%,Z7p[kgo<[79@*[7LCq?<IJl]u!7+]1UZ6EO1XgC`V%/W>+I4.MB>d?>S:U^BF,UG.m%[0S8?iYd5:%FM#e;H3q>W7n)a(qmXbk!7@e2dYgYS1cpnD$cBl2hG$Y7]A66lO^=k$7WAh7A_H`b#9:F?Yldq/25EgZB<r=N-Ec"i;tL@jgd:7W%V!Ffs>YZ0HY&Y+l4)g+i<7!NPgpTSkO+L,I<']^H;r)27;E^at\=8bjI*,`]pY9n:cWul5RF1Ss].WQ_lOW:V6NMjd[@*lmC0-+i%eMOHJ7.#NhV!MJf5#\/\cBCkphIb9hc2p\"T*>KWLo"e$GO1E0kPnI88OHOXNYH-VnXT=A%L!HZIar^K(d;du[=FMa13-KHoFR;/%PgWA\(HODsFN+Bn]N/`!I$>Za?f9]SO#9'hh`Q%WA,NiSZq\"b$GC+eq7Fc5A:K!Ud+Eb@bn@#t]5tIKS6,=Mh=_\!YN[elr$X_.%E'ZKu8F!IbrMMg0(qNuHCt2*_^kXA7rO=39U?UsC7K89b74>=m-`f_X2mq;">q/]D]6Y6T>40pS%J@5+/1b")A2ZtX+q7F4G]!Rf%>7Uht4MfhU\,@]NPm_e-Zh8e7-TUa?+I[@MHj0MU6H\UDf`7M@U$`Mhe&`I3?*t(cd5$m8kb$/e?r7W*dl0BULT1V1e'5=lp!>JZ%.mDj-2^B?"`G%#MM1)[T9OGZDc):.m._jf]G`s5KI<jl=p!5L+Jk,.)%_L!!_;8gd:>2cJ`ropn?_rqbH?-Y7jm.uqB)n:Ne/FV:%\MB3MVn;bFlarZN!=`FSH4;qOaG<7%mPF4ieW$(DgUTc@=RD\0O6Zr)m:"aEiO.K)q?Tr)R(IIK4uV`I=B*I8=PDObs&D1d[^u^S%QQ8e=l`8CCRR3U3b#.Uce\&'5AU2>/!^eG7+(7pV)5`FU-ib&4[X+IeF=nlVI8bA:M2^+14Yas8O)NPl3l+M>^RPM\[;:1qI5Kh.%n.,uVKn+*R$D;s5QLG^ls'>=oe75![oKO.YOtJP#Nj6L0,?j-eHo['a>L_,*W'QXrbtWZ@<;KF2Vfr_`Es%sOKeLcq`*[r20.AiA%W32$f9$qkI-]q#<]aJ67$Xo^L<;iNIWa^9/p1-TSV[<Q3]h5m*4.]KX_j8Z62#47[\=8m9du.GXru;W/;J,h^'&[Sm^3DuDS&$5p%+I*C8UWb462WO+)cb$&C=9]4RF3TpBJO1M%VXVo+45)kaZJ$6CX1^m+g':/LH\5k:G=Yd3"Nd\4<JDU<$pW;\^-f3k)^MJ5Jn3DU%861.oACXJ;XSNFKWpc%Nq?`<bh]Z.q*Knr:6*f3+,ceUGZJ*?nO`s>sH\Z.>:QV[O%`rJSOK8s#Bg]2[-V.9bK4MB6865UeEi::,%SkkjK7HsY%)Hsb<$>43"*'fkVLskReec46/Y0etcW^TF]qfgk5e:m=/40qt^GOA"kItuWl:aDrsP)$;?a';!Lk`"-(lBq*4R`40S%d6\6QhNb=JD*4b5\P_6KG'['UN!B8Ga1Y!:etD!?&u)(VqJ*e$n3(H9N^fMq]J]&Cb."f=fPogRciMGloooVTm"^P`&Z7(Cp;2;F%qsB"q59rFrO(":#FdZ^?YP3?6GiG?&&(tpnkc\&**1KK&PUB3<aC&rI?0MVNKl.)0?NB9/!IK[;WE(AjKrdLT?:AO23MdrqahnK.%#Z\4.-R05]Sh@45QI.lX`K_l'YuLLW,j@#5[*G3'hV`htkmEt@c>*OJ)]Vq'7W`meIri8_G&36_VhC^#c/0Ym;auR>c)jC6C`J5&%.Ya\/PHHOr<p(,?[S6r(F]mcH)X@9$Z:h_!J*\Afl/"*/p.>s,lGY6V'dpg#@dSd2e9U/QeJ)+d&:ThLNp7Q1:;T%FEjnt8H+uM5%lpgVn3>p(:Ld`r`1p-,!XQ#q<'pM>#CB8.6JXdPF<ca-l4je#WVL35kmioEKe7/GX&W>@o)pam]V85e4mso"=k<no77nbbI^m3OF%rNl84W]mS=2CW6kX#-tbZ'g/@eZ4,(op(J]NG.XI?FWAJ<nf7M^e)@ee,7E(:<FKfK,]K\Xp%:dpBktHc.c$f?G<3RK2G#Q;oehP%b"YeBT^MG(Ph$C<1"3A@R4[c1ekK^nqWSFf:G)S]^N>raB83d!fJdkm5`(e6U?I]JU9O6YT,u&8JBDu3f5>_7>s#R;b#G:-[:qd.%-ONn^s*[;.'.C>SE98-S(%S%5A^]VM7OS&kR`%jn]Bu]:Q@0oL5u=t=H!Dsp;aj"K+W<8m*jQ9XaR`HZC&NKEck:h+>,0oZo-L3W%S*NS_>?^eqC&K0kPOmp=KP>a[=KL-X@onm_FFo,l8n(G2SaDV5Mp!5gWZ524'V=q7MN+JKfkI!eAT'B2]Io5_mWc^]1IJOla?-OZ%8d*e$]O63ROLrfs6.A11?UPNB:@ZOJ="UoEju(_GlcogFEf)P8#(hX$/gHZ21#Q!0T.4sK)h+s(j6,\TH`Om@kNY-XmXo'rUT%f>%@dY4R=!L*N9^7aD,=8_95h'IA<[/;9oD+Gaa0"`8*usqjiON;8Ot[;$KmVQS>H]_ab6$Jd_TjW%^kZ!RpX"rVJD3e"-RKj:;T]"r%=VF;$3ph[dT;dE3"W<?bfX(F#=.dn\HEm67mP`sEEp^[>:q=5TT]X*UeO1i2g%`#h[<p<h66h[S$'eC:Kp5)+2oNUj_!5r9rAYmA%J&deep@`'@KGDJ\FL"jIrPa!(0[)VkJ(RXrP8$ps.:hbk5SU)pREVoia?!o4HG/ZB`@,/AA>$#^Tumj:Vs3cf&+AK/bPLVsVM@P3%071l9FYjiY5/@6*g?[8q,8F*83GgIj=+CN;mPtH$O_@5YR;=VfWKin'NhI@MX:7,Z#0uAQ.1](!*!)&:6\`b&%+s!#@H026fPi\h%Q0X`g9m!+JG%]dRG<@5,rH;FSe'+e&QNjJ#Kt=qngp"1E+"CYR>8nj=@r$a?7!NQI%J:c+Ii/9]RWX>ET&tu69@!`lNrP=`6pigD%;ECs'UT")7=HFLLF_\:g7Q)Ei%f.?_=+YE^%X\a`_=*36=\+=lja`k8Yr-Brlf2(W<F=DU'c\LHa9r,=&@A\n[]P\q_34Cdg*ZQ1%iB//VYZdn[U,h6J#"R:BDseAT<t.oSX`GCG4$R_636s.(D2KZCC$bHJ2\iJ>qgR?qMg;8=ojT-\7lsdoD8AVae.lnseek3=Vs5')%lX'<F!ffmZA9QB,pi%9_nEQD/Z"(pa^$3LWYl_"`>_0UB`sLMl[QXL-)iddqXm@r]cmi*/P'tu[h[sE=/h$h^1j5,.J;:\OIhL9>%n_#]G\_%U/9];FMHOD^">U8@t.V'`=6^CWG4Sj$$:t4^bB4Ee&J^%\Ymhca[ilFgE.J)MPXbB//\$!^Z`H`DjU*In-6WH"/Ut0GT%5jo.M-3Xtm7;elQFDGca=^Ulh7_,8E@Ws03B=,mYqd\H5_9jI'cii/JJ9Wfi2UV)h9,qr=*;"BSU!;TtOYgQ,2l!_--5sHRjppcR%RnmVE3:N*K?:qslHe)^]olWd_hbo.N&]^a%),LK+nesU<V:"c_-=l1A1uVoZ=?8q,&,ZQF5E'mlNKm7XG2Tsd..Pbh=5U3UO>T`@%k15sR.sBF#T?[#T,^3j"F3G]K.j&8&I-fp!14PDbasG+!g4"m=05N^]ldo.G+qNX-okfiSV-e2k\8JY<?//7Mr+_pmL&qKYo#%jN%qEUIP?>h.f0?d<0C+\C/Nn=j-5HV'$#Oso6VBnX[o7'm9h@5=u&A287K)+_kRL,0i\..fO)+R?e/0"!;'K!1/9.)0UB&G2?&j4BZ%S,8`(nQ4D'8,RC,a91eaNX5TC`p2"/p*aXigXL_$=j0!.Epl1.cp[m[W)dD7:K<kITLQjNc3#r>RYcig2'OEKOIM,]U%,g8a?qJ.%e]'dBa]!XK*`b0=\R;DahR`*'0ahJf/Li]%2D*B(g526W7"@[&[j."X`=hQC?&65jK[KN*pc9"C#0sWfDY&9Ere/*o8e)Ji/DY=V%Pg%Nb[p4PX;DtI)PnDrW/oWfTCoY=F:CHWG&SqQ.(8O,f;72O\5*g+7H[%r-U(]>Jm;:o%KLC\'A'(V;W0S*I#jmYo#Ze,LM%8-g%b>]6VrPOuTro^L=2B-@=rYM849K5U`e1bugZ@%fI+;bt-d-0J?"`U_meHMl[l_MjtalB;2M_6o=%LFZpQQFA]&JYq=A$Z28jjGGY%D52O*/\3W<Z83?''j%@r''k\3r>(V+>'n@S;.LWgHB;gcb;*(Y(D_BYipA.Rq=A<naFggF;@m#r"B6C?_i16t)d#QYUfCpaB]NXc%FTaHJpIOht`3*/n$sUAj#0e_c*Z3G_"4#A=U:s-[**gb+q+^8/hKL-f+r6i"D=#P)U(lAX=PGLTp>k)FbTG%0(sFcn;jh/8]ksXJ%%'NgIGeUS7Tu#oJDd,%.gB$V+l?)*kaH'YZ`aVX)i,Xo`W<p,ZKsdDJZeMqc\KR,OLW[MsRlP64Ud8NmDbdUtU`hJUPV-/OInVND%Q63.b0qJ)'gi%dqSu[UD&O7PB0YR#R3,t64IWVs4s&'Hnr-G+c2F_O4)o5AA&W,/1afd3C1Nl4?R*L0,kUsFC3.kTU]CSh84/@%8%K/bWXOJmBDNfOnnq.fee\[.;`7[CN%W\0:LMsK`e)K8])0DUsACJeb("QGFE6_M<gcN,!s&>KDd]a?'aDl#`[U=>>HJfb*VK1tP*%&ST%W36tsk!CsZg>#$?K[>Ru+iF";B\Fbf^VHE$62F;5Eh4&&BUW6DBiVG#U?"]t+AieodQa42[`iNS[[+Ztn"IKZHhq2Q*B5#nL%Q['=\SN(LVE:#XRQ9fd!R<[=DY7n]$>CVl))PZb_8)RJ[H#nsLpc9"Z-opra9\/nZ5dg8*<*S6G[Ik33(>Ugk,9faJ[Pi`Q<.:S8%C#-q)(j0KVE!PLg01LM+(0_n^?O:=mOKcE`nCpQcA"B1.,^$M'M52&nEqK,QD.@MMo+Lks.rrV\F\VD\((X-qY#<RMl,qtdiP\]G%Hc1'TZ'ARp/V6,37k1IbOF\8N=/MVP(,JO=CFJP>"3ET9c5X;j<g3`r%Wpkf9TgJF+aiVnS't!^d67U;1p("/<./AR1G?-9@_WRa%s*oL>9PL=,RhgBB?b^Eh:_$ZmO\N-Co['Uo7eQeNhr58s@ouJb.sbO2-E23Gj;BgIJOa[*jTD/q];^Hu:nC+'1IP@O%UHJo2@RbH%$VG5(Ue+6V(i`@Q0P2I#Vg.bNI:\loM@iD+b6U\_3QHSE\H\WIUJ;c8D<<LZ+<NAQQHqle<<$hE4Js.gkf,c4:e4%,KuTlh(^#uK%UtuXY:oLp]_d(uJYfOAW>LOC$1UV!4GcuEQ\n@E8[iWNi=JD<UWsYN:S[h2PGZPXO+7nST3V"\^drbJ#9Mg_L'_9X)eYR>.FB'J[%pa+_UfYi@Zl2K5OS#e;u[ZoSXJ^1j"EuO[[4Xe:]oS9O45'GK0OCdq=?]Db)9g(b/?O4s[nab=RB[4dHCuW$ha9q8HIA:jVb<N2b%&Nj/jM4?ZQ'i6Q3`$';\h+T&GMO)W\J@d%!:",PkmHo(Bppt4,*EVEs^\MRc.D/rcr$MA$_IJ__g%(+T'.@qUcrW0=n5p#CCXVg*%iga*5p\"n*gtiXZm2Zeo4oo`Y4!M2J,D&.M/KYP?6\Re.c;G]l;8OoY!J-SV>hs$)M5"pmkq>m\=>SAX7$E_&m!)V7<@PM1BP*0[%Q_Ak3h+eY-7c<2G8*k;3mKV"k7/k4HIVMg,4Am9!IDZSV&TDm'Y`D<6@GmSHkTE%N]uW,(!NiMs,53^;q5FdW*6(GcI-</N7RKCi%)SH_G7Qp#EU3DN%,d.n#k`ALd;&WI[LYI4OKo`cMha7N-]PubMH;rZ_SslCKDS0q0`[JG@/i2^TOo)<,4LZ'Z/</Uah/Nq;<upRY%(Jf$,j[TR57pbcV9ZA4Z(M=CGco<r(pHu;r^Fqh%kh!l\2IEiqR^MeY]6b:WOjQ(gfmhMpQCtR4/E\+urm<KKI)><22sfCGa6not%fY-g0h&Gh8^$uE@fAEfZr>iN%5H0J<Nns$i>lm3u$2Djpi'X8iO.?>9ZjQTT/)V(aYJ4TAqE&k=I)><2GO412a6np_\`E:@h&Gh8%^$uE@2r:fdiuPc+@3KLShY;c[)fOBBnW)EET<NZGp&X8P*;/5t+%khdk(QgkK.P3C/>GG]l!Y$@=[oI)kq4CtosE_V1_%j`MXiEi%$1,b`="8(l;oOj)k1G`h^+^T<#d%#.X73SD8ot;\g(Oo^^,\Te=2r559?o=\'(QUVTBP+?HO>sa3f0#63/"hD?r^]#[tGa`T3klQ%G7@M9"dZmWAe(g&_Qg<dL3jY8G5@2Z5`-:H^%I2e2KKkW([('!&A;rWXAeGVX.(;?,Kblom<FiUX.iV%?;EYc7Ffe"GF1>(>I-=B%XuY`j[rJ7]Zpf[DcZ>un3rtS[DA/d_P59r1d-;*:Z%Ou4b=VAkI<X^o0nHq)FX>s]e5mY?M:E7l^4'LUZk,<dmm&O7O%XNC:"N)P%`h0ism[XQR19-.fRop`nBU3=li;Yh&)Z,l#7[f*]kr^-VAdRYeLT'X,C#bj.@#'A!Kah5ViRcnu>Jnr^*m;4Ts4*=5ZB;E:^Yr6U%+u?CM*5DLcbo<ngrBmD^GADf)g9sc2_]#L4:<Y=DF'X29<@FjX]opH%(l,#m3)F8]"/3%4"Z3J'e+P7017s!0&.0r<TmD"l&&j1n%AQm8/TS)F\@8V33N%NJUBb-L,Eo#\sp:T-3MPo`>0&[pDeS#.1)T[3Sr[`8L\7']@7V]@Z1rm_4XpCjll,#"s3o?">6@QV._VX*g%6>f%9iOGV^.95@iSU]J_"I#PhSU6<d@1fch;`*:E69fl*/+8s$5O$CiXI@E>cA8smM;mk17?=Q<@G1JT%,0PPQV`<=ejJ)XJf:IL%YXCZDRQcmZY<igH5B!F,TUS(c)Buq&n5XAb(W,CTEW)8I\VV]tO4ROLjHs&umc?\Cgkn-9b&kB0Y$M2>;q9Pq'/Z5c;hZ/OL,,b<%)dF&FX\L@M7ett^0[-74Et)MU)PUBq";ol.1U8Ms=S%R5.V-k_Ek>C0`7.DinN7ukB$ir/pUj7Hq%Xaa/9[_I%belc8&_KiE#uX$%nPJ:EU35fj'Q%3b<K8<E$d[@5qaA1#-0e+2!jUi0Pq2oa?TSYsd]EU]magM$?)"R$U[t8[Z&7-68`,N$UYT(F]-Z:.hc]-H8b'MH%Y85!d?W]a0I;[2N`dGaCW[@c*bTfj;3=0nrlC$k2Nj38R0;n$E2S.16,D^Kn$LlV,IrjOE+FX\[e%Y#XKZk(:+A36?X,j@r/s1U_%<eKYWAS'p&[:IgEp9@[=Jb(n7XEU=mO!#%hYs?b"*LSKi1RU@#[`]$F<(_X('s"5q7@HWt7iRR+N<&j.TgYbX)kk?"OKg(AZDdYD%KW*!IpqoEDb2G=m>Q\bOf>USg0:TF\$.`D9Y+T(@?u-tf,4%Hi*'TIhWP+4gjT)r*Dl25X#hf9pdBR<^,1B?r.D$+Pdf'G"mI-.b%rlGW5muYus%Oq?aYfi?!]fX7=,N3G9`Q6m9_<T_e40'q;9#)(-lk+gc`BbfW2aHM[X:(:Cam;"f:kZUgh+?=Lk/o]soQ9."J7@sZ%a-e`pS^_t#&Hra(L\!nR^k!cDS+ZiZ_aWt[RZ'*9&]$.<fu,j;)4"GM`*+)<P$t*EE9F8BhXg5mgeVjr72U]iOK=8iV>ImR7O#+b%W#]Kg:ilt&UV.T+5cYV8j1SVa!et[!E_TfU::L;iG;'AHa+MA)23,r>9PR\.JoP&#(rj*J*)ShK%\.^Z(+#D%)GY/,-X)RGDX/k.%CN@aU*Bb;lMA1[N!f_uDc1O%2?MNZ2LZ?uYM[FE6-YYtt2X/k'@CAm53R["83BP0oNpUkh9aNiNoHtWR7XA)lFWZpU<dCSsGQZN`%P*pgI0,q'lP*ojq6#+&$l?-'PdXLu%En<?L]`QuWRH!@(l^thJ1mP6.1^bu;5d+6)U)jPqRVqs5'S<6"@1hi=;;#J<8&b[^#B]Q-%c0Vc18N5gGV%7-*.u?H5'r\3UG<kZt%qQaZ]+M%%C*E\8U)Wb,Jhqn+peXEpPh4R[BnA2<qg0>&-t1:d);J^hDWgR\Ujd,J=W2@N%[fQL:fFV\;*^SP(i05W,*jt0_>hQG+>[;5HDthq+RB;.1?U^<,HOGP-9)`PL2:+HRJU%j^1&Q1Ij,WTfbNJ$V1=h*4hNiP9LqXc$%PqN]=E)%G'`9(bd.a7&In.b/_9`rqF/5PfbeZh8:jtes4j)LW+JM1?(&e)sdXN69hhT4[_8$;q%RnBeR<6GVN@rf]r1G23f796<P%1')F>IM_:U_pl-20;T2kW9$7`9$,)jZPQ3Y[e6\eRREq6n-N9PaJjM""9mL6#nt[`-sUrG(1B55K/nGSmDnlMn1sr8;LDno(L*T8%`l<TZrnCK;=L!d]kgqXgfd<gJ6Xf$dbMG8aP/?E56=T.3hiJiZR,Jg(DI!<Kg@9%G"rOYnWeX;1D6MJWUnENifa3rZP0rDuco.`.%CO7a\;j5bF[f^Y0`)Y3e"2%tp.K.GSY3LM-m9!H[Wf&:JgIM8%gZo=SnQ3,I'bA76>r3a,ll[/P^S94OU:.VBF"&C:,-d'5a@_M4%ct7aF\:"L9,]Y55_U4FQrN]ooDDI9rTf_g$U(]/N,:PL`G_j;"K#G9g1e;U>>FXd@FtiS#XK1f9HNAL"_7>Rl5eN=$%(mDZem.m*%)-rQ>TcoB93jp&7.[/C`#p^YD15pJ3Zj2jcG\fU2jRVI3-#CHm[J;/$0BH2Y.'i)F9b%:97Rg`Hms[8erb4tbD.0];50DLf;[mT+%e+RA!O4e.FN(Q8G:Gb;1XF4i+@C/3L/mGJ$=Z8L,R!3AWeopTXaBET-GkJII4u14/%mU*RXrec<r>j>75IIQh!,7Qf.B]78WZ:62%-R+XFqS1__hdJJe2OIngG%ZGJe-1q80K_-uJK0cd;4:JUOWjkbW/ZI)rbs9g'r'j+e'Zl:ihOW_BqJIpO]R^YVGE^MD?oI:T$eA1%bE:f$O8O;T8dQ[>7:[3-hqu>.b9fe*>NW?PH4\`T<-n&Q-Ct+fpo8tt\a7G$05%I^CeB4:\-Z0'5'CJ0X+FpQ)`+hP&shm0Q4C(`%AY\dKOsP,ieW/W-8M,Bo_DrWS/BSGu2IrTDQ\QV2!.V$j,Lf-h,4jpi%Ret:XsDWpbM"OF*2\@]H@QaqnmYK?CX2JG,Iu2=?"Y(b%1VjRo@IdYC_tPu]Hc-E\gM`fbB;?B)0ge@'g*m&TImlmq041P^h24Z=(W%(X#j198LW^t8&e9=b#`"_\6p\h!eH6>EHJ[TWD38*[%;rGAp=,fS5Ll<XaVS')n\hhj9Q=,af-nFDL/b*5gM]<J8DV=i=3O(,-<oltDO<@Vs<F<M2I,@qVZZN+S_gBP+0!T3W<LC&,96b9*%`ZoS90GK>E;`K<`p"U=[SjSkG.#>/"n.H9M_/cP+03>)A[hks2a#F.\2+dVea\0pc?c.?&I-$MZ3rWmE3jbO@l:0CBi*k-J<o\(C%-KYeeo@Q(r.6@3CWi\<oH#][ms'QcMH%:S$KTLR;TEqA8m:0nXk<q`9ah\ls'!Y2j.:?O\0]W2BFY0X'"#99Qndi;+)"9_S4gpG=%+j_9V08>q&:m0gkQMu<7d3q.;=(RBOh3D#&)G-=aR/_*I-7b'"K-?t%_ca3L[fdI+OKF3"hu!gtKutj$H;<iN/=,(mMPC,M7<R?E%T.%XS,(Bbb)JIY+]Yc,;22gW`"CeZEmhY1BMtX04Z_D6/aI5<HaIL\cmg;XN6IoKop(=<gPoPL'WNj:4]S4^@C+W7aUZ#CVpfNHo%((f]HXH?%0(rRaoFPN\_oMf$>(^8Z-_n[W3Frj*Hk$T).CR,5+Uk3)XX[rfTHWho#NYW/H";kVZUFoSHc2=;")E]1/6=Cq"P&k#l%L"pRAKF7'h+`EaM!MMErX'\rAn\A#3p,f?Y56?Uon[K;Gm5$JZ*.,sWN0uZNB`;++$mkXCYMRi<(84n2(-!_a;M5!@47GCmR3jm4%/%sFFTq$F\VX+e,2EOn7jHotm%aJUgibLF,FLPoQg0rnH.*`[1?QQRB56_;++m+Mp3V7tJVIDA6JN&aq3NfqNc"l9l1Moin[DkW+%?n+u^#u%#!4(:S%H+??uP9n1AQ4u-c`?13g`CuR3ZQ$X8Jmu1'?ZgRRj`PcpgCM'Z[+VOlmWgdN0@TF\3DQWmH2&H4_squ_%%$L"%ragMF`q/:KNU-35ksm&k,<id+G#&XL5E'BHq#~>%AI9_PrivateDataEnd